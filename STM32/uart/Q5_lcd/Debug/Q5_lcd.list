
Q5_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000344  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000508  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000508  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00001508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800050c  0800050c  0000150c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000510  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000514  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000514  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013fe  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000052f  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00003968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000015c  00000000  00000000  00003b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6d2  00000000  00000000  00003cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002233  00000000  00000000  00023386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c323b  00000000  00000000  000255b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e87f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f8  00000000  00000000  000e8838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e8e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004f0 	.word	0x080004f0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004f0 	.word	0x080004f0

08000204 <main>:
void PORTS_init(void);



int main(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0

	/* initialize LCD controller */
	LCD_init();
 8000208:	f000 f80f 	bl	800022a <LCD_init>
	LCD_data(0xE0);
 800020c:	20e0      	movs	r0, #224	@ 0xe0
 800020e:	f000 f88b 	bl	8000328 <LCD_data>
	LCD_data(0xE2);
 8000212:	20e2      	movs	r0, #226	@ 0xe2
 8000214:	f000 f888 	bl	8000328 <LCD_data>
	LCD_data(0xF7);
 8000218:	20f7      	movs	r0, #247	@ 0xf7
 800021a:	f000 f885 	bl	8000328 <LCD_data>
	LCD_data(0xF4);
 800021e:	20f4      	movs	r0, #244	@ 0xf4
 8000220:	f000 f882 	bl	8000328 <LCD_data>
 8000224:	2300      	movs	r3, #0
}
 8000226:	4618      	mov	r0, r3
 8000228:	bd80      	pop	{r7, pc}

0800022a <LCD_init>:
}


/* initialize port pins then initialize LCD controller */ void
LCD_init(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	af00      	add	r7, sp, #0
	PORTS_init();
 800022e:	f000 f821 	bl	8000274 <PORTS_init>
	delayMs(30); /* initialization sequence */ LCD_command(0x30);
 8000232:	201e      	movs	r0, #30
 8000234:	f000 f89c 	bl	8000370 <delayMs>
 8000238:	2030      	movs	r0, #48	@ 0x30
 800023a:	f000 f84d 	bl	80002d8 <LCD_command>
	delayMs(10);
 800023e:	200a      	movs	r0, #10
 8000240:	f000 f896 	bl	8000370 <delayMs>
	LCD_command(0x30);
 8000244:	2030      	movs	r0, #48	@ 0x30
 8000246:	f000 f847 	bl	80002d8 <LCD_command>
	delayMs(1);
 800024a:	2001      	movs	r0, #1
 800024c:	f000 f890 	bl	8000370 <delayMs>
	LCD_command(0x30);
 8000250:	2030      	movs	r0, #48	@ 0x30
 8000252:	f000 f841 	bl	80002d8 <LCD_command>
	LCD_command(0x38);		/*set 8-bit data, 2-line, 5x7 font */
 8000256:	2038      	movs	r0, #56	@ 0x38
 8000258:	f000 f83e 	bl	80002d8 <LCD_command>
	LCD_command(0x06);		/*move cursor right after each char */
 800025c:	2006      	movs	r0, #6
 800025e:	f000 f83b 	bl	80002d8 <LCD_command>
	LCD_command(0x01);		/*clear screen, move cursor to home */
 8000262:	2001      	movs	r0, #1
 8000264:	f000 f838 	bl	80002d8 <LCD_command>
	LCD_command(0x0F);		/*turn on display, cursor blinking */
 8000268:	200f      	movs	r0, #15
 800026a:	f000 f835 	bl	80002d8 <LCD_command>


}
 800026e:	bf00      	nop
 8000270:	bd80      	pop	{r7, pc}
	...

08000274 <PORTS_init>:

void PORTS_init(void)
{
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x06; 			/* enable GPIOB/C clock */
 8000278:	4b14      	ldr	r3, [pc, #80]	@ (80002cc <PORTS_init+0x58>)
 800027a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800027c:	4a13      	ldr	r2, [pc, #76]	@ (80002cc <PORTS_init+0x58>)
 800027e:	f043 0306 	orr.w	r3, r3, #6
 8000282:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOB->MODER &= ~0x0000FC00; 		/* clear pin mode */
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <PORTS_init+0x5c>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a11      	ldr	r2, [pc, #68]	@ (80002d0 <PORTS_init+0x5c>)
 800028a:	f423 437c 	bic.w	r3, r3, #64512	@ 0xfc00
 800028e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= 0x00005400; 		/* set pin output mode */
 8000290:	4b0f      	ldr	r3, [pc, #60]	@ (80002d0 <PORTS_init+0x5c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0e      	ldr	r2, [pc, #56]	@ (80002d0 <PORTS_init+0x5c>)
 8000296:	f443 43a8 	orr.w	r3, r3, #21504	@ 0x5400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOB->BSRR = 0x00C00000; 		/*turn off EN and R/W */
 800029c:	4b0c      	ldr	r3, [pc, #48]	@ (80002d0 <PORTS_init+0x5c>)
 800029e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 80002a2:	619a      	str	r2, [r3, #24]


	GPIOC->MODER &= ~0x0000FFFF; 		/* clear pin mode */
 80002a4:	4b0b      	ldr	r3, [pc, #44]	@ (80002d4 <PORTS_init+0x60>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0a      	ldr	r2, [pc, #40]	@ (80002d4 <PORTS_init+0x60>)
 80002aa:	0c1b      	lsrs	r3, r3, #16
 80002ac:	041b      	lsls	r3, r3, #16
 80002ae:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0x00005555; 		/* set pin output mode */
 80002b0:	4b08      	ldr	r3, [pc, #32]	@ (80002d4 <PORTS_init+0x60>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a07      	ldr	r2, [pc, #28]	@ (80002d4 <PORTS_init+0x60>)
 80002b6:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 80002ba:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002be:	6013      	str	r3, [r2, #0]
}
 80002c0:	bf00      	nop
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40023800 	.word	0x40023800
 80002d0:	40020400 	.word	0x40020400
 80002d4:	40020800 	.word	0x40020800

080002d8 <LCD_command>:

void LCD_command(unsigned char command)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]

	GPIOB->BSRR = (RS | RW) << 16; 		/* RS = 0, R/W = 0 */
 80002e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000320 <LCD_command+0x48>)
 80002e4:	f44f 02c0 	mov.w	r2, #6291456	@ 0x600000
 80002e8:	619a      	str	r2, [r3, #24]
	GPIOC->ODR =command; 				/* put command on data bus */
 80002ea:	4a0e      	ldr	r2, [pc, #56]	@ (8000324 <LCD_command+0x4c>)
 80002ec:	79fb      	ldrb	r3, [r7, #7]
 80002ee:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 				/* pulse E high */
 80002f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <LCD_command+0x48>)
 80002f2:	2280      	movs	r2, #128	@ 0x80
 80002f4:	619a      	str	r2, [r3, #24]
	delayMs(0);
 80002f6:	2000      	movs	r0, #0
 80002f8:	f000 f83a 	bl	8000370 <delayMs>
	GPIOB->BSRR = EN << 16; 			/* clear E */
 80002fc:	4b08      	ldr	r3, [pc, #32]	@ (8000320 <LCD_command+0x48>)
 80002fe:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000302:	619a      	str	r2, [r3, #24]
	if (command < 4)
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	2b03      	cmp	r3, #3
 8000308:	d803      	bhi.n	8000312 <LCD_command+0x3a>
		delayMs(2); 				/* command 1 and 2 needs up to 1.64ms */
 800030a:	2002      	movs	r0, #2
 800030c:	f000 f830 	bl	8000370 <delayMs>
	else
		delayMs(1); 				/* all others 40 us */
}
 8000310:	e002      	b.n	8000318 <LCD_command+0x40>
		delayMs(1); 				/* all others 40 us */
 8000312:	2001      	movs	r0, #1
 8000314:	f000 f82c 	bl	8000370 <delayMs>
}
 8000318:	bf00      	nop
 800031a:	3708      	adds	r7, #8
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40020400 	.word	0x40020400
 8000324:	40020800 	.word	0x40020800

08000328 <LCD_data>:

void LCD_data(char data)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	GPIOB->BSRR = RS; 			/* RS = 1 */
 8000332:	4b0d      	ldr	r3, [pc, #52]	@ (8000368 <LCD_data+0x40>)
 8000334:	2220      	movs	r2, #32
 8000336:	619a      	str	r2, [r3, #24]
	GPIOB->BSRR = RW << 16; 		/* R/W = 0 */
 8000338:	4b0b      	ldr	r3, [pc, #44]	@ (8000368 <LCD_data+0x40>)
 800033a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800033e:	619a      	str	r2, [r3, #24]
	delayMs(1);
 8000340:	2001      	movs	r0, #1
 8000342:	f000 f815 	bl	8000370 <delayMs>

	GPIOC->ODR = data; 			/* put data on data bus */
 8000346:	4a09      	ldr	r2, [pc, #36]	@ (800036c <LCD_data+0x44>)
 8000348:	79fb      	ldrb	r3, [r7, #7]
 800034a:	6153      	str	r3, [r2, #20]
	GPIOB->BSRR = EN; 			/*pulse E high */ delayMs(0);
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <LCD_data+0x40>)
 800034e:	2280      	movs	r2, #128	@ 0x80
 8000350:	619a      	str	r2, [r3, #24]
 8000352:	2000      	movs	r0, #0
 8000354:	f000 f80c 	bl	8000370 <delayMs>
	GPIOB->BSRR = EN << 16; 		/* clear E */
 8000358:	4b03      	ldr	r3, [pc, #12]	@ (8000368 <LCD_data+0x40>)
 800035a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800035e:	619a      	str	r2, [r3, #24]

}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}
 8000368:	40020400 	.word	0x40020400
 800036c:	40020800 	.word	0x40020800

08000370 <delayMs>:


/* delay n milliseconds (16 MHz CPU clock) */

void delayMs(int n)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	int i;
	for (; n > 0; n--)
 8000378:	e00d      	b.n	8000396 <delayMs+0x26>
		for (i = 0; i < 3195; i++) ;
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e002      	b.n	8000386 <delayMs+0x16>
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	3301      	adds	r3, #1
 8000384:	60fb      	str	r3, [r7, #12]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	f640 427a 	movw	r2, #3194	@ 0xc7a
 800038c:	4293      	cmp	r3, r2
 800038e:	ddf7      	ble.n	8000380 <delayMs+0x10>
	for (; n > 0; n--)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	3b01      	subs	r3, #1
 8000394:	607b      	str	r3, [r7, #4]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	2b00      	cmp	r3, #0
 800039a:	dcee      	bgt.n	800037a <delayMs+0xa>
}
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	3714      	adds	r7, #20
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr

080003aa <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003ae:	bf00      	nop
 80003b0:	e7fd      	b.n	80003ae <NMI_Handler+0x4>

080003b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003b2:	b480      	push	{r7}
 80003b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003b6:	bf00      	nop
 80003b8:	e7fd      	b.n	80003b6 <HardFault_Handler+0x4>

080003ba <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003ba:	b480      	push	{r7}
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003be:	bf00      	nop
 80003c0:	e7fd      	b.n	80003be <MemManage_Handler+0x4>

080003c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003c2:	b480      	push	{r7}
 80003c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003c6:	bf00      	nop
 80003c8:	e7fd      	b.n	80003c6 <BusFault_Handler+0x4>

080003ca <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ca:	b480      	push	{r7}
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ce:	bf00      	nop
 80003d0:	e7fd      	b.n	80003ce <UsageFault_Handler+0x4>

080003d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003d6:	bf00      	nop
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003e4:	bf00      	nop
 80003e6:	46bd      	mov	sp, r7
 80003e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ec:	4770      	bx	lr

080003ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003f2:	bf00      	nop
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000400:	f000 f83e 	bl	8000480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000404:	bf00      	nop
 8000406:	bd80      	pop	{r7, pc}

08000408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <SystemInit+0x20>)
 800040e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000412:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <SystemInit+0x20>)
 8000414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000ed00 	.word	0xe000ed00

0800042c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800042c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000464 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000430:	f7ff ffea 	bl	8000408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000434:	480c      	ldr	r0, [pc, #48]	@ (8000468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000436:	490d      	ldr	r1, [pc, #52]	@ (800046c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000438:	4a0d      	ldr	r2, [pc, #52]	@ (8000470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800043a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800043c:	e002      	b.n	8000444 <LoopCopyDataInit>

0800043e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800043e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000442:	3304      	adds	r3, #4

08000444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000448:	d3f9      	bcc.n	800043e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044a:	4a0a      	ldr	r2, [pc, #40]	@ (8000474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800044c:	4c0a      	ldr	r4, [pc, #40]	@ (8000478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000450:	e001      	b.n	8000456 <LoopFillZerobss>

08000452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000454:	3204      	adds	r2, #4

08000456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000458:	d3fb      	bcc.n	8000452 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800045a:	f000 f825 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800045e:	f7ff fed1 	bl	8000204 <main>
  bx  lr    
 8000462:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800046c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000470:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 8000474:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000478:	20000024 	.word	0x20000024

0800047c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800047c:	e7fe      	b.n	800047c <ADC_IRQHandler>
	...

08000480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000484:	4b06      	ldr	r3, [pc, #24]	@ (80004a0 <HAL_IncTick+0x20>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	461a      	mov	r2, r3
 800048a:	4b06      	ldr	r3, [pc, #24]	@ (80004a4 <HAL_IncTick+0x24>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4413      	add	r3, r2
 8000490:	4a04      	ldr	r2, [pc, #16]	@ (80004a4 <HAL_IncTick+0x24>)
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000000 	.word	0x20000000
 80004a4:	20000020 	.word	0x20000020

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4d0d      	ldr	r5, [pc, #52]	@ (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	@ (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2600      	movs	r6, #0
 80004b4:	42a6      	cmp	r6, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4d0b      	ldr	r5, [pc, #44]	@ (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	@ (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2600      	movs	r6, #0
 80004c6:	42a6      	cmp	r6, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80004d0:	4798      	blx	r3
 80004d2:	3601      	adds	r6, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004da:	4798      	blx	r3
 80004dc:	3601      	adds	r6, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
