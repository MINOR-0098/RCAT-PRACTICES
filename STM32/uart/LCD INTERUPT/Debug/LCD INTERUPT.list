
LCD INTERUPT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c48  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e0c  08002e0c  00003e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e24  08002e24  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e2c  08002e2c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e2c  08002e2c  00003e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e30  08002e30  00003e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e34  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  2000000c  08002e40  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000084  08002e40  00004084  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d17  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000185e  00000000  00000000  0000cd53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000760  00000000  00000000  0000e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a5  00000000  00000000  0000ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002037d  00000000  00000000  0000f2bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cca  00000000  00000000  0002f63a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4c06  00000000  00000000  00039304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fdf0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d3c  00000000  00000000  000fdf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ffc8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002df4 	.word	0x08002df4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08002df4 	.word	0x08002df4

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_command>:

/* USER CODE END PFP */
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LCD_command(unsigned char command)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
	/* RS = 0, R/W = 0 */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // drive R/W LOW
 80004fe:	2200      	movs	r2, #0
 8000500:	2140      	movs	r1, #64	@ 0x40
 8000502:	4819      	ldr	r0, [pc, #100]	@ (8000568 <LCD_command+0x74>)
 8000504:	f000 fed4 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET); // drive RS LOW
 8000508:	2200      	movs	r2, #0
 800050a:	2120      	movs	r1, #32
 800050c:	4816      	ldr	r0, [pc, #88]	@ (8000568 <LCD_command+0x74>)
 800050e:	f000 fecf 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000512:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000516:	f000 fb6f 	bl	8000bf8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, 0xFF, GPIO_PIN_RESET); // Clear previous data
 800051a:	2200      	movs	r2, #0
 800051c:	21ff      	movs	r1, #255	@ 0xff
 800051e:	4813      	ldr	r0, [pc, #76]	@ (800056c <LCD_command+0x78>)
 8000520:	f000 fec6 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, command, GPIO_PIN_SET); // Put command on data bus
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	b29b      	uxth	r3, r3
 8000528:	2201      	movs	r2, #1
 800052a:	4619      	mov	r1, r3
 800052c:	480f      	ldr	r0, [pc, #60]	@ (800056c <LCD_command+0x78>)
 800052e:	f000 febf 	bl	80012b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	/* pulse E high */
 8000532:	2201      	movs	r2, #1
 8000534:	2180      	movs	r1, #128	@ 0x80
 8000536:	480c      	ldr	r0, [pc, #48]	@ (8000568 <LCD_command+0x74>)
 8000538:	f000 feba 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_Delay(0);
 800053c:	2000      	movs	r0, #0
 800053e:	f000 fb5b 	bl	8000bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);/* clear E */
 8000542:	2200      	movs	r2, #0
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <LCD_command+0x74>)
 8000548:	f000 feb2 	bl	80012b0 <HAL_GPIO_WritePin>

	if (command < 4)
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	2b03      	cmp	r3, #3
 8000550:	d803      	bhi.n	800055a <LCD_command+0x66>
		HAL_Delay(2); 				/* command 1 and 2 needs up to 1.64ms */
 8000552:	2002      	movs	r0, #2
 8000554:	f000 fb50 	bl	8000bf8 <HAL_Delay>
	else
		HAL_Delay(1);
}	// Step 3
 8000558:	e002      	b.n	8000560 <LCD_command+0x6c>
		HAL_Delay(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f000 fb4c 	bl	8000bf8 <HAL_Delay>
}	// Step 3
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40020400 	.word	0x40020400
 800056c:	40020800 	.word	0x40020800

08000570 <LCD_data>:

void LCD_data(char data)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); // drive R/W LOW
 800057a:	2200      	movs	r2, #0
 800057c:	2140      	movs	r1, #64	@ 0x40
 800057e:	4814      	ldr	r0, [pc, #80]	@ (80005d0 <LCD_data+0x60>)
 8000580:	f000 fe96 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET); // drive RS HIGH
 8000584:	2201      	movs	r2, #1
 8000586:	2120      	movs	r1, #32
 8000588:	4811      	ldr	r0, [pc, #68]	@ (80005d0 <LCD_data+0x60>)
 800058a:	f000 fe91 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f000 fb32 	bl	8000bf8 <HAL_Delay>

	HAL_GPIO_WritePin(GPIOC, 0xFF, GPIO_PIN_RESET); // Clear previous data
 8000594:	2200      	movs	r2, #0
 8000596:	21ff      	movs	r1, #255	@ 0xff
 8000598:	480e      	ldr	r0, [pc, #56]	@ (80005d4 <LCD_data+0x64>)
 800059a:	f000 fe89 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, data, GPIO_PIN_SET); // Put command on data bus
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	2201      	movs	r2, #1
 80005a4:	4619      	mov	r1, r3
 80005a6:	480b      	ldr	r0, [pc, #44]	@ (80005d4 <LCD_data+0x64>)
 80005a8:	f000 fe82 	bl	80012b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);	/* pulse E high */
 80005ac:	2201      	movs	r2, #1
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	4807      	ldr	r0, [pc, #28]	@ (80005d0 <LCD_data+0x60>)
 80005b2:	f000 fe7d 	bl	80012b0 <HAL_GPIO_WritePin>
	HAL_Delay(0);
 80005b6:	2000      	movs	r0, #0
 80005b8:	f000 fb1e 	bl	8000bf8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);/* clear E */
 80005bc:	2200      	movs	r2, #0
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <LCD_data+0x60>)
 80005c2:	f000 fe75 	bl	80012b0 <HAL_GPIO_WritePin>
}
 80005c6:	bf00      	nop
 80005c8:	3708      	adds	r7, #8
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800

080005d8 <LCD_init>:

void LCD_init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
		LCD_command(0x30);
 80005dc:	2030      	movs	r0, #48	@ 0x30
 80005de:	f7ff ff89 	bl	80004f4 <LCD_command>
		HAL_Delay(100);
 80005e2:	2064      	movs	r0, #100	@ 0x64
 80005e4:	f000 fb08 	bl	8000bf8 <HAL_Delay>
		LCD_command(0x38);		/*set 8-bit data, 2-line, 5x7 font */
 80005e8:	2038      	movs	r0, #56	@ 0x38
 80005ea:	f7ff ff83 	bl	80004f4 <LCD_command>
		LCD_command(0x06);		/*move cursor right after each char */
 80005ee:	2006      	movs	r0, #6
 80005f0:	f7ff ff80 	bl	80004f4 <LCD_command>
		LCD_command(0x01);		/*clear screen, move cursor to home */
 80005f4:	2001      	movs	r0, #1
 80005f6:	f7ff ff7d 	bl	80004f4 <LCD_command>
		LCD_command(0x0F);		/*turn on display, cursor blinking */
 80005fa:	200f      	movs	r0, #15
 80005fc:	f7ff ff7a 	bl	80004f4 <LCD_command>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <LCD_string>:
char buff[16];
void LCD_string(char str[])
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<16;i++)
 800060c:	2300      	movs	r3, #0
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	e020      	b.n	8000654 <LCD_string+0x50>
	{
		if((str[i]!=NULL)&&(str[i]!='\n')&&(str[i]!='\r'))
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d012      	beq.n	8000644 <LCD_string+0x40>
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	687a      	ldr	r2, [r7, #4]
 8000622:	4413      	add	r3, r2
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0a      	cmp	r3, #10
 8000628:	d00c      	beq.n	8000644 <LCD_string+0x40>
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	687a      	ldr	r2, [r7, #4]
 800062e:	4413      	add	r3, r2
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b0d      	cmp	r3, #13
 8000634:	d006      	beq.n	8000644 <LCD_string+0x40>
		{
	    LCD_data(str[i]);
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	4413      	add	r3, r2
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff ff96 	bl	8000570 <LCD_data>
		}
	    buff[i] = NULL;
 8000644:	4a07      	ldr	r2, [pc, #28]	@ (8000664 <LCD_string+0x60>)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<16;i++)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	3301      	adds	r3, #1
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	2b0f      	cmp	r3, #15
 8000658:	dddb      	ble.n	8000612 <LCD_string+0xe>
	}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3710      	adds	r7, #16
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000070 	.word	0x20000070

08000668 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, buff, 15);
 8000670:	220f      	movs	r2, #15
 8000672:	4904      	ldr	r1, [pc, #16]	@ (8000684 <HAL_UART_RxCpltCallback+0x1c>)
 8000674:	4804      	ldr	r0, [pc, #16]	@ (8000688 <HAL_UART_RxCpltCallback+0x20>)
 8000676:	f001 fc6d 	bl	8001f54 <HAL_UART_Receive_IT>


}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000070 	.word	0x20000070
 8000688:	20000028 	.word	0x20000028

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fa40 	bl	8000b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f81c 	bl	80006d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f8b2 	bl	8000800 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800069c:	f000 f886 	bl	80007ac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, buff, 15);
 80006a0:	220f      	movs	r2, #15
 80006a2:	4909      	ldr	r1, [pc, #36]	@ (80006c8 <main+0x3c>)
 80006a4:	4809      	ldr	r0, [pc, #36]	@ (80006cc <main+0x40>)
 80006a6:	f001 fc55 	bl	8001f54 <HAL_UART_Receive_IT>
  LCD_init();
 80006aa:	f7ff ff95 	bl	80005d8 <LCD_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LCD_command(1);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff20 	bl	80004f4 <LCD_command>
	  LCD_string(buff);
 80006b4:	4804      	ldr	r0, [pc, #16]	@ (80006c8 <main+0x3c>)
 80006b6:	f7ff ffa5 	bl	8000604 <LCD_string>
	  HAL_Delay(2000);
 80006ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006be:	f000 fa9b 	bl	8000bf8 <HAL_Delay>
	  LCD_command(1);
 80006c2:	bf00      	nop
 80006c4:	e7f3      	b.n	80006ae <main+0x22>
 80006c6:	bf00      	nop
 80006c8:	20000070 	.word	0x20000070
 80006cc:	20000028 	.word	0x20000028

080006d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b094      	sub	sp, #80	@ 0x50
 80006d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	2234      	movs	r2, #52	@ 0x34
 80006dc:	2100      	movs	r1, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f002 fb5c 	bl	8002d9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e4:	f107 0308 	add.w	r3, r7, #8
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	605a      	str	r2, [r3, #4]
 80006ee:	609a      	str	r2, [r3, #8]
 80006f0:	60da      	str	r2, [r3, #12]
 80006f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemClock_Config+0xd4>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	4a29      	ldr	r2, [pc, #164]	@ (80007a4 <SystemClock_Config+0xd4>)
 80006fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000702:	6413      	str	r3, [r2, #64]	@ 0x40
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemClock_Config+0xd4>)
 8000706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000708:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000710:	2300      	movs	r3, #0
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	4b24      	ldr	r3, [pc, #144]	@ (80007a8 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800071c:	4a22      	ldr	r2, [pc, #136]	@ (80007a8 <SystemClock_Config+0xd8>)
 800071e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <SystemClock_Config+0xd8>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800072c:	603b      	str	r3, [r7, #0]
 800072e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000730:	2302      	movs	r3, #2
 8000732:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000734:	2301      	movs	r3, #1
 8000736:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000738:	2310      	movs	r3, #16
 800073a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073c:	2302      	movs	r3, #2
 800073e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000744:	2310      	movs	r3, #16
 8000746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000748:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800074c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800074e:	2304      	movs	r3, #4
 8000750:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000752:	2302      	movs	r3, #2
 8000754:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	4618      	mov	r0, r3
 8000760:	f001 f90a 	bl	8001978 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800076a:	f000 f8df 	bl	800092c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	230f      	movs	r3, #15
 8000770:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2302      	movs	r3, #2
 8000774:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2102      	movs	r1, #2
 800078a:	4618      	mov	r0, r3
 800078c:	f000 fdaa 	bl	80012e4 <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000796:	f000 f8c9 	bl	800092c <Error_Handler>
  }
}
 800079a:	bf00      	nop
 800079c:	3750      	adds	r7, #80	@ 0x50
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800
 80007a8:	40007000 	.word	0x40007000

080007ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b2:	4a12      	ldr	r2, [pc, #72]	@ (80007fc <MX_USART2_UART_Init+0x50>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b10      	ldr	r3, [pc, #64]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b0e      	ldr	r3, [pc, #56]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_USART2_UART_Init+0x4c>)
 80007e4:	f001 fb66 	bl	8001eb4 <HAL_UART_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ee:	f000 f89d 	bl	800092c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000028 	.word	0x20000028
 80007fc:	40004400 	.word	0x40004400

08000800 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	@ 0x28
 8000804:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
 8000814:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
 800081a:	4b40      	ldr	r3, [pc, #256]	@ (800091c <MX_GPIO_Init+0x11c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a3f      	ldr	r2, [pc, #252]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b3d      	ldr	r3, [pc, #244]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	613b      	str	r3, [r7, #16]
 8000830:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
 8000836:	4b39      	ldr	r3, [pc, #228]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a38      	ldr	r2, [pc, #224]	@ (800091c <MX_GPIO_Init+0x11c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b36      	ldr	r3, [pc, #216]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	4b32      	ldr	r3, [pc, #200]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a31      	ldr	r2, [pc, #196]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b2f      	ldr	r3, [pc, #188]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	607b      	str	r3, [r7, #4]
 800086e:	4b2b      	ldr	r3, [pc, #172]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a2a      	ldr	r2, [pc, #168]	@ (800091c <MX_GPIO_Init+0x11c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b28      	ldr	r3, [pc, #160]	@ (800091c <MX_GPIO_Init+0x11c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000886:	2200      	movs	r2, #0
 8000888:	21ff      	movs	r1, #255	@ 0xff
 800088a:	4825      	ldr	r0, [pc, #148]	@ (8000920 <MX_GPIO_Init+0x120>)
 800088c:	f000 fd10 	bl	80012b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2120      	movs	r1, #32
 8000894:	4823      	ldr	r0, [pc, #140]	@ (8000924 <MX_GPIO_Init+0x124>)
 8000896:	f000 fd0b 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	21e0      	movs	r1, #224	@ 0xe0
 800089e:	4822      	ldr	r0, [pc, #136]	@ (8000928 <MX_GPIO_Init+0x128>)
 80008a0:	f000 fd06 	bl	80012b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008aa:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	4619      	mov	r1, r3
 80008ba:	4819      	ldr	r0, [pc, #100]	@ (8000920 <MX_GPIO_Init+0x120>)
 80008bc:	f000 fb64 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	2300      	movs	r3, #0
 80008ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	4812      	ldr	r0, [pc, #72]	@ (8000920 <MX_GPIO_Init+0x120>)
 80008d8:	f000 fb56 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	480c      	ldr	r0, [pc, #48]	@ (8000924 <MX_GPIO_Init+0x124>)
 80008f4:	f000 fb48 	bl	8000f88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80008f8:	23e0      	movs	r3, #224	@ 0xe0
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	4806      	ldr	r0, [pc, #24]	@ (8000928 <MX_GPIO_Init+0x128>)
 8000910:	f000 fb3a 	bl	8000f88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000914:	bf00      	nop
 8000916:	3728      	adds	r7, #40	@ 0x28
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40023800 	.word	0x40023800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020000 	.word	0x40020000
 8000928:	40020400 	.word	0x40020400

0800092c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000930:	b672      	cpsid	i
}
 8000932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000934:	bf00      	nop
 8000936:	e7fd      	b.n	8000934 <Error_Handler+0x8>

08000938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b10      	ldr	r3, [pc, #64]	@ (8000984 <HAL_MspInit+0x4c>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000946:	4a0f      	ldr	r2, [pc, #60]	@ (8000984 <HAL_MspInit+0x4c>)
 8000948:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800094c:	6453      	str	r3, [r2, #68]	@ 0x44
 800094e:	4b0d      	ldr	r3, [pc, #52]	@ (8000984 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	@ 0x40
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000976:	2007      	movs	r0, #7
 8000978:	f000 fa32 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40023800 	.word	0x40023800

08000988 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08a      	sub	sp, #40	@ 0x28
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a1d      	ldr	r2, [pc, #116]	@ (8000a1c <HAL_UART_MspInit+0x94>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d133      	bne.n	8000a12 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
 80009ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ba:	4b19      	ldr	r3, [pc, #100]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d6:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_UART_MspInit+0x98>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009e2:	230c      	movs	r3, #12
 80009e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ee:	2303      	movs	r3, #3
 80009f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009f2:	2307      	movs	r3, #7
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4809      	ldr	r0, [pc, #36]	@ (8000a24 <HAL_UART_MspInit+0x9c>)
 80009fe:	f000 fac3 	bl	8000f88 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a02:	2200      	movs	r2, #0
 8000a04:	2100      	movs	r1, #0
 8000a06:	2026      	movs	r0, #38	@ 0x26
 8000a08:	f000 f9f5 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a0c:	2026      	movs	r0, #38	@ 0x26
 8000a0e:	f000 fa0e 	bl	8000e2e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	@ 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020000 	.word	0x40020000

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <NMI_Handler+0x4>

08000a30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <MemManage_Handler+0x4>

08000a40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <BusFault_Handler+0x4>

08000a48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a78:	4770      	bx	lr

08000a7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7e:	f000 f89b 	bl	8000bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a8c:	4802      	ldr	r0, [pc, #8]	@ (8000a98 <USART2_IRQHandler+0x10>)
 8000a8e:	f001 fa87 	bl	8001fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000028 	.word	0x20000028

08000a9c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa0:	4b06      	ldr	r3, [pc, #24]	@ (8000abc <SystemInit+0x20>)
 8000aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aa6:	4a05      	ldr	r2, [pc, #20]	@ (8000abc <SystemInit+0x20>)
 8000aa8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000af8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ac4:	f7ff ffea 	bl	8000a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac8:	480c      	ldr	r0, [pc, #48]	@ (8000afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aca:	490d      	ldr	r1, [pc, #52]	@ (8000b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000acc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad0:	e002      	b.n	8000ad8 <LoopCopyDataInit>

08000ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad6:	3304      	adds	r3, #4

08000ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000adc:	d3f9      	bcc.n	8000ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8000b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae4:	e001      	b.n	8000aea <LoopFillZerobss>

08000ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae8:	3204      	adds	r2, #4

08000aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aec:	d3fb      	bcc.n	8000ae6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 f95d 	bl	8002dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fdcb 	bl	800068c <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	08002e34 	.word	0x08002e34
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	20000084 	.word	0x20000084

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>
	...

08000b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b18:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b54 <HAL_Init+0x40>)
 8000b1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b24:	4b0b      	ldr	r3, [pc, #44]	@ (8000b54 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0a      	ldr	r2, [pc, #40]	@ (8000b54 <HAL_Init+0x40>)
 8000b2a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <HAL_Init+0x40>)
 8000b36:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b3c:	2003      	movs	r0, #3
 8000b3e:	f000 f94f 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f808 	bl	8000b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b48:	f7ff fef6 	bl	8000938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023c00 	.word	0x40023c00

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b60:	4b12      	ldr	r3, [pc, #72]	@ (8000bac <HAL_InitTick+0x54>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b12      	ldr	r3, [pc, #72]	@ (8000bb0 <HAL_InitTick+0x58>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b76:	4618      	mov	r0, r3
 8000b78:	f000 f967 	bl	8000e4a <HAL_SYSTICK_Config>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e00e      	b.n	8000ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d80a      	bhi.n	8000ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	f04f 30ff 	mov.w	r0, #4294967295
 8000b94:	f000 f92f 	bl	8000df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b98:	4a06      	ldr	r2, [pc, #24]	@ (8000bb4 <HAL_InitTick+0x5c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	e000      	b.n	8000ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000008 	.word	0x20000008
 8000bb4:	20000004 	.word	0x20000004

08000bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <HAL_IncTick+0x20>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <HAL_IncTick+0x24>)
 8000bca:	6013      	str	r3, [r2, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000080 	.word	0x20000080

08000be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return uwTick;
 8000be4:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <HAL_GetTick+0x14>)
 8000be6:	681b      	ldr	r3, [r3, #0]
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	20000080 	.word	0x20000080

08000bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c00:	f7ff ffee 	bl	8000be0 <HAL_GetTick>
 8000c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c10:	d005      	beq.n	8000c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_Delay+0x44>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c1e:	bf00      	nop
 8000c20:	f7ff ffde 	bl	8000be0 <HAL_GetTick>
 8000c24:	4602      	mov	r2, r0
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d8f7      	bhi.n	8000c20 <HAL_Delay+0x28>
  {
  }
}
 8000c30:	bf00      	nop
 8000c32:	bf00      	nop
 8000c34:	3710      	adds	r7, #16
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000008 	.word	0x20000008

08000c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c50:	4b0c      	ldr	r3, [pc, #48]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c56:	68ba      	ldr	r2, [r7, #8]
 8000c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <__NVIC_SetPriorityGrouping+0x44>)
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	60d3      	str	r3, [r2, #12]
}
 8000c78:	bf00      	nop
 8000c7a:	3714      	adds	r7, #20
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	e000ed00 	.word	0xe000ed00

08000c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	f003 0307 	and.w	r3, r3, #7
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	4603      	mov	r3, r0
 8000cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	db0b      	blt.n	8000cce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	f003 021f 	and.w	r2, r3, #31
 8000cbc:	4907      	ldr	r1, [pc, #28]	@ (8000cdc <__NVIC_EnableIRQ+0x38>)
 8000cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc2:	095b      	lsrs	r3, r3, #5
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	@ (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	@ (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	@ 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	@ 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
	...

08000d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b082      	sub	sp, #8
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dac:	d301      	bcc.n	8000db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dae:	2301      	movs	r3, #1
 8000db0:	e00f      	b.n	8000dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <SysTick_Config+0x40>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	3b01      	subs	r3, #1
 8000db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dba:	210f      	movs	r1, #15
 8000dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc0:	f7ff ff8e 	bl	8000ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc4:	4b05      	ldr	r3, [pc, #20]	@ (8000ddc <SysTick_Config+0x40>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dca:	4b04      	ldr	r3, [pc, #16]	@ (8000ddc <SysTick_Config+0x40>)
 8000dcc:	2207      	movs	r2, #7
 8000dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd0:	2300      	movs	r3, #0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	e000e010 	.word	0xe000e010

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff29 	bl	8000c40 <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff3e 	bl	8000c88 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ff8e 	bl	8000d34 <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff5d 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff31 	bl	8000ca4 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffa2 	bl	8000d9c <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff feb6 	bl	8000be0 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	2b02      	cmp	r3, #2
 8000e80:	d008      	beq.n	8000e94 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2280      	movs	r2, #128	@ 0x80
 8000e86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e052      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0216 	bic.w	r2, r2, #22
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	695a      	ldr	r2, [r3, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eb2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d103      	bne.n	8000ec4 <HAL_DMA_Abort+0x62>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d007      	beq.n	8000ed4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0208 	bic.w	r2, r2, #8
 8000ed2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f022 0201 	bic.w	r2, r2, #1
 8000ee2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ee4:	e013      	b.n	8000f0e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000ee6:	f7ff fe7b 	bl	8000be0 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d90c      	bls.n	8000f0e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2220      	movs	r2, #32
 8000ef8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2203      	movs	r2, #3
 8000efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e015      	b.n	8000f3a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d1e4      	bne.n	8000ee6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f20:	223f      	movs	r2, #63	@ 0x3f
 8000f22:	409a      	lsls	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f42:	b480      	push	{r7}
 8000f44:	b083      	sub	sp, #12
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d004      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2280      	movs	r2, #128	@ 0x80
 8000f5a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e00c      	b.n	8000f7a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2205      	movs	r2, #5
 8000f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
	...

08000f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b089      	sub	sp, #36	@ 0x24
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
 8000fa2:	e165      	b.n	8001270 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	f040 8154 	bne.w	800126a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d005      	beq.n	8000fda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d130      	bne.n	800103c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	68da      	ldr	r2, [r3, #12]
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	69ba      	ldr	r2, [r7, #24]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001010:	2201      	movs	r2, #1
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	091b      	lsrs	r3, r3, #4
 8001026:	f003 0201 	and.w	r2, r3, #1
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0303 	and.w	r3, r3, #3
 8001044:	2b03      	cmp	r3, #3
 8001046:	d017      	beq.n	8001078 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	2203      	movs	r2, #3
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	689a      	ldr	r2, [r3, #8]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	005b      	lsls	r3, r3, #1
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d123      	bne.n	80010cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	08da      	lsrs	r2, r3, #3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3208      	adds	r2, #8
 800108c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	220f      	movs	r2, #15
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	43db      	mvns	r3, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4013      	ands	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	691a      	ldr	r2, [r3, #16]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f003 0307 	and.w	r3, r3, #7
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	08da      	lsrs	r2, r3, #3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3208      	adds	r2, #8
 80010c6:	69b9      	ldr	r1, [r7, #24]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0203 	and.w	r2, r3, #3
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001108:	2b00      	cmp	r3, #0
 800110a:	f000 80ae 	beq.w	800126a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b5d      	ldr	r3, [pc, #372]	@ (8001288 <HAL_GPIO_Init+0x300>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001116:	4a5c      	ldr	r2, [pc, #368]	@ (8001288 <HAL_GPIO_Init+0x300>)
 8001118:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111c:	6453      	str	r3, [r2, #68]	@ 0x44
 800111e:	4b5a      	ldr	r3, [pc, #360]	@ (8001288 <HAL_GPIO_Init+0x300>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800112a:	4a58      	ldr	r2, [pc, #352]	@ (800128c <HAL_GPIO_Init+0x304>)
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	089b      	lsrs	r3, r3, #2
 8001130:	3302      	adds	r3, #2
 8001132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0303 	and.w	r3, r3, #3
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	220f      	movs	r2, #15
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4f      	ldr	r2, [pc, #316]	@ (8001290 <HAL_GPIO_Init+0x308>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d025      	beq.n	80011a2 <HAL_GPIO_Init+0x21a>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a4e      	ldr	r2, [pc, #312]	@ (8001294 <HAL_GPIO_Init+0x30c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d01f      	beq.n	800119e <HAL_GPIO_Init+0x216>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a4d      	ldr	r2, [pc, #308]	@ (8001298 <HAL_GPIO_Init+0x310>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d019      	beq.n	800119a <HAL_GPIO_Init+0x212>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4c      	ldr	r2, [pc, #304]	@ (800129c <HAL_GPIO_Init+0x314>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d013      	beq.n	8001196 <HAL_GPIO_Init+0x20e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4b      	ldr	r2, [pc, #300]	@ (80012a0 <HAL_GPIO_Init+0x318>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <HAL_GPIO_Init+0x20a>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4a      	ldr	r2, [pc, #296]	@ (80012a4 <HAL_GPIO_Init+0x31c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d007      	beq.n	800118e <HAL_GPIO_Init+0x206>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a49      	ldr	r2, [pc, #292]	@ (80012a8 <HAL_GPIO_Init+0x320>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d101      	bne.n	800118a <HAL_GPIO_Init+0x202>
 8001186:	2306      	movs	r3, #6
 8001188:	e00c      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800118a:	2307      	movs	r3, #7
 800118c:	e00a      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800118e:	2305      	movs	r3, #5
 8001190:	e008      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 8001192:	2304      	movs	r3, #4
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 8001196:	2303      	movs	r3, #3
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x21c>
 80011a2:	2300      	movs	r3, #0
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	f002 0203 	and.w	r2, r2, #3
 80011aa:	0092      	lsls	r2, r2, #2
 80011ac:	4093      	lsls	r3, r2
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b4:	4935      	ldr	r1, [pc, #212]	@ (800128c <HAL_GPIO_Init+0x304>)
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011c2:	4b3a      	ldr	r3, [pc, #232]	@ (80012ac <HAL_GPIO_Init+0x324>)
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e6:	4a31      	ldr	r2, [pc, #196]	@ (80012ac <HAL_GPIO_Init+0x324>)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011ec:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <HAL_GPIO_Init+0x324>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	4313      	orrs	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001210:	4a26      	ldr	r2, [pc, #152]	@ (80012ac <HAL_GPIO_Init+0x324>)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001216:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <HAL_GPIO_Init+0x324>)
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	43db      	mvns	r3, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4013      	ands	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001232:	69ba      	ldr	r2, [r7, #24]
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800123a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <HAL_GPIO_Init+0x324>)
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001240:	4b1a      	ldr	r3, [pc, #104]	@ (80012ac <HAL_GPIO_Init+0x324>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001264:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <HAL_GPIO_Init+0x324>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	2b0f      	cmp	r3, #15
 8001274:	f67f ae96 	bls.w	8000fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3724      	adds	r7, #36	@ 0x24
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40023800 	.word	0x40023800
 800128c:	40013800 	.word	0x40013800
 8001290:	40020000 	.word	0x40020000
 8001294:	40020400 	.word	0x40020400
 8001298:	40020800 	.word	0x40020800
 800129c:	40020c00 	.word	0x40020c00
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40021400 	.word	0x40021400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40013c00 	.word	0x40013c00

080012b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	460b      	mov	r3, r1
 80012ba:	807b      	strh	r3, [r7, #2]
 80012bc:	4613      	mov	r3, r2
 80012be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012c0:	787b      	ldrb	r3, [r7, #1]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012c6:	887a      	ldrh	r2, [r7, #2]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012cc:	e003      	b.n	80012d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	041a      	lsls	r2, r3, #16
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	619a      	str	r2, [r3, #24]
}
 80012d6:	bf00      	nop
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0cc      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f8:	4b68      	ldr	r3, [pc, #416]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 030f 	and.w	r3, r3, #15
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	d90c      	bls.n	8001320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001306:	4b65      	ldr	r3, [pc, #404]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	683a      	ldr	r2, [r7, #0]
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130e:	4b63      	ldr	r3, [pc, #396]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 030f 	and.w	r3, r3, #15
 8001316:	683a      	ldr	r2, [r7, #0]
 8001318:	429a      	cmp	r2, r3
 800131a:	d001      	beq.n	8001320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e0b8      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0302 	and.w	r3, r3, #2
 8001328:	2b00      	cmp	r3, #0
 800132a:	d020      	beq.n	800136e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0304 	and.w	r3, r3, #4
 8001334:	2b00      	cmp	r3, #0
 8001336:	d005      	beq.n	8001344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001338:	4b59      	ldr	r3, [pc, #356]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	4a58      	ldr	r2, [pc, #352]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001342:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001350:	4b53      	ldr	r3, [pc, #332]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	689b      	ldr	r3, [r3, #8]
 8001354:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800135a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800135c:	4b50      	ldr	r3, [pc, #320]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	494d      	ldr	r1, [pc, #308]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800136a:	4313      	orrs	r3, r2
 800136c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d044      	beq.n	8001404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d107      	bne.n	8001392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b47      	ldr	r3, [pc, #284]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d119      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e07f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d003      	beq.n	80013a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800139e:	2b03      	cmp	r3, #3
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a2:	4b3f      	ldr	r3, [pc, #252]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d109      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e06f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013b2:	4b3b      	ldr	r3, [pc, #236]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d101      	bne.n	80013c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e067      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c2:	4b37      	ldr	r3, [pc, #220]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	f023 0203 	bic.w	r2, r3, #3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4934      	ldr	r1, [pc, #208]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013d0:	4313      	orrs	r3, r2
 80013d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fc04 	bl	8000be0 <HAL_GetTick>
 80013d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013dc:	f7ff fc00 	bl	8000be0 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e04f      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	f003 020c 	and.w	r2, r3, #12
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	429a      	cmp	r2, r3
 8001402:	d1eb      	bne.n	80013dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001404:	4b25      	ldr	r3, [pc, #148]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 030f 	and.w	r3, r3, #15
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d20c      	bcs.n	800142c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001412:	4b22      	ldr	r3, [pc, #136]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	b2d2      	uxtb	r2, r2
 8001418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141a:	4b20      	ldr	r3, [pc, #128]	@ (800149c <HAL_RCC_ClockConfig+0x1b8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 030f 	and.w	r3, r3, #15
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	429a      	cmp	r2, r3
 8001426:	d001      	beq.n	800142c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e032      	b.n	8001492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	d008      	beq.n	800144a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001438:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	4916      	ldr	r1, [pc, #88]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	4313      	orrs	r3, r2
 8001448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f003 0308 	and.w	r3, r3, #8
 8001452:	2b00      	cmp	r3, #0
 8001454:	d009      	beq.n	800146a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001456:	4b12      	ldr	r3, [pc, #72]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	490e      	ldr	r1, [pc, #56]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001466:	4313      	orrs	r3, r2
 8001468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146a:	f000 f855 	bl	8001518 <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	490a      	ldr	r1, [pc, #40]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c0>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	fa22 f303 	lsr.w	r3, r2, r3
 8001482:	4a09      	ldr	r2, [pc, #36]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_RCC_ClockConfig+0x1c8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb64 	bl	8000b58 <HAL_InitTick>

  return HAL_OK;
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	40023c00 	.word	0x40023c00
 80014a0:	40023800 	.word	0x40023800
 80014a4:	08002e0c 	.word	0x08002e0c
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000004 	.word	0x20000004

080014b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014b4:	4b03      	ldr	r3, [pc, #12]	@ (80014c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80014b6:	681b      	ldr	r3, [r3, #0]
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000000 	.word	0x20000000

080014c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014cc:	f7ff fff0 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014d0:	4602      	mov	r2, r0
 80014d2:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	0a9b      	lsrs	r3, r3, #10
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	4903      	ldr	r1, [pc, #12]	@ (80014ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80014de:	5ccb      	ldrb	r3, [r1, r3]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40023800 	.word	0x40023800
 80014ec:	08002e1c 	.word	0x08002e1c

080014f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014f4:	f7ff ffdc 	bl	80014b0 <HAL_RCC_GetHCLKFreq>
 80014f8:	4602      	mov	r2, r0
 80014fa:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	0b5b      	lsrs	r3, r3, #13
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	4903      	ldr	r1, [pc, #12]	@ (8001514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001506:	5ccb      	ldrb	r3, [r1, r3]
 8001508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800150c:	4618      	mov	r0, r3
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40023800 	.word	0x40023800
 8001514:	08002e1c 	.word	0x08002e1c

08001518 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800151c:	b0ae      	sub	sp, #184	@ 0xb8
 800151e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800153e:	4bcb      	ldr	r3, [pc, #812]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b0c      	cmp	r3, #12
 8001548:	f200 8206 	bhi.w	8001958 <HAL_RCC_GetSysClockFreq+0x440>
 800154c:	a201      	add	r2, pc, #4	@ (adr r2, 8001554 <HAL_RCC_GetSysClockFreq+0x3c>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001589 	.word	0x08001589
 8001558:	08001959 	.word	0x08001959
 800155c:	08001959 	.word	0x08001959
 8001560:	08001959 	.word	0x08001959
 8001564:	08001591 	.word	0x08001591
 8001568:	08001959 	.word	0x08001959
 800156c:	08001959 	.word	0x08001959
 8001570:	08001959 	.word	0x08001959
 8001574:	08001599 	.word	0x08001599
 8001578:	08001959 	.word	0x08001959
 800157c:	08001959 	.word	0x08001959
 8001580:	08001959 	.word	0x08001959
 8001584:	08001789 	.word	0x08001789
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001588:	4bb9      	ldr	r3, [pc, #740]	@ (8001870 <HAL_RCC_GetSysClockFreq+0x358>)
 800158a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800158e:	e1e7      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001590:	4bb8      	ldr	r3, [pc, #736]	@ (8001874 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001592:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001596:	e1e3      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001598:	4bb4      	ldr	r3, [pc, #720]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015a4:	4bb1      	ldr	r3, [pc, #708]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d071      	beq.n	8001694 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b0:	4bae      	ldr	r3, [pc, #696]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	099b      	lsrs	r3, r3, #6
 80015b6:	2200      	movs	r2, #0
 80015b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80015bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80015c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80015c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80015d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015d6:	4622      	mov	r2, r4
 80015d8:	462b      	mov	r3, r5
 80015da:	f04f 0000 	mov.w	r0, #0
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	0159      	lsls	r1, r3, #5
 80015e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e8:	0150      	lsls	r0, r2, #5
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4621      	mov	r1, r4
 80015f0:	1a51      	subs	r1, r2, r1
 80015f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80015f4:	4629      	mov	r1, r5
 80015f6:	eb63 0301 	sbc.w	r3, r3, r1
 80015fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001608:	4649      	mov	r1, r9
 800160a:	018b      	lsls	r3, r1, #6
 800160c:	4641      	mov	r1, r8
 800160e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001612:	4641      	mov	r1, r8
 8001614:	018a      	lsls	r2, r1, #6
 8001616:	4641      	mov	r1, r8
 8001618:	1a51      	subs	r1, r2, r1
 800161a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800161c:	4649      	mov	r1, r9
 800161e:	eb63 0301 	sbc.w	r3, r3, r1
 8001622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001630:	4649      	mov	r1, r9
 8001632:	00cb      	lsls	r3, r1, #3
 8001634:	4641      	mov	r1, r8
 8001636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800163a:	4641      	mov	r1, r8
 800163c:	00ca      	lsls	r2, r1, #3
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	4603      	mov	r3, r0
 8001644:	4622      	mov	r2, r4
 8001646:	189b      	adds	r3, r3, r2
 8001648:	633b      	str	r3, [r7, #48]	@ 0x30
 800164a:	462b      	mov	r3, r5
 800164c:	460a      	mov	r2, r1
 800164e:	eb42 0303 	adc.w	r3, r2, r3
 8001652:	637b      	str	r3, [r7, #52]	@ 0x34
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001660:	4629      	mov	r1, r5
 8001662:	024b      	lsls	r3, r1, #9
 8001664:	4621      	mov	r1, r4
 8001666:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800166a:	4621      	mov	r1, r4
 800166c:	024a      	lsls	r2, r1, #9
 800166e:	4610      	mov	r0, r2
 8001670:	4619      	mov	r1, r3
 8001672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001676:	2200      	movs	r2, #0
 8001678:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800167c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001680:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001684:	f7fe fdbe 	bl	8000204 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001692:	e067      	b.n	8001764 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001694:	4b75      	ldr	r3, [pc, #468]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	2200      	movs	r2, #0
 800169c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80016a0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80016a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80016a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80016ae:	2300      	movs	r3, #0
 80016b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b6:	4622      	mov	r2, r4
 80016b8:	462b      	mov	r3, r5
 80016ba:	f04f 0000 	mov.w	r0, #0
 80016be:	f04f 0100 	mov.w	r1, #0
 80016c2:	0159      	lsls	r1, r3, #5
 80016c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016c8:	0150      	lsls	r0, r2, #5
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4621      	mov	r1, r4
 80016d0:	1a51      	subs	r1, r2, r1
 80016d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80016d4:	4629      	mov	r1, r5
 80016d6:	eb63 0301 	sbc.w	r3, r3, r1
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80016e8:	4649      	mov	r1, r9
 80016ea:	018b      	lsls	r3, r1, #6
 80016ec:	4641      	mov	r1, r8
 80016ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016f2:	4641      	mov	r1, r8
 80016f4:	018a      	lsls	r2, r1, #6
 80016f6:	4641      	mov	r1, r8
 80016f8:	ebb2 0a01 	subs.w	sl, r2, r1
 80016fc:	4649      	mov	r1, r9
 80016fe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800170e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001716:	4692      	mov	sl, r2
 8001718:	469b      	mov	fp, r3
 800171a:	4623      	mov	r3, r4
 800171c:	eb1a 0303 	adds.w	r3, sl, r3
 8001720:	623b      	str	r3, [r7, #32]
 8001722:	462b      	mov	r3, r5
 8001724:	eb4b 0303 	adc.w	r3, fp, r3
 8001728:	627b      	str	r3, [r7, #36]	@ 0x24
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	f04f 0300 	mov.w	r3, #0
 8001732:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001736:	4629      	mov	r1, r5
 8001738:	028b      	lsls	r3, r1, #10
 800173a:	4621      	mov	r1, r4
 800173c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001740:	4621      	mov	r1, r4
 8001742:	028a      	lsls	r2, r1, #10
 8001744:	4610      	mov	r0, r2
 8001746:	4619      	mov	r1, r3
 8001748:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800174c:	2200      	movs	r2, #0
 800174e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001750:	677a      	str	r2, [r7, #116]	@ 0x74
 8001752:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001756:	f7fe fd55 	bl	8000204 <__aeabi_uldivmod>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4613      	mov	r3, r2
 8001760:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001764:	4b41      	ldr	r3, [pc, #260]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	0c1b      	lsrs	r3, r3, #16
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	3301      	adds	r3, #1
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001776:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800177a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800177e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001782:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001786:	e0eb      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001788:	4b38      	ldr	r3, [pc, #224]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001790:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001794:	4b35      	ldr	r3, [pc, #212]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d06b      	beq.n	8001878 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a0:	4b32      	ldr	r3, [pc, #200]	@ (800186c <HAL_RCC_GetSysClockFreq+0x354>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	099b      	lsrs	r3, r3, #6
 80017a6:	2200      	movs	r2, #0
 80017a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017b2:	663b      	str	r3, [r7, #96]	@ 0x60
 80017b4:	2300      	movs	r3, #0
 80017b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80017b8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017bc:	4622      	mov	r2, r4
 80017be:	462b      	mov	r3, r5
 80017c0:	f04f 0000 	mov.w	r0, #0
 80017c4:	f04f 0100 	mov.w	r1, #0
 80017c8:	0159      	lsls	r1, r3, #5
 80017ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017ce:	0150      	lsls	r0, r2, #5
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4621      	mov	r1, r4
 80017d6:	1a51      	subs	r1, r2, r1
 80017d8:	61b9      	str	r1, [r7, #24]
 80017da:	4629      	mov	r1, r5
 80017dc:	eb63 0301 	sbc.w	r3, r3, r1
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	f04f 0200 	mov.w	r2, #0
 80017e6:	f04f 0300 	mov.w	r3, #0
 80017ea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80017ee:	4659      	mov	r1, fp
 80017f0:	018b      	lsls	r3, r1, #6
 80017f2:	4651      	mov	r1, sl
 80017f4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017f8:	4651      	mov	r1, sl
 80017fa:	018a      	lsls	r2, r1, #6
 80017fc:	4651      	mov	r1, sl
 80017fe:	ebb2 0801 	subs.w	r8, r2, r1
 8001802:	4659      	mov	r1, fp
 8001804:	eb63 0901 	sbc.w	r9, r3, r1
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001814:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001818:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800181c:	4690      	mov	r8, r2
 800181e:	4699      	mov	r9, r3
 8001820:	4623      	mov	r3, r4
 8001822:	eb18 0303 	adds.w	r3, r8, r3
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	462b      	mov	r3, r5
 800182a:	eb49 0303 	adc.w	r3, r9, r3
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	f04f 0300 	mov.w	r3, #0
 8001838:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800183c:	4629      	mov	r1, r5
 800183e:	024b      	lsls	r3, r1, #9
 8001840:	4621      	mov	r1, r4
 8001842:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001846:	4621      	mov	r1, r4
 8001848:	024a      	lsls	r2, r1, #9
 800184a:	4610      	mov	r0, r2
 800184c:	4619      	mov	r1, r3
 800184e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001852:	2200      	movs	r2, #0
 8001854:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001856:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001858:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800185c:	f7fe fcd2 	bl	8000204 <__aeabi_uldivmod>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4613      	mov	r3, r2
 8001866:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800186a:	e065      	b.n	8001938 <HAL_RCC_GetSysClockFreq+0x420>
 800186c:	40023800 	.word	0x40023800
 8001870:	00f42400 	.word	0x00f42400
 8001874:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001878:	4b3d      	ldr	r3, [pc, #244]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x458>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	099b      	lsrs	r3, r3, #6
 800187e:	2200      	movs	r2, #0
 8001880:	4618      	mov	r0, r3
 8001882:	4611      	mov	r1, r2
 8001884:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001888:	653b      	str	r3, [r7, #80]	@ 0x50
 800188a:	2300      	movs	r3, #0
 800188c:	657b      	str	r3, [r7, #84]	@ 0x54
 800188e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001892:	4642      	mov	r2, r8
 8001894:	464b      	mov	r3, r9
 8001896:	f04f 0000 	mov.w	r0, #0
 800189a:	f04f 0100 	mov.w	r1, #0
 800189e:	0159      	lsls	r1, r3, #5
 80018a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018a4:	0150      	lsls	r0, r2, #5
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4641      	mov	r1, r8
 80018ac:	1a51      	subs	r1, r2, r1
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	4649      	mov	r1, r9
 80018b2:	eb63 0301 	sbc.w	r3, r3, r1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80018c4:	4659      	mov	r1, fp
 80018c6:	018b      	lsls	r3, r1, #6
 80018c8:	4651      	mov	r1, sl
 80018ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ce:	4651      	mov	r1, sl
 80018d0:	018a      	lsls	r2, r1, #6
 80018d2:	4651      	mov	r1, sl
 80018d4:	1a54      	subs	r4, r2, r1
 80018d6:	4659      	mov	r1, fp
 80018d8:	eb63 0501 	sbc.w	r5, r3, r1
 80018dc:	f04f 0200 	mov.w	r2, #0
 80018e0:	f04f 0300 	mov.w	r3, #0
 80018e4:	00eb      	lsls	r3, r5, #3
 80018e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018ea:	00e2      	lsls	r2, r4, #3
 80018ec:	4614      	mov	r4, r2
 80018ee:	461d      	mov	r5, r3
 80018f0:	4643      	mov	r3, r8
 80018f2:	18e3      	adds	r3, r4, r3
 80018f4:	603b      	str	r3, [r7, #0]
 80018f6:	464b      	mov	r3, r9
 80018f8:	eb45 0303 	adc.w	r3, r5, r3
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	f04f 0300 	mov.w	r3, #0
 8001906:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190a:	4629      	mov	r1, r5
 800190c:	028b      	lsls	r3, r1, #10
 800190e:	4621      	mov	r1, r4
 8001910:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001914:	4621      	mov	r1, r4
 8001916:	028a      	lsls	r2, r1, #10
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001920:	2200      	movs	r2, #0
 8001922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001924:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001926:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800192a:	f7fe fc6b 	bl	8000204 <__aeabi_uldivmod>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4613      	mov	r3, r2
 8001934:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001938:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x458>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	0f1b      	lsrs	r3, r3, #28
 800193e:	f003 0307 	and.w	r3, r3, #7
 8001942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800194a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001956:	e003      	b.n	8001960 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001958:	4b06      	ldr	r3, [pc, #24]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x45c>)
 800195a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800195e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001960:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001964:	4618      	mov	r0, r3
 8001966:	37b8      	adds	r7, #184	@ 0xb8
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400

08001978 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e28d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8083 	beq.w	8001a9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001998:	4b94      	ldr	r3, [pc, #592]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d019      	beq.n	80019d8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019a4:	4b91      	ldr	r3, [pc, #580]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
        || \
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d106      	bne.n	80019be <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019b0:	4b8e      	ldr	r3, [pc, #568]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019bc:	d00c      	beq.n	80019d8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019be:	4b8b      	ldr	r3, [pc, #556]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80019c6:	2b0c      	cmp	r3, #12
 80019c8:	d112      	bne.n	80019f0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ca:	4b88      	ldr	r3, [pc, #544]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80019d6:	d10b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d8:	4b84      	ldr	r3, [pc, #528]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d05b      	beq.n	8001a9c <HAL_RCC_OscConfig+0x124>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d157      	bne.n	8001a9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e25a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x90>
 80019fa:	4b7c      	ldr	r3, [pc, #496]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a7b      	ldr	r2, [pc, #492]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a04:	6013      	str	r3, [r2, #0]
 8001a06:	e01d      	b.n	8001a44 <HAL_RCC_OscConfig+0xcc>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a10:	d10c      	bne.n	8001a2c <HAL_RCC_OscConfig+0xb4>
 8001a12:	4b76      	ldr	r3, [pc, #472]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a75      	ldr	r2, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	4b73      	ldr	r3, [pc, #460]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a72      	ldr	r2, [pc, #456]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a28:	6013      	str	r3, [r2, #0]
 8001a2a:	e00b      	b.n	8001a44 <HAL_RCC_OscConfig+0xcc>
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a6e      	ldr	r2, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a36:	6013      	str	r3, [r2, #0]
 8001a38:	4b6c      	ldr	r3, [pc, #432]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d013      	beq.n	8001a74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4c:	f7ff f8c8 	bl	8000be0 <HAL_GetTick>
 8001a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a52:	e008      	b.n	8001a66 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a54:	f7ff f8c4 	bl	8000be0 <HAL_GetTick>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	1ad3      	subs	r3, r2, r3
 8001a5e:	2b64      	cmp	r3, #100	@ 0x64
 8001a60:	d901      	bls.n	8001a66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e21f      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a66:	4b61      	ldr	r3, [pc, #388]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d0f0      	beq.n	8001a54 <HAL_RCC_OscConfig+0xdc>
 8001a72:	e014      	b.n	8001a9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a74:	f7ff f8b4 	bl	8000be0 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a7c:	f7ff f8b0 	bl	8000be0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b64      	cmp	r3, #100	@ 0x64
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e20b      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8e:	4b57      	ldr	r3, [pc, #348]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x104>
 8001a9a:	e000      	b.n	8001a9e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d06f      	beq.n	8001b8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001aaa:	4b50      	ldr	r3, [pc, #320]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d017      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f003 030c 	and.w	r3, r3, #12
        || \
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d105      	bne.n	8001ace <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d00b      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ace:	4b47      	ldr	r3, [pc, #284]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	d11c      	bne.n	8001b14 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ada:	4b44      	ldr	r3, [pc, #272]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d116      	bne.n	8001b14 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ae6:	4b41      	ldr	r3, [pc, #260]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d005      	beq.n	8001afe <HAL_RCC_OscConfig+0x186>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e1d3      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001afe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	691b      	ldr	r3, [r3, #16]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	4937      	ldr	r1, [pc, #220]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b12:	e03a      	b.n	8001b8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d020      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b1c:	4b34      	ldr	r3, [pc, #208]	@ (8001bf0 <HAL_RCC_OscConfig+0x278>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b22:	f7ff f85d 	bl	8000be0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f859 	bl	8000be0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e1b4      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0302 	and.w	r3, r3, #2
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b48:	4b28      	ldr	r3, [pc, #160]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4925      	ldr	r1, [pc, #148]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
 8001b5c:	e015      	b.n	8001b8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <HAL_RCC_OscConfig+0x278>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f83c 	bl	8000be0 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b6c:	f7ff f838 	bl	8000be0 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e193      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0302 	and.w	r3, r3, #2
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0308 	and.w	r3, r3, #8
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d036      	beq.n	8001c04 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d016      	beq.n	8001bcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7ff f81c 	bl	8000be0 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bac:	f7ff f818 	bl	8000be0 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e173      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <HAL_RCC_OscConfig+0x274>)
 8001bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0f0      	beq.n	8001bac <HAL_RCC_OscConfig+0x234>
 8001bca:	e01b      	b.n	8001c04 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bcc:	4b09      	ldr	r3, [pc, #36]	@ (8001bf4 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f805 	bl	8000be0 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd8:	e00e      	b.n	8001bf8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff f801 	bl	8000be0 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d907      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e15c      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	42470000 	.word	0x42470000
 8001bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b8a      	ldr	r3, [pc, #552]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1ea      	bne.n	8001bda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 8097 	beq.w	8001d40 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b83      	ldr	r3, [pc, #524]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10f      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	60bb      	str	r3, [r7, #8]
 8001c26:	4b7f      	ldr	r3, [pc, #508]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c32:	4b7c      	ldr	r3, [pc, #496]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c42:	4b79      	ldr	r3, [pc, #484]	@ (8001e28 <HAL_RCC_OscConfig+0x4b0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4e:	4b76      	ldr	r3, [pc, #472]	@ (8001e28 <HAL_RCC_OscConfig+0x4b0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a75      	ldr	r2, [pc, #468]	@ (8001e28 <HAL_RCC_OscConfig+0x4b0>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7fe ffc1 	bl	8000be0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7fe ffbd 	bl	8000be0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e118      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c74:	4b6c      	ldr	r3, [pc, #432]	@ (8001e28 <HAL_RCC_OscConfig+0x4b0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x31e>
 8001c88:	4b66      	ldr	r3, [pc, #408]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c8c:	4a65      	ldr	r2, [pc, #404]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c94:	e01c      	b.n	8001cd0 <HAL_RCC_OscConfig+0x358>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b05      	cmp	r3, #5
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x340>
 8001c9e:	4b61      	ldr	r3, [pc, #388]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ca2:	4a60      	ldr	r2, [pc, #384]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	f043 0304 	orr.w	r3, r3, #4
 8001ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001caa:	4b5e      	ldr	r3, [pc, #376]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cae:	4a5d      	ldr	r2, [pc, #372]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cb6:	e00b      	b.n	8001cd0 <HAL_RCC_OscConfig+0x358>
 8001cb8:	4b5a      	ldr	r3, [pc, #360]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cbc:	4a59      	ldr	r2, [pc, #356]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cbe:	f023 0301 	bic.w	r3, r3, #1
 8001cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001cc4:	4b57      	ldr	r3, [pc, #348]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc8:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	f023 0304 	bic.w	r3, r3, #4
 8001cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d015      	beq.n	8001d04 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7fe ff82 	bl	8000be0 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7fe ff7e 	bl	8000be0 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0d7      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ee      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x368>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7fe ff6c 	bl	8000be0 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0a:	e00a      	b.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7fe ff68 	bl	8000be0 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0c1      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d22:	4b40      	ldr	r3, [pc, #256]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	f003 0302 	and.w	r3, r3, #2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1ee      	bne.n	8001d0c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d2e:	7dfb      	ldrb	r3, [r7, #23]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d105      	bne.n	8001d40 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d34:	4b3b      	ldr	r3, [pc, #236]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d38:	4a3a      	ldr	r2, [pc, #232]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80ad 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d4a:	4b36      	ldr	r3, [pc, #216]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b08      	cmp	r3, #8
 8001d54:	d060      	beq.n	8001e18 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d145      	bne.n	8001dea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d5e:	4b33      	ldr	r3, [pc, #204]	@ (8001e2c <HAL_RCC_OscConfig+0x4b4>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d64:	f7fe ff3c 	bl	8000be0 <HAL_GetTick>
 8001d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	e008      	b.n	8001d7e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d6c:	f7fe ff38 	bl	8000be0 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e093      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d7e:	4b29      	ldr	r3, [pc, #164]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d1f0      	bne.n	8001d6c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69da      	ldr	r2, [r3, #28]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d98:	019b      	lsls	r3, r3, #6
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	3b01      	subs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db4:	071b      	lsls	r3, r3, #28
 8001db6:	491b      	ldr	r1, [pc, #108]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <HAL_RCC_OscConfig+0x4b4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7fe ff0d 	bl	8000be0 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7fe ff09 	bl	8000be0 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e064      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ddc:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x452>
 8001de8:	e05c      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dea:	4b10      	ldr	r3, [pc, #64]	@ (8001e2c <HAL_RCC_OscConfig+0x4b4>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df0:	f7fe fef6 	bl	8000be0 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df8:	f7fe fef2 	bl	8000be0 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e04d      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_RCC_OscConfig+0x4ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x480>
 8001e16:	e045      	b.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d107      	bne.n	8001e30 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e040      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e30:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb0 <HAL_RCC_OscConfig+0x538>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d129      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d122      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001e60:	4013      	ands	r3, r2
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001e66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d119      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e76:	085b      	lsrs	r3, r3, #1
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d10f      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d107      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40023800 	.word	0x40023800

08001eb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e042      	b.n	8001f4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f7fe fd54 	bl	8000988 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2224      	movs	r2, #36	@ 0x24
 8001ee4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001ef6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fcdb 	bl	80028b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	691a      	ldr	r2, [r3, #16]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001f0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001f1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2220      	movs	r2, #32
 8001f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d112      	bne.n	8001f94 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d002      	beq.n	8001f7a <HAL_UART_Receive_IT+0x26>
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e00b      	b.n	8001f96 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f84:	88fb      	ldrh	r3, [r7, #6]
 8001f86:	461a      	mov	r2, r3
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 faba 	bl	8002504 <UART_Start_Receive_IT>
 8001f90:	4603      	mov	r3, r0
 8001f92:	e000      	b.n	8001f96 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
  }
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
	...

08001fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_UART_IRQHandler+0x66>
 8001ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fb99 	bl	8002736 <UART_Receive_IT>
      return;
 8002004:	e25b      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80de 	beq.w	80021cc <HAL_UART_IRQHandler+0x22c>
 8002010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800201c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002020:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80d1 	beq.w	80021cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800202a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_UART_IRQHandler+0xae>
 8002036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800203a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_UART_IRQHandler+0xd2>
 800205a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_UART_IRQHandler+0xf6>
 800207e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800208e:	f043 0204 	orr.w	r2, r3, #4
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <HAL_UART_IRQHandler+0x126>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	f043 0208 	orr.w	r2, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 81f2 	beq.w	80024b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_UART_IRQHandler+0x14e>
 80020dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb24 	bl	8002736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020f8:	2b40      	cmp	r3, #64	@ 0x40
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_UART_IRQHandler+0x17a>
 8002112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d04f      	beq.n	80021ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fa2c 	bl	8002578 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212a:	2b40      	cmp	r3, #64	@ 0x40
 800212c:	d141      	bne.n	80021b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3314      	adds	r3, #20
 8002134:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800213c:	e853 3f00 	ldrex	r3, [r3]
 8002140:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002144:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800214c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3314      	adds	r3, #20
 8002156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800215a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800216a:	e841 2300 	strex	r3, r2, [r1]
 800216e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1d9      	bne.n	800212e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d013      	beq.n	80021aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002186:	4a7e      	ldr	r2, [pc, #504]	@ (8002380 <HAL_UART_IRQHandler+0x3e0>)
 8002188:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fed7 	bl	8000f42 <HAL_DMA_Abort_IT>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021a4:	4610      	mov	r0, r2
 80021a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	e00e      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f994 	bl	80024d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	e00a      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f990 	bl	80024d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	e006      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f98c 	bl	80024d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021c6:	e175      	b.n	80024b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	bf00      	nop
    return;
 80021ca:	e173      	b.n	80024b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 814f 	bne.w	8002474 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8148 	beq.w	8002474 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8141 	beq.w	8002474 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002212:	2b40      	cmp	r3, #64	@ 0x40
 8002214:	f040 80b6 	bne.w	8002384 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8145 	beq.w	80024b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002236:	429a      	cmp	r2, r3
 8002238:	f080 813e 	bcs.w	80024b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002242:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800224e:	f000 8088 	beq.w	8002362 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002260:	e853 3f00 	ldrex	r3, [r3]
 8002264:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002268:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800226c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002270:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	330c      	adds	r3, #12
 800227a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800227e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002286:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800228a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800228e:	e841 2300 	strex	r3, r2, [r1]
 8002292:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002296:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1d9      	bne.n	8002252 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3314      	adds	r3, #20
 80022a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022a8:	e853 3f00 	ldrex	r3, [r3]
 80022ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022b0:	f023 0301 	bic.w	r3, r3, #1
 80022b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	3314      	adds	r3, #20
 80022be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022ce:	e841 2300 	strex	r3, r2, [r1]
 80022d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d1e1      	bne.n	800229e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3314      	adds	r3, #20
 80022e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022e4:	e853 3f00 	ldrex	r3, [r3]
 80022e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3314      	adds	r3, #20
 80022fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80022fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002300:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002302:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002304:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002306:	e841 2300 	strex	r3, r2, [r1]
 800230a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800230c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1e3      	bne.n	80022da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	330c      	adds	r3, #12
 8002326:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800232a:	e853 3f00 	ldrex	r3, [r3]
 800232e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002330:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002332:	f023 0310 	bic.w	r3, r3, #16
 8002336:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	330c      	adds	r3, #12
 8002340:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002344:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002346:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002348:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800234a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800234c:	e841 2300 	strex	r3, r2, [r1]
 8002350:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1e3      	bne.n	8002320 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe fd80 	bl	8000e62 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2202      	movs	r2, #2
 8002366:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002370:	b29b      	uxth	r3, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	b29b      	uxth	r3, r3
 8002376:	4619      	mov	r1, r3
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f000 f8b7 	bl	80024ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800237e:	e09b      	b.n	80024b8 <HAL_UART_IRQHandler+0x518>
 8002380:	0800263f 	.word	0x0800263f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800238c:	b29b      	uxth	r3, r3
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 808e 	beq.w	80024bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8089 	beq.w	80024bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80023d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e3      	bne.n	80023aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3314      	adds	r3, #20
 80023e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	623b      	str	r3, [r7, #32]
   return(result);
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3314      	adds	r3, #20
 8002402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002406:	633a      	str	r2, [r7, #48]	@ 0x30
 8002408:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800240c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e3      	bne.n	80023e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	e853 3f00 	ldrex	r3, [r3]
 8002436:	60fb      	str	r3, [r7, #12]
   return(result);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800244c:	61fa      	str	r2, [r7, #28]
 800244e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	617b      	str	r3, [r7, #20]
   return(result);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e3      	bne.n	8002428 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f83d 	bl	80024ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002472:	e023      	b.n	80024bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_UART_IRQHandler+0x4f4>
 8002480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002484:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f8ea 	bl	8002666 <UART_Transmit_IT>
    return;
 8002492:	e014      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <HAL_UART_IRQHandler+0x51e>
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f92a 	bl	8002706 <UART_EndTransmit_IT>
    return;
 80024b2:	e004      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
    return;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
      return;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
      return;
 80024bc:	bf00      	nop
  }
}
 80024be:	37e8      	adds	r7, #232	@ 0xe8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	460b      	mov	r3, r1
 80024f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	88fa      	ldrh	r2, [r7, #6]
 800251c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	88fa      	ldrh	r2, [r7, #6]
 8002522:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2222      	movs	r2, #34	@ 0x22
 800252e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	691b      	ldr	r3, [r3, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d007      	beq.n	800254a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68da      	ldr	r2, [r3, #12]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002548:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0201 	orr.w	r2, r2, #1
 8002558:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0220 	orr.w	r2, r2, #32
 8002568:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002578:	b480      	push	{r7}
 800257a:	b095      	sub	sp, #84	@ 0x54
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	330c      	adds	r3, #12
 8002586:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258a:	e853 3f00 	ldrex	r3, [r3]
 800258e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002592:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002596:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	330c      	adds	r3, #12
 800259e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80025a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025a8:	e841 2300 	strex	r3, r2, [r1]
 80025ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e5      	bne.n	8002580 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3314      	adds	r3, #20
 80025ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	e853 3f00 	ldrex	r3, [r3]
 80025c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3314      	adds	r3, #20
 80025d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025dc:	e841 2300 	strex	r3, r2, [r1]
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e5      	bne.n	80025b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d119      	bne.n	8002624 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	330c      	adds	r3, #12
 80025f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e853 3f00 	ldrex	r3, [r3]
 80025fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f023 0310 	bic.w	r3, r3, #16
 8002606:	647b      	str	r3, [r7, #68]	@ 0x44
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	330c      	adds	r3, #12
 800260e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002610:	61ba      	str	r2, [r7, #24]
 8002612:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002614:	6979      	ldr	r1, [r7, #20]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	e841 2300 	strex	r3, r2, [r1]
 800261c:	613b      	str	r3, [r7, #16]
   return(result);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1e5      	bne.n	80025f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2220      	movs	r2, #32
 8002628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002632:	bf00      	nop
 8002634:	3754      	adds	r7, #84	@ 0x54
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800264a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f7ff ff3d 	bl	80024d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b21      	cmp	r3, #33	@ 0x21
 8002678:	d13e      	bne.n	80026f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002682:	d114      	bne.n	80026ae <UART_Transmit_IT+0x48>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d110      	bne.n	80026ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a1b      	ldr	r3, [r3, #32]
 8002690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	1c9a      	adds	r2, r3, #2
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	621a      	str	r2, [r3, #32]
 80026ac:	e008      	b.n	80026c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6211      	str	r1, [r2, #32]
 80026b8:	781a      	ldrb	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4619      	mov	r1, r3
 80026ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10f      	bne.n	80026f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026f4:	2300      	movs	r3, #0
 80026f6:	e000      	b.n	80026fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026f8:	2302      	movs	r3, #2
  }
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800271c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2220      	movs	r2, #32
 8002722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff fecc 	bl	80024c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b08c      	sub	sp, #48	@ 0x30
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b22      	cmp	r3, #34	@ 0x22
 8002748:	f040 80ae 	bne.w	80028a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002754:	d117      	bne.n	8002786 <UART_Receive_IT+0x50>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d113      	bne.n	8002786 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800275e:	2300      	movs	r3, #0
 8002760:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002766:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b29b      	uxth	r3, r3
 8002770:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002774:	b29a      	uxth	r2, r3
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800277e:	1c9a      	adds	r2, r3, #2
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	629a      	str	r2, [r3, #40]	@ 0x28
 8002784:	e026      	b.n	80027d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800278c:	2300      	movs	r3, #0
 800278e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002798:	d007      	beq.n	80027aa <UART_Receive_IT+0x74>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10a      	bne.n	80027b8 <UART_Receive_IT+0x82>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d106      	bne.n	80027b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b4:	701a      	strb	r2, [r3, #0]
 80027b6:	e008      	b.n	80027ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027c4:	b2da      	uxtb	r2, r3
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29b      	uxth	r3, r3
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	4619      	mov	r1, r3
 80027e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d15d      	bne.n	80028a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68da      	ldr	r2, [r3, #12]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f022 0220 	bic.w	r2, r2, #32
 80027f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	695a      	ldr	r2, [r3, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0201 	bic.w	r2, r2, #1
 8002816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282a:	2b01      	cmp	r3, #1
 800282c:	d135      	bne.n	800289a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	330c      	adds	r3, #12
 800283a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	e853 3f00 	ldrex	r3, [r3]
 8002842:	613b      	str	r3, [r7, #16]
   return(result);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	f023 0310 	bic.w	r3, r3, #16
 800284a:	627b      	str	r3, [r7, #36]	@ 0x24
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	330c      	adds	r3, #12
 8002852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002854:	623a      	str	r2, [r7, #32]
 8002856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002858:	69f9      	ldr	r1, [r7, #28]
 800285a:	6a3a      	ldr	r2, [r7, #32]
 800285c:	e841 2300 	strex	r3, r2, [r1]
 8002860:	61bb      	str	r3, [r7, #24]
   return(result);
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1e5      	bne.n	8002834 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b10      	cmp	r3, #16
 8002874:	d10a      	bne.n	800288c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002890:	4619      	mov	r1, r3
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff fe2a 	bl	80024ec <HAL_UARTEx_RxEventCallback>
 8002898:	e002      	b.n	80028a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7fd fee4 	bl	8000668 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028a0:	2300      	movs	r3, #0
 80028a2:	e002      	b.n	80028aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e000      	b.n	80028aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028a8:	2302      	movs	r3, #2
  }
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3730      	adds	r7, #48	@ 0x30
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b8:	b0c0      	sub	sp, #256	@ 0x100
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80028cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d0:	68d9      	ldr	r1, [r3, #12]
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	ea40 0301 	orr.w	r3, r0, r1
 80028dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	691b      	ldr	r3, [r3, #16]
 80028ea:	431a      	orrs	r2, r3
 80028ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800290c:	f021 010c 	bic.w	r1, r1, #12
 8002910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800291a:	430b      	orrs	r3, r1
 800291c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800291e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800292a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800292e:	6999      	ldr	r1, [r3, #24]
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	ea40 0301 	orr.w	r3, r0, r1
 800293a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800293c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	4b8f      	ldr	r3, [pc, #572]	@ (8002b80 <UART_SetConfig+0x2cc>)
 8002944:	429a      	cmp	r2, r3
 8002946:	d005      	beq.n	8002954 <UART_SetConfig+0xa0>
 8002948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b84 <UART_SetConfig+0x2d0>)
 8002950:	429a      	cmp	r2, r3
 8002952:	d104      	bne.n	800295e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002954:	f7fe fdcc 	bl	80014f0 <HAL_RCC_GetPCLK2Freq>
 8002958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800295c:	e003      	b.n	8002966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800295e:	f7fe fdb3 	bl	80014c8 <HAL_RCC_GetPCLK1Freq>
 8002962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296a:	69db      	ldr	r3, [r3, #28]
 800296c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002970:	f040 810c 	bne.w	8002b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002978:	2200      	movs	r2, #0
 800297a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800297e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002986:	4622      	mov	r2, r4
 8002988:	462b      	mov	r3, r5
 800298a:	1891      	adds	r1, r2, r2
 800298c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800298e:	415b      	adcs	r3, r3
 8002990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002996:	4621      	mov	r1, r4
 8002998:	eb12 0801 	adds.w	r8, r2, r1
 800299c:	4629      	mov	r1, r5
 800299e:	eb43 0901 	adc.w	r9, r3, r1
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	f04f 0300 	mov.w	r3, #0
 80029aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b6:	4690      	mov	r8, r2
 80029b8:	4699      	mov	r9, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	eb18 0303 	adds.w	r3, r8, r3
 80029c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80029c4:	462b      	mov	r3, r5
 80029c6:	eb49 0303 	adc.w	r3, r9, r3
 80029ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80029ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80029da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80029de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80029e2:	460b      	mov	r3, r1
 80029e4:	18db      	adds	r3, r3, r3
 80029e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80029e8:	4613      	mov	r3, r2
 80029ea:	eb42 0303 	adc.w	r3, r2, r3
 80029ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80029f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80029f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80029f8:	f7fd fc04 	bl	8000204 <__aeabi_uldivmod>
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4b61      	ldr	r3, [pc, #388]	@ (8002b88 <UART_SetConfig+0x2d4>)
 8002a02:	fba3 2302 	umull	r2, r3, r3, r2
 8002a06:	095b      	lsrs	r3, r3, #5
 8002a08:	011c      	lsls	r4, r3, #4
 8002a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002a1c:	4642      	mov	r2, r8
 8002a1e:	464b      	mov	r3, r9
 8002a20:	1891      	adds	r1, r2, r2
 8002a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002a24:	415b      	adcs	r3, r3
 8002a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a2c:	4641      	mov	r1, r8
 8002a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8002a32:	4649      	mov	r1, r9
 8002a34:	eb43 0b01 	adc.w	fp, r3, r1
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a4c:	4692      	mov	sl, r2
 8002a4e:	469b      	mov	fp, r3
 8002a50:	4643      	mov	r3, r8
 8002a52:	eb1a 0303 	adds.w	r3, sl, r3
 8002a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a5a:	464b      	mov	r3, r9
 8002a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	18db      	adds	r3, r3, r3
 8002a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a7e:	4613      	mov	r3, r2
 8002a80:	eb42 0303 	adc.w	r3, r2, r3
 8002a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a8e:	f7fd fbb9 	bl	8000204 <__aeabi_uldivmod>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4611      	mov	r1, r2
 8002a98:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <UART_SetConfig+0x2d4>)
 8002a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2264      	movs	r2, #100	@ 0x64
 8002aa2:	fb02 f303 	mul.w	r3, r2, r3
 8002aa6:	1acb      	subs	r3, r1, r3
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002aae:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <UART_SetConfig+0x2d4>)
 8002ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8002ab4:	095b      	lsrs	r3, r3, #5
 8002ab6:	005b      	lsls	r3, r3, #1
 8002ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002abc:	441c      	add	r4, r3
 8002abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002ad0:	4642      	mov	r2, r8
 8002ad2:	464b      	mov	r3, r9
 8002ad4:	1891      	adds	r1, r2, r2
 8002ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002ad8:	415b      	adcs	r3, r3
 8002ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ae0:	4641      	mov	r1, r8
 8002ae2:	1851      	adds	r1, r2, r1
 8002ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	414b      	adcs	r3, r1
 8002aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	f04f 0300 	mov.w	r3, #0
 8002af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002af8:	4659      	mov	r1, fp
 8002afa:	00cb      	lsls	r3, r1, #3
 8002afc:	4651      	mov	r1, sl
 8002afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b02:	4651      	mov	r1, sl
 8002b04:	00ca      	lsls	r2, r1, #3
 8002b06:	4610      	mov	r0, r2
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	4642      	mov	r2, r8
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002b14:	464b      	mov	r3, r9
 8002b16:	460a      	mov	r2, r1
 8002b18:	eb42 0303 	adc.w	r3, r2, r3
 8002b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002b34:	460b      	mov	r3, r1
 8002b36:	18db      	adds	r3, r3, r3
 8002b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	eb42 0303 	adc.w	r3, r2, r3
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002b4a:	f7fd fb5b 	bl	8000204 <__aeabi_uldivmod>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <UART_SetConfig+0x2d4>)
 8002b54:	fba3 1302 	umull	r1, r3, r3, r2
 8002b58:	095b      	lsrs	r3, r3, #5
 8002b5a:	2164      	movs	r1, #100	@ 0x64
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	3332      	adds	r3, #50	@ 0x32
 8002b66:	4a08      	ldr	r2, [pc, #32]	@ (8002b88 <UART_SetConfig+0x2d4>)
 8002b68:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6c:	095b      	lsrs	r3, r3, #5
 8002b6e:	f003 0207 	and.w	r2, r3, #7
 8002b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4422      	add	r2, r4
 8002b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b7c:	e106      	b.n	8002d8c <UART_SetConfig+0x4d8>
 8002b7e:	bf00      	nop
 8002b80:	40011000 	.word	0x40011000
 8002b84:	40011400 	.word	0x40011400
 8002b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b90:	2200      	movs	r2, #0
 8002b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b9e:	4642      	mov	r2, r8
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	1891      	adds	r1, r2, r2
 8002ba4:	6239      	str	r1, [r7, #32]
 8002ba6:	415b      	adcs	r3, r3
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002bae:	4641      	mov	r1, r8
 8002bb0:	1854      	adds	r4, r2, r1
 8002bb2:	4649      	mov	r1, r9
 8002bb4:	eb43 0501 	adc.w	r5, r3, r1
 8002bb8:	f04f 0200 	mov.w	r2, #0
 8002bbc:	f04f 0300 	mov.w	r3, #0
 8002bc0:	00eb      	lsls	r3, r5, #3
 8002bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002bc6:	00e2      	lsls	r2, r4, #3
 8002bc8:	4614      	mov	r4, r2
 8002bca:	461d      	mov	r5, r3
 8002bcc:	4643      	mov	r3, r8
 8002bce:	18e3      	adds	r3, r4, r3
 8002bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002bd4:	464b      	mov	r3, r9
 8002bd6:	eb45 0303 	adc.w	r3, r5, r3
 8002bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002bfa:	4629      	mov	r1, r5
 8002bfc:	008b      	lsls	r3, r1, #2
 8002bfe:	4621      	mov	r1, r4
 8002c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c04:	4621      	mov	r1, r4
 8002c06:	008a      	lsls	r2, r1, #2
 8002c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002c0c:	f7fd fafa 	bl	8000204 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4b60      	ldr	r3, [pc, #384]	@ (8002d98 <UART_SetConfig+0x4e4>)
 8002c16:	fba3 2302 	umull	r2, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	011c      	lsls	r4, r3, #4
 8002c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c22:	2200      	movs	r2, #0
 8002c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002c30:	4642      	mov	r2, r8
 8002c32:	464b      	mov	r3, r9
 8002c34:	1891      	adds	r1, r2, r2
 8002c36:	61b9      	str	r1, [r7, #24]
 8002c38:	415b      	adcs	r3, r3
 8002c3a:	61fb      	str	r3, [r7, #28]
 8002c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c40:	4641      	mov	r1, r8
 8002c42:	1851      	adds	r1, r2, r1
 8002c44:	6139      	str	r1, [r7, #16]
 8002c46:	4649      	mov	r1, r9
 8002c48:	414b      	adcs	r3, r1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c58:	4659      	mov	r1, fp
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	4651      	mov	r1, sl
 8002c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c62:	4651      	mov	r1, sl
 8002c64:	00ca      	lsls	r2, r1, #3
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4642      	mov	r2, r8
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c74:	464b      	mov	r3, r9
 8002c76:	460a      	mov	r2, r1
 8002c78:	eb42 0303 	adc.w	r3, r2, r3
 8002c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c98:	4649      	mov	r1, r9
 8002c9a:	008b      	lsls	r3, r1, #2
 8002c9c:	4641      	mov	r1, r8
 8002c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ca2:	4641      	mov	r1, r8
 8002ca4:	008a      	lsls	r2, r1, #2
 8002ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002caa:	f7fd faab 	bl	8000204 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4b38      	ldr	r3, [pc, #224]	@ (8002d98 <UART_SetConfig+0x4e4>)
 8002cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8002cba:	095b      	lsrs	r3, r3, #5
 8002cbc:	2264      	movs	r2, #100	@ 0x64
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	1acb      	subs	r3, r1, r3
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	3332      	adds	r3, #50	@ 0x32
 8002cc8:	4a33      	ldr	r2, [pc, #204]	@ (8002d98 <UART_SetConfig+0x4e4>)
 8002cca:	fba2 2303 	umull	r2, r3, r2, r3
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cd4:	441c      	add	r4, r3
 8002cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cda:	2200      	movs	r2, #0
 8002cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8002ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002ce4:	4642      	mov	r2, r8
 8002ce6:	464b      	mov	r3, r9
 8002ce8:	1891      	adds	r1, r2, r2
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	415b      	adcs	r3, r3
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cf4:	4641      	mov	r1, r8
 8002cf6:	1851      	adds	r1, r2, r1
 8002cf8:	6039      	str	r1, [r7, #0]
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	414b      	adcs	r3, r1
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	f04f 0200 	mov.w	r2, #0
 8002d04:	f04f 0300 	mov.w	r3, #0
 8002d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	00cb      	lsls	r3, r1, #3
 8002d10:	4651      	mov	r1, sl
 8002d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002d16:	4651      	mov	r1, sl
 8002d18:	00ca      	lsls	r2, r1, #3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	4603      	mov	r3, r0
 8002d20:	4642      	mov	r2, r8
 8002d22:	189b      	adds	r3, r3, r2
 8002d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d26:	464b      	mov	r3, r9
 8002d28:	460a      	mov	r2, r1
 8002d2a:	eb42 0303 	adc.w	r3, r2, r3
 8002d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8002d3c:	f04f 0200 	mov.w	r2, #0
 8002d40:	f04f 0300 	mov.w	r3, #0
 8002d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002d48:	4649      	mov	r1, r9
 8002d4a:	008b      	lsls	r3, r1, #2
 8002d4c:	4641      	mov	r1, r8
 8002d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d52:	4641      	mov	r1, r8
 8002d54:	008a      	lsls	r2, r1, #2
 8002d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002d5a:	f7fd fa53 	bl	8000204 <__aeabi_uldivmod>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <UART_SetConfig+0x4e4>)
 8002d64:	fba3 1302 	umull	r1, r3, r3, r2
 8002d68:	095b      	lsrs	r3, r3, #5
 8002d6a:	2164      	movs	r1, #100	@ 0x64
 8002d6c:	fb01 f303 	mul.w	r3, r1, r3
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	3332      	adds	r3, #50	@ 0x32
 8002d76:	4a08      	ldr	r2, [pc, #32]	@ (8002d98 <UART_SetConfig+0x4e4>)
 8002d78:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	f003 020f 	and.w	r2, r3, #15
 8002d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4422      	add	r2, r4
 8002d8a:	609a      	str	r2, [r3, #8]
}
 8002d8c:	bf00      	nop
 8002d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d92:	46bd      	mov	sp, r7
 8002d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d98:	51eb851f 	.word	0x51eb851f

08002d9c <memset>:
 8002d9c:	4402      	add	r2, r0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d100      	bne.n	8002da6 <memset+0xa>
 8002da4:	4770      	bx	lr
 8002da6:	f803 1b01 	strb.w	r1, [r3], #1
 8002daa:	e7f9      	b.n	8002da0 <memset+0x4>

08002dac <__libc_init_array>:
 8002dac:	b570      	push	{r4, r5, r6, lr}
 8002dae:	4d0d      	ldr	r5, [pc, #52]	@ (8002de4 <__libc_init_array+0x38>)
 8002db0:	4c0d      	ldr	r4, [pc, #52]	@ (8002de8 <__libc_init_array+0x3c>)
 8002db2:	1b64      	subs	r4, r4, r5
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	2600      	movs	r6, #0
 8002db8:	42a6      	cmp	r6, r4
 8002dba:	d109      	bne.n	8002dd0 <__libc_init_array+0x24>
 8002dbc:	4d0b      	ldr	r5, [pc, #44]	@ (8002dec <__libc_init_array+0x40>)
 8002dbe:	4c0c      	ldr	r4, [pc, #48]	@ (8002df0 <__libc_init_array+0x44>)
 8002dc0:	f000 f818 	bl	8002df4 <_init>
 8002dc4:	1b64      	subs	r4, r4, r5
 8002dc6:	10a4      	asrs	r4, r4, #2
 8002dc8:	2600      	movs	r6, #0
 8002dca:	42a6      	cmp	r6, r4
 8002dcc:	d105      	bne.n	8002dda <__libc_init_array+0x2e>
 8002dce:	bd70      	pop	{r4, r5, r6, pc}
 8002dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dd4:	4798      	blx	r3
 8002dd6:	3601      	adds	r6, #1
 8002dd8:	e7ee      	b.n	8002db8 <__libc_init_array+0xc>
 8002dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dde:	4798      	blx	r3
 8002de0:	3601      	adds	r6, #1
 8002de2:	e7f2      	b.n	8002dca <__libc_init_array+0x1e>
 8002de4:	08002e2c 	.word	0x08002e2c
 8002de8:	08002e2c 	.word	0x08002e2c
 8002dec:	08002e2c 	.word	0x08002e2c
 8002df0:	08002e30 	.word	0x08002e30

08002df4 <_init>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr

08002e00 <_fini>:
 8002e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e02:	bf00      	nop
 8002e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e06:	bc08      	pop	{r3}
 8002e08:	469e      	mov	lr, r3
 8002e0a:	4770      	bx	lr
