
Q2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000380  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000544  08000544  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000544  08000544  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000544  08000544  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000544  08000544  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000544  08000544  00001544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800054c  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000550  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000550  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000137e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004ed  00000000  00000000  000033b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014c  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  00003bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022bd  00000000  00000000  00023284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c320e  00000000  00000000  00025541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e874f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000058c  00000000  00000000  000e8794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000e8d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800052c 	.word	0x0800052c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	0800052c 	.word	0x0800052c

08000204 <delay>:
#include "stm32f4xx.h"

void delay(int seconds)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	for(;seconds>0;seconds--)
 800020c:	e00d      	b.n	800022a <delay+0x26>
		for(int count1 =0;count1<3000; count1++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delay+0x10>
	for(;seconds>0;seconds--)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcee      	bgt.n	800020e <delay+0xa>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <gpio_init>:

void gpio_init()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 11<<1;
 8000244:	4b0d      	ldr	r3, [pc, #52]	@ (800027c <gpio_init+0x3c>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a0c      	ldr	r2, [pc, #48]	@ (800027c <gpio_init+0x3c>)
 800024a:	f043 0316 	orr.w	r3, r3, #22
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOC ->MODER |= 0x5555;
 8000250:	4b0b      	ldr	r3, [pc, #44]	@ (8000280 <gpio_init+0x40>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a0a      	ldr	r2, [pc, #40]	@ (8000280 <gpio_init+0x40>)
 8000256:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 800025a:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800025e:	6013      	str	r3, [r2, #0]
	GPIOB ->MODER |= 0x5555;
 8000260:	4b08      	ldr	r3, [pc, #32]	@ (8000284 <gpio_init+0x44>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	4a07      	ldr	r2, [pc, #28]	@ (8000284 <gpio_init+0x44>)
 8000266:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 800026a:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40023800 	.word	0x40023800
 8000280:	40020800 	.word	0x40020800
 8000284:	40020400 	.word	0x40020400

08000288 <fun>:
void fun()
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	GPIOB ->ODR = 0x6F;
 800028c:	4b23      	ldr	r3, [pc, #140]	@ (800031c <fun+0x94>)
 800028e:	226f      	movs	r2, #111	@ 0x6f
 8000290:	615a      	str	r2, [r3, #20]
	delay(1000);
 8000292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000296:	f7ff ffb5 	bl	8000204 <delay>
	GPIOB ->ODR = 0x3F;
 800029a:	4b20      	ldr	r3, [pc, #128]	@ (800031c <fun+0x94>)
 800029c:	223f      	movs	r2, #63	@ 0x3f
 800029e:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002a4:	f7ff ffae 	bl	8000204 <delay>
	GPIOB ->ODR = 0x6;
 80002a8:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <fun+0x94>)
 80002aa:	2206      	movs	r2, #6
 80002ac:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b2:	f7ff ffa7 	bl	8000204 <delay>
	GPIOB ->ODR = 0x5B;
 80002b6:	4b19      	ldr	r3, [pc, #100]	@ (800031c <fun+0x94>)
 80002b8:	225b      	movs	r2, #91	@ 0x5b
 80002ba:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002c0:	f7ff ffa0 	bl	8000204 <delay>
	GPIOB ->ODR = 0x4F;
 80002c4:	4b15      	ldr	r3, [pc, #84]	@ (800031c <fun+0x94>)
 80002c6:	224f      	movs	r2, #79	@ 0x4f
 80002c8:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ce:	f7ff ff99 	bl	8000204 <delay>
	GPIOB ->ODR = 0x66;
 80002d2:	4b12      	ldr	r3, [pc, #72]	@ (800031c <fun+0x94>)
 80002d4:	2266      	movs	r2, #102	@ 0x66
 80002d6:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002dc:	f7ff ff92 	bl	8000204 <delay>
	GPIOB ->ODR = 0x6D;
 80002e0:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <fun+0x94>)
 80002e2:	226d      	movs	r2, #109	@ 0x6d
 80002e4:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002ea:	f7ff ff8b 	bl	8000204 <delay>
	GPIOB ->ODR = 0x7D;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <fun+0x94>)
 80002f0:	227d      	movs	r2, #125	@ 0x7d
 80002f2:	615a      	str	r2, [r3, #20]
	delay(1000);
 80002f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002f8:	f7ff ff84 	bl	8000204 <delay>
	GPIOB ->ODR = 0x7;
 80002fc:	4b07      	ldr	r3, [pc, #28]	@ (800031c <fun+0x94>)
 80002fe:	2207      	movs	r2, #7
 8000300:	615a      	str	r2, [r3, #20]
	delay(1000);
 8000302:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000306:	f7ff ff7d 	bl	8000204 <delay>
	GPIOB ->ODR = 0xFF;
 800030a:	4b04      	ldr	r3, [pc, #16]	@ (800031c <fun+0x94>)
 800030c:	22ff      	movs	r2, #255	@ 0xff
 800030e:	615a      	str	r2, [r3, #20]
	delay(1000);
 8000310:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000314:	f7ff ff76 	bl	8000204 <delay>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}
 800031c:	40020400 	.word	0x40020400

08000320 <main>:

int main()
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
	gpio_init();
 8000324:	f7ff ff8c 	bl	8000240 <gpio_init>
	while(1)
	{
		GPIOC ->ODR = 0x6F;
 8000328:	4b2d      	ldr	r3, [pc, #180]	@ (80003e0 <main+0xc0>)
 800032a:	226f      	movs	r2, #111	@ 0x6f
 800032c:	615a      	str	r2, [r3, #20]
		delay(1000);
 800032e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000332:	f7ff ff67 	bl	8000204 <delay>
		fun();
 8000336:	f7ff ffa7 	bl	8000288 <fun>
		GPIOC ->ODR = 0x3F;
 800033a:	4b29      	ldr	r3, [pc, #164]	@ (80003e0 <main+0xc0>)
 800033c:	223f      	movs	r2, #63	@ 0x3f
 800033e:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000340:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000344:	f7ff ff5e 	bl	8000204 <delay>
		fun();
 8000348:	f7ff ff9e 	bl	8000288 <fun>
		GPIOC ->ODR = 0x6;
 800034c:	4b24      	ldr	r3, [pc, #144]	@ (80003e0 <main+0xc0>)
 800034e:	2206      	movs	r2, #6
 8000350:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000356:	f7ff ff55 	bl	8000204 <delay>
		fun();
 800035a:	f7ff ff95 	bl	8000288 <fun>
		GPIOC ->ODR = 0x5B;
 800035e:	4b20      	ldr	r3, [pc, #128]	@ (80003e0 <main+0xc0>)
 8000360:	225b      	movs	r2, #91	@ 0x5b
 8000362:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000364:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000368:	f7ff ff4c 	bl	8000204 <delay>
		fun();
 800036c:	f7ff ff8c 	bl	8000288 <fun>
		GPIOC ->ODR = 0x4F;
 8000370:	4b1b      	ldr	r3, [pc, #108]	@ (80003e0 <main+0xc0>)
 8000372:	224f      	movs	r2, #79	@ 0x4f
 8000374:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800037a:	f7ff ff43 	bl	8000204 <delay>
		fun();
 800037e:	f7ff ff83 	bl	8000288 <fun>
		GPIOC ->ODR = 0x66;
 8000382:	4b17      	ldr	r3, [pc, #92]	@ (80003e0 <main+0xc0>)
 8000384:	2266      	movs	r2, #102	@ 0x66
 8000386:	615a      	str	r2, [r3, #20]
		delay(1000);
 8000388:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800038c:	f7ff ff3a 	bl	8000204 <delay>
		fun();
 8000390:	f7ff ff7a 	bl	8000288 <fun>
		GPIOC ->ODR = 0x6D;
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <main+0xc0>)
 8000396:	226d      	movs	r2, #109	@ 0x6d
 8000398:	615a      	str	r2, [r3, #20]
		delay(1000);
 800039a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800039e:	f7ff ff31 	bl	8000204 <delay>
		fun();
 80003a2:	f7ff ff71 	bl	8000288 <fun>
		GPIOC ->ODR = 0x7D;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <main+0xc0>)
 80003a8:	227d      	movs	r2, #125	@ 0x7d
 80003aa:	615a      	str	r2, [r3, #20]
		delay(1000);
 80003ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003b0:	f7ff ff28 	bl	8000204 <delay>
		fun();
 80003b4:	f7ff ff68 	bl	8000288 <fun>
		GPIOC ->ODR = 0x7;
 80003b8:	4b09      	ldr	r3, [pc, #36]	@ (80003e0 <main+0xc0>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	615a      	str	r2, [r3, #20]
		delay(1000);
 80003be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003c2:	f7ff ff1f 	bl	8000204 <delay>
		fun();
 80003c6:	f7ff ff5f 	bl	8000288 <fun>
		GPIOC ->ODR = 0xFF;
 80003ca:	4b05      	ldr	r3, [pc, #20]	@ (80003e0 <main+0xc0>)
 80003cc:	22ff      	movs	r2, #255	@ 0xff
 80003ce:	615a      	str	r2, [r3, #20]
		delay(1000);
 80003d0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80003d4:	f7ff ff16 	bl	8000204 <delay>
		fun();
 80003d8:	f7ff ff56 	bl	8000288 <fun>
		GPIOC ->ODR = 0x6F;
 80003dc:	bf00      	nop
 80003de:	e7a3      	b.n	8000328 <main+0x8>
 80003e0:	40020800 	.word	0x40020800

080003e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003e8:	bf00      	nop
 80003ea:	e7fd      	b.n	80003e8 <NMI_Handler+0x4>

080003ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003ec:	b480      	push	{r7}
 80003ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <HardFault_Handler+0x4>

080003f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003f8:	bf00      	nop
 80003fa:	e7fd      	b.n	80003f8 <MemManage_Handler+0x4>

080003fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000400:	bf00      	nop
 8000402:	e7fd      	b.n	8000400 <BusFault_Handler+0x4>

08000404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000408:	bf00      	nop
 800040a:	e7fd      	b.n	8000408 <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800041a:	b480      	push	{r7}
 800041c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041e:	bf00      	nop
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr

08000428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	46bd      	mov	sp, r7
 8000430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000434:	4770      	bx	lr

08000436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000436:	b580      	push	{r7, lr}
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800043a:	f000 f83f 	bl	80004bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
	...

08000444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000448:	4b06      	ldr	r3, [pc, #24]	@ (8000464 <SystemInit+0x20>)
 800044a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800044e:	4a05      	ldr	r2, [pc, #20]	@ (8000464 <SystemInit+0x20>)
 8000450:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000454:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000458:	bf00      	nop
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000468:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80004a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800046c:	f7ff ffea 	bl	8000444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000470:	480c      	ldr	r0, [pc, #48]	@ (80004a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000472:	490d      	ldr	r1, [pc, #52]	@ (80004a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000474:	4a0d      	ldr	r2, [pc, #52]	@ (80004ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a0a      	ldr	r2, [pc, #40]	@ (80004b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000488:	4c0a      	ldr	r4, [pc, #40]	@ (80004b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000496:	f000 f825 	bl	80004e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800049a:	f7ff ff41 	bl	8000320 <main>
  bx  lr    
 800049e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80004a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80004ac:	0800054c 	.word	0x0800054c
  ldr r2, =_sbss
 80004b0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004b4:	20000024 	.word	0x20000024

080004b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004b8:	e7fe      	b.n	80004b8 <ADC_IRQHandler>
	...

080004bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004c0:	4b06      	ldr	r3, [pc, #24]	@ (80004dc <HAL_IncTick+0x20>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <HAL_IncTick+0x24>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4413      	add	r3, r2
 80004cc:	4a04      	ldr	r2, [pc, #16]	@ (80004e0 <HAL_IncTick+0x24>)
 80004ce:	6013      	str	r3, [r2, #0]
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	20000000 	.word	0x20000000
 80004e0:	20000020 	.word	0x20000020

080004e4 <__libc_init_array>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	4d0d      	ldr	r5, [pc, #52]	@ (800051c <__libc_init_array+0x38>)
 80004e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000520 <__libc_init_array+0x3c>)
 80004ea:	1b64      	subs	r4, r4, r5
 80004ec:	10a4      	asrs	r4, r4, #2
 80004ee:	2600      	movs	r6, #0
 80004f0:	42a6      	cmp	r6, r4
 80004f2:	d109      	bne.n	8000508 <__libc_init_array+0x24>
 80004f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000524 <__libc_init_array+0x40>)
 80004f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000528 <__libc_init_array+0x44>)
 80004f8:	f000 f818 	bl	800052c <_init>
 80004fc:	1b64      	subs	r4, r4, r5
 80004fe:	10a4      	asrs	r4, r4, #2
 8000500:	2600      	movs	r6, #0
 8000502:	42a6      	cmp	r6, r4
 8000504:	d105      	bne.n	8000512 <__libc_init_array+0x2e>
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	f855 3b04 	ldr.w	r3, [r5], #4
 800050c:	4798      	blx	r3
 800050e:	3601      	adds	r6, #1
 8000510:	e7ee      	b.n	80004f0 <__libc_init_array+0xc>
 8000512:	f855 3b04 	ldr.w	r3, [r5], #4
 8000516:	4798      	blx	r3
 8000518:	3601      	adds	r6, #1
 800051a:	e7f2      	b.n	8000502 <__libc_init_array+0x1e>
 800051c:	08000544 	.word	0x08000544
 8000520:	08000544 	.word	0x08000544
 8000524:	08000544 	.word	0x08000544
 8000528:	08000548 	.word	0x08000548

0800052c <_init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	bf00      	nop
 8000530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000532:	bc08      	pop	{r3}
 8000534:	469e      	mov	lr, r3
 8000536:	4770      	bx	lr

08000538 <_fini>:
 8000538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800053a:	bf00      	nop
 800053c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800053e:	bc08      	pop	{r3}
 8000540:	469e      	mov	lr, r3
 8000542:	4770      	bx	lr
