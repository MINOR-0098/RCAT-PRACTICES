
Q7_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002680  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002844  08002844  00003844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800285c  0800285c  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  0800285c  0800285c  0000385c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002864  08002864  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800286c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  08002878  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  08002878  00004074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007c35  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001506  00000000  00000000  0000bc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  0000d178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051f  00000000  00000000  0000d828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020211  00000000  00000000  0000dd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008df5  00000000  00000000  0002df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c49fb  00000000  00000000  00036d4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fb748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a74  00000000  00000000  000fb78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000fd200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800282c 	.word	0x0800282c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800282c 	.word	0x0800282c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <blink>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void blink(int key)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	for (int var = 0; var < 2*key; ++var)
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
 8000500:	e00a      	b.n	8000518 <blink+0x24>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000502:	2120      	movs	r1, #32
 8000504:	4809      	ldr	r0, [pc, #36]	@ (800052c <blink+0x38>)
 8000506:	f001 f89e 	bl	8001646 <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800050a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800050e:	f000 fdcb 	bl	80010a8 <HAL_Delay>
	for (int var = 0; var < 2*key; ++var)
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	005b      	lsls	r3, r3, #1
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	429a      	cmp	r2, r3
 8000520:	dbef      	blt.n	8000502 <blink+0xe>
	}
}
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40020000 	.word	0x40020000

08000530 <seven_Seg.0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
void seven_Seg(int key)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	f8c7 c000 	str.w	ip, [r7]
	switch (key) {
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b09      	cmp	r3, #9
 8000540:	f200 81ad 	bhi.w	800089e <seven_Seg.0+0x36e>
 8000544:	a201      	add	r2, pc, #4	@ (adr r2, 800054c <seven_Seg.0+0x1c>)
 8000546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800054a:	bf00      	nop
 800054c:	08000575 	.word	0x08000575
 8000550:	080005bd 	.word	0x080005bd
 8000554:	0800060f 	.word	0x0800060f
 8000558:	08000661 	.word	0x08000661
 800055c:	080006b3 	.word	0x080006b3
 8000560:	08000705 	.word	0x08000705
 8000564:	08000757 	.word	0x08000757
 8000568:	080007a9 	.word	0x080007a9
 800056c:	080007fb 	.word	0x080007fb
 8000570:	0800084d 	.word	0x0800084d
		  		case 0 :
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	48ce      	ldr	r0, [pc, #824]	@ (80008b4 <seven_Seg.0+0x384>)
 800057a:	f001 f84b 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800057e:	2201      	movs	r2, #1
 8000580:	2102      	movs	r1, #2
 8000582:	48cc      	ldr	r0, [pc, #816]	@ (80008b4 <seven_Seg.0+0x384>)
 8000584:	f001 f846 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2104      	movs	r1, #4
 800058c:	48c9      	ldr	r0, [pc, #804]	@ (80008b4 <seven_Seg.0+0x384>)
 800058e:	f001 f841 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2108      	movs	r1, #8
 8000596:	48c7      	ldr	r0, [pc, #796]	@ (80008b4 <seven_Seg.0+0x384>)
 8000598:	f001 f83c 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2110      	movs	r1, #16
 80005a0:	48c4      	ldr	r0, [pc, #784]	@ (80008b4 <seven_Seg.0+0x384>)
 80005a2:	f001 f837 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	2120      	movs	r1, #32
 80005aa:	48c2      	ldr	r0, [pc, #776]	@ (80008b4 <seven_Seg.0+0x384>)
 80005ac:	f001 f832 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2140      	movs	r1, #64	@ 0x40
 80005b4:	48bf      	ldr	r0, [pc, #764]	@ (80008b4 <seven_Seg.0+0x384>)
 80005b6:	f001 f82d 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 80005ba:	e176      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 1 :
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2101      	movs	r1, #1
 80005c0:	48bc      	ldr	r0, [pc, #752]	@ (80008b4 <seven_Seg.0+0x384>)
 80005c2:	f001 f827 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	48ba      	ldr	r0, [pc, #744]	@ (80008b4 <seven_Seg.0+0x384>)
 80005cc:	f001 f822 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2104      	movs	r1, #4
 80005d4:	48b7      	ldr	r0, [pc, #732]	@ (80008b4 <seven_Seg.0+0x384>)
 80005d6:	f001 f81d 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2108      	movs	r1, #8
 80005de:	48b5      	ldr	r0, [pc, #724]	@ (80008b4 <seven_Seg.0+0x384>)
 80005e0:	f001 f818 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2110      	movs	r1, #16
 80005e8:	48b2      	ldr	r0, [pc, #712]	@ (80008b4 <seven_Seg.0+0x384>)
 80005ea:	f001 f813 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	2120      	movs	r1, #32
 80005f2:	48b0      	ldr	r0, [pc, #704]	@ (80008b4 <seven_Seg.0+0x384>)
 80005f4:	f001 f80e 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80005f8:	2200      	movs	r2, #0
 80005fa:	2140      	movs	r1, #64	@ 0x40
 80005fc:	48ad      	ldr	r0, [pc, #692]	@ (80008b4 <seven_Seg.0+0x384>)
 80005fe:	f001 f809 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, RESET);
 8000602:	2200      	movs	r2, #0
 8000604:	2180      	movs	r1, #128	@ 0x80
 8000606:	48ab      	ldr	r0, [pc, #684]	@ (80008b4 <seven_Seg.0+0x384>)
 8000608:	f001 f804 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 800060c:	e14d      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 2:
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800060e:	2201      	movs	r2, #1
 8000610:	2101      	movs	r1, #1
 8000612:	48a8      	ldr	r0, [pc, #672]	@ (80008b4 <seven_Seg.0+0x384>)
 8000614:	f000 fffe 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	48a5      	ldr	r0, [pc, #660]	@ (80008b4 <seven_Seg.0+0x384>)
 800061e:	f000 fff9 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2104      	movs	r1, #4
 8000626:	48a3      	ldr	r0, [pc, #652]	@ (80008b4 <seven_Seg.0+0x384>)
 8000628:	f000 fff4 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 800062c:	2201      	movs	r2, #1
 800062e:	2108      	movs	r1, #8
 8000630:	48a0      	ldr	r0, [pc, #640]	@ (80008b4 <seven_Seg.0+0x384>)
 8000632:	f000 ffef 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2110      	movs	r1, #16
 800063a:	489e      	ldr	r0, [pc, #632]	@ (80008b4 <seven_Seg.0+0x384>)
 800063c:	f000 ffea 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	2120      	movs	r1, #32
 8000644:	489b      	ldr	r0, [pc, #620]	@ (80008b4 <seven_Seg.0+0x384>)
 8000646:	f000 ffe5 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2140      	movs	r1, #64	@ 0x40
 800064e:	4899      	ldr	r0, [pc, #612]	@ (80008b4 <seven_Seg.0+0x384>)
 8000650:	f000 ffe0 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	4896      	ldr	r0, [pc, #600]	@ (80008b4 <seven_Seg.0+0x384>)
 800065a:	f000 ffdb 	bl	8001614 <HAL_GPIO_WritePin>

		  			break;
 800065e:	e124      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 3:
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000660:	2201      	movs	r2, #1
 8000662:	2101      	movs	r1, #1
 8000664:	4893      	ldr	r0, [pc, #588]	@ (80008b4 <seven_Seg.0+0x384>)
 8000666:	f000 ffd5 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4891      	ldr	r0, [pc, #580]	@ (80008b4 <seven_Seg.0+0x384>)
 8000670:	f000 ffd0 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2104      	movs	r1, #4
 8000678:	488e      	ldr	r0, [pc, #568]	@ (80008b4 <seven_Seg.0+0x384>)
 800067a:	f000 ffcb 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	488c      	ldr	r0, [pc, #560]	@ (80008b4 <seven_Seg.0+0x384>)
 8000684:	f000 ffc6 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	4889      	ldr	r0, [pc, #548]	@ (80008b4 <seven_Seg.0+0x384>)
 800068e:	f000 ffc1 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	4887      	ldr	r0, [pc, #540]	@ (80008b4 <seven_Seg.0+0x384>)
 8000698:	f000 ffbc 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 800069c:	2201      	movs	r2, #1
 800069e:	2140      	movs	r1, #64	@ 0x40
 80006a0:	4884      	ldr	r0, [pc, #528]	@ (80008b4 <seven_Seg.0+0x384>)
 80006a2:	f000 ffb7 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	2180      	movs	r1, #128	@ 0x80
 80006aa:	4882      	ldr	r0, [pc, #520]	@ (80008b4 <seven_Seg.0+0x384>)
 80006ac:	f000 ffb2 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 80006b0:	e0fb      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 4:
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	487f      	ldr	r0, [pc, #508]	@ (80008b4 <seven_Seg.0+0x384>)
 80006b8:	f000 ffac 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2102      	movs	r1, #2
 80006c0:	487c      	ldr	r0, [pc, #496]	@ (80008b4 <seven_Seg.0+0x384>)
 80006c2:	f000 ffa7 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2104      	movs	r1, #4
 80006ca:	487a      	ldr	r0, [pc, #488]	@ (80008b4 <seven_Seg.0+0x384>)
 80006cc:	f000 ffa2 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	4877      	ldr	r0, [pc, #476]	@ (80008b4 <seven_Seg.0+0x384>)
 80006d6:	f000 ff9d 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80006da:	2200      	movs	r2, #0
 80006dc:	2110      	movs	r1, #16
 80006de:	4875      	ldr	r0, [pc, #468]	@ (80008b4 <seven_Seg.0+0x384>)
 80006e0:	f000 ff98 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	2120      	movs	r1, #32
 80006e8:	4872      	ldr	r0, [pc, #456]	@ (80008b4 <seven_Seg.0+0x384>)
 80006ea:	f000 ff93 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2140      	movs	r1, #64	@ 0x40
 80006f2:	4870      	ldr	r0, [pc, #448]	@ (80008b4 <seven_Seg.0+0x384>)
 80006f4:	f000 ff8e 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	2180      	movs	r1, #128	@ 0x80
 80006fc:	486d      	ldr	r0, [pc, #436]	@ (80008b4 <seven_Seg.0+0x384>)
 80006fe:	f000 ff89 	bl	8001614 <HAL_GPIO_WritePin>

		  			break;
 8000702:	e0d2      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 5:
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	486a      	ldr	r0, [pc, #424]	@ (80008b4 <seven_Seg.0+0x384>)
 800070a:	f000 ff83 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2102      	movs	r1, #2
 8000712:	4868      	ldr	r0, [pc, #416]	@ (80008b4 <seven_Seg.0+0x384>)
 8000714:	f000 ff7e 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2104      	movs	r1, #4
 800071c:	4865      	ldr	r0, [pc, #404]	@ (80008b4 <seven_Seg.0+0x384>)
 800071e:	f000 ff79 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000722:	2201      	movs	r2, #1
 8000724:	2108      	movs	r1, #8
 8000726:	4863      	ldr	r0, [pc, #396]	@ (80008b4 <seven_Seg.0+0x384>)
 8000728:	f000 ff74 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2110      	movs	r1, #16
 8000730:	4860      	ldr	r0, [pc, #384]	@ (80008b4 <seven_Seg.0+0x384>)
 8000732:	f000 ff6f 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8000736:	2201      	movs	r2, #1
 8000738:	2120      	movs	r1, #32
 800073a:	485e      	ldr	r0, [pc, #376]	@ (80008b4 <seven_Seg.0+0x384>)
 800073c:	f000 ff6a 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2140      	movs	r1, #64	@ 0x40
 8000744:	485b      	ldr	r0, [pc, #364]	@ (80008b4 <seven_Seg.0+0x384>)
 8000746:	f000 ff65 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2180      	movs	r1, #128	@ 0x80
 800074e:	4859      	ldr	r0, [pc, #356]	@ (80008b4 <seven_Seg.0+0x384>)
 8000750:	f000 ff60 	bl	8001614 <HAL_GPIO_WritePin>

		  			break;
 8000754:	e0a9      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 6:
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 8000756:	2201      	movs	r2, #1
 8000758:	2101      	movs	r1, #1
 800075a:	4856      	ldr	r0, [pc, #344]	@ (80008b4 <seven_Seg.0+0x384>)
 800075c:	f000 ff5a 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	2102      	movs	r1, #2
 8000764:	4853      	ldr	r0, [pc, #332]	@ (80008b4 <seven_Seg.0+0x384>)
 8000766:	f000 ff55 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2104      	movs	r1, #4
 800076e:	4851      	ldr	r0, [pc, #324]	@ (80008b4 <seven_Seg.0+0x384>)
 8000770:	f000 ff50 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000774:	2201      	movs	r2, #1
 8000776:	2108      	movs	r1, #8
 8000778:	484e      	ldr	r0, [pc, #312]	@ (80008b4 <seven_Seg.0+0x384>)
 800077a:	f000 ff4b 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 800077e:	2201      	movs	r2, #1
 8000780:	2110      	movs	r1, #16
 8000782:	484c      	ldr	r0, [pc, #304]	@ (80008b4 <seven_Seg.0+0x384>)
 8000784:	f000 ff46 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2120      	movs	r1, #32
 800078c:	4849      	ldr	r0, [pc, #292]	@ (80008b4 <seven_Seg.0+0x384>)
 800078e:	f000 ff41 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000792:	2201      	movs	r2, #1
 8000794:	2140      	movs	r1, #64	@ 0x40
 8000796:	4847      	ldr	r0, [pc, #284]	@ (80008b4 <seven_Seg.0+0x384>)
 8000798:	f000 ff3c 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	4844      	ldr	r0, [pc, #272]	@ (80008b4 <seven_Seg.0+0x384>)
 80007a2:	f000 ff37 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 80007a6:	e080      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 7:
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2101      	movs	r1, #1
 80007ac:	4841      	ldr	r0, [pc, #260]	@ (80008b4 <seven_Seg.0+0x384>)
 80007ae:	f000 ff31 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	2102      	movs	r1, #2
 80007b6:	483f      	ldr	r0, [pc, #252]	@ (80008b4 <seven_Seg.0+0x384>)
 80007b8:	f000 ff2c 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2104      	movs	r1, #4
 80007c0:	483c      	ldr	r0, [pc, #240]	@ (80008b4 <seven_Seg.0+0x384>)
 80007c2:	f000 ff27 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2108      	movs	r1, #8
 80007ca:	483a      	ldr	r0, [pc, #232]	@ (80008b4 <seven_Seg.0+0x384>)
 80007cc:	f000 ff22 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2110      	movs	r1, #16
 80007d4:	4837      	ldr	r0, [pc, #220]	@ (80008b4 <seven_Seg.0+0x384>)
 80007d6:	f000 ff1d 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	4835      	ldr	r0, [pc, #212]	@ (80008b4 <seven_Seg.0+0x384>)
 80007e0:	f000 ff18 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	2140      	movs	r1, #64	@ 0x40
 80007e8:	4832      	ldr	r0, [pc, #200]	@ (80008b4 <seven_Seg.0+0x384>)
 80007ea:	f000 ff13 	bl	8001614 <HAL_GPIO_WritePin>
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 80007ee:	2201      	movs	r2, #1
 80007f0:	2180      	movs	r1, #128	@ 0x80
 80007f2:	4830      	ldr	r0, [pc, #192]	@ (80008b4 <seven_Seg.0+0x384>)
 80007f4:	f000 ff0e 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 80007f8:	e057      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 8:
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2101      	movs	r1, #1
 80007fe:	482d      	ldr	r0, [pc, #180]	@ (80008b4 <seven_Seg.0+0x384>)
 8000800:	f000 ff08 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000804:	2201      	movs	r2, #1
 8000806:	2102      	movs	r1, #2
 8000808:	482a      	ldr	r0, [pc, #168]	@ (80008b4 <seven_Seg.0+0x384>)
 800080a:	f000 ff03 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2104      	movs	r1, #4
 8000812:	4828      	ldr	r0, [pc, #160]	@ (80008b4 <seven_Seg.0+0x384>)
 8000814:	f000 fefe 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2108      	movs	r1, #8
 800081c:	4825      	ldr	r0, [pc, #148]	@ (80008b4 <seven_Seg.0+0x384>)
 800081e:	f000 fef9 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, SET);
 8000822:	2201      	movs	r2, #1
 8000824:	2110      	movs	r1, #16
 8000826:	4823      	ldr	r0, [pc, #140]	@ (80008b4 <seven_Seg.0+0x384>)
 8000828:	f000 fef4 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 800082c:	2201      	movs	r2, #1
 800082e:	2120      	movs	r1, #32
 8000830:	4820      	ldr	r0, [pc, #128]	@ (80008b4 <seven_Seg.0+0x384>)
 8000832:	f000 feef 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000836:	2201      	movs	r2, #1
 8000838:	2140      	movs	r1, #64	@ 0x40
 800083a:	481e      	ldr	r0, [pc, #120]	@ (80008b4 <seven_Seg.0+0x384>)
 800083c:	f000 feea 	bl	8001614 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000840:	2201      	movs	r2, #1
 8000842:	2180      	movs	r1, #128	@ 0x80
 8000844:	481b      	ldr	r0, [pc, #108]	@ (80008b4 <seven_Seg.0+0x384>)
 8000846:	f000 fee5 	bl	8001614 <HAL_GPIO_WritePin>

		  			break;
 800084a:	e02e      	b.n	80008aa <seven_Seg.0+0x37a>
		  		case 9:
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, SET);
 800084c:	2201      	movs	r2, #1
 800084e:	2101      	movs	r1, #1
 8000850:	4818      	ldr	r0, [pc, #96]	@ (80008b4 <seven_Seg.0+0x384>)
 8000852:	f000 fedf 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2102      	movs	r1, #2
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <seven_Seg.0+0x384>)
 800085c:	f000 feda 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2104      	movs	r1, #4
 8000864:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <seven_Seg.0+0x384>)
 8000866:	f000 fed5 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2108      	movs	r1, #8
 800086e:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <seven_Seg.0+0x384>)
 8000870:	f000 fed0 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2110      	movs	r1, #16
 8000878:	480e      	ldr	r0, [pc, #56]	@ (80008b4 <seven_Seg.0+0x384>)
 800087a:	f000 fecb 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, SET);
 800087e:	2201      	movs	r2, #1
 8000880:	2120      	movs	r1, #32
 8000882:	480c      	ldr	r0, [pc, #48]	@ (80008b4 <seven_Seg.0+0x384>)
 8000884:	f000 fec6 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
 8000888:	2201      	movs	r2, #1
 800088a:	2140      	movs	r1, #64	@ 0x40
 800088c:	4809      	ldr	r0, [pc, #36]	@ (80008b4 <seven_Seg.0+0x384>)
 800088e:	f000 fec1 	bl	8001614 <HAL_GPIO_WritePin>
		  			 HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2180      	movs	r1, #128	@ 0x80
 8000896:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <seven_Seg.0+0x384>)
 8000898:	f000 febc 	bl	8001614 <HAL_GPIO_WritePin>

		  			break;
 800089c:	e005      	b.n	80008aa <seven_Seg.0+0x37a>
		  		default:
		  			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, SET);
 800089e:	2201      	movs	r2, #1
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	4804      	ldr	r0, [pc, #16]	@ (80008b4 <seven_Seg.0+0x384>)
 80008a4:	f000 feb6 	bl	8001614 <HAL_GPIO_WritePin>
		  			break;
 80008a8:	bf00      	nop
		  	}
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40020800 	.word	0x40020800

080008b8 <main>:
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
int main(void)
 80008be:	f107 0310 	add.w	r3, r7, #16
 80008c2:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80008c4:	f000 fb7e 	bl	8000fc4 <HAL_Init>
  SystemClock_Config();
 80008c8:	f000 f95e 	bl	8000b88 <SystemClock_Config>
  MX_GPIO_Init();
 80008cc:	f000 f9f4 	bl	8000cb8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008d0:	f000 f9c8 	bl	8000c64 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, R1_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2120      	movs	r1, #32
 80008d8:	48aa      	ldr	r0, [pc, #680]	@ (8000b84 <main+0x2cc>)
 80008da:	f000 fe9b 	bl	8001614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, R2_Pin, SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	2140      	movs	r1, #64	@ 0x40
 80008e2:	48a8      	ldr	r0, [pc, #672]	@ (8000b84 <main+0x2cc>)
 80008e4:	f000 fe96 	bl	8001614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, R3_Pin, SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2180      	movs	r1, #128	@ 0x80
 80008ec:	48a5      	ldr	r0, [pc, #660]	@ (8000b84 <main+0x2cc>)
 80008ee:	f000 fe91 	bl	8001614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, R4_Pin, SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008f8:	48a2      	ldr	r0, [pc, #648]	@ (8000b84 <main+0x2cc>)
 80008fa:	f000 fe8b 	bl	8001614 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, R4_Pin, RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000904:	489f      	ldr	r0, [pc, #636]	@ (8000b84 <main+0x2cc>)
 8000906:	f000 fe85 	bl	8001614 <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOB, C4_Pin))
 800090a:	2101      	movs	r1, #1
 800090c:	489d      	ldr	r0, [pc, #628]	@ (8000b84 <main+0x2cc>)
 800090e:	f000 fe69 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d10a      	bne.n	800092e <main+0x76>
	  {
		  seven_Seg(1);
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	469c      	mov	ip, r3
 800091c:	2001      	movs	r0, #1
 800091e:	f7ff fe07 	bl	8000530 <seven_Seg.0>
		  blink(1);
 8000922:	2001      	movs	r0, #1
 8000924:	f7ff fde6 	bl	80004f4 <blink>
		  HAL_Delay(200);
 8000928:	20c8      	movs	r0, #200	@ 0xc8
 800092a:	f000 fbbd 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C3_Pin))
 800092e:	2102      	movs	r1, #2
 8000930:	4894      	ldr	r0, [pc, #592]	@ (8000b84 <main+0x2cc>)
 8000932:	f000 fe57 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10a      	bne.n	8000952 <main+0x9a>
	  {
		  blink(2);
 800093c:	2002      	movs	r0, #2
 800093e:	f7ff fdd9 	bl	80004f4 <blink>
		  seven_Seg(2);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	469c      	mov	ip, r3
 8000946:	2002      	movs	r0, #2
 8000948:	f7ff fdf2 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 800094c:	20c8      	movs	r0, #200	@ 0xc8
 800094e:	f000 fbab 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C2_Pin))
 8000952:	2104      	movs	r1, #4
 8000954:	488b      	ldr	r0, [pc, #556]	@ (8000b84 <main+0x2cc>)
 8000956:	f000 fe45 	bl	80015e4 <HAL_GPIO_ReadPin>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d10a      	bne.n	8000976 <main+0xbe>
	  {
		  blink(3);
 8000960:	2003      	movs	r0, #3
 8000962:	f7ff fdc7 	bl	80004f4 <blink>
		  seven_Seg(3);
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	469c      	mov	ip, r3
 800096a:	2003      	movs	r0, #3
 800096c:	f7ff fde0 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000970:	20c8      	movs	r0, #200	@ 0xc8
 8000972:	f000 fb99 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C1_Pin))
 8000976:	2110      	movs	r1, #16
 8000978:	4882      	ldr	r0, [pc, #520]	@ (8000b84 <main+0x2cc>)
 800097a:	f000 fe33 	bl	80015e4 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10a      	bne.n	800099a <main+0xe2>
	  {
		  blink(1);
 8000984:	2001      	movs	r0, #1
 8000986:	f7ff fdb5 	bl	80004f4 <blink>
		  seven_Seg(1);
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	469c      	mov	ip, r3
 800098e:	2001      	movs	r0, #1
 8000990:	f7ff fdce 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000994:	20c8      	movs	r0, #200	@ 0xc8
 8000996:	f000 fb87 	bl	80010a8 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, R4_Pin, SET);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009a0:	4878      	ldr	r0, [pc, #480]	@ (8000b84 <main+0x2cc>)
 80009a2:	f000 fe37 	bl	8001614 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, R3_Pin, RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2180      	movs	r1, #128	@ 0x80
 80009aa:	4876      	ldr	r0, [pc, #472]	@ (8000b84 <main+0x2cc>)
 80009ac:	f000 fe32 	bl	8001614 <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOB, C4_Pin))
 80009b0:	2101      	movs	r1, #1
 80009b2:	4874      	ldr	r0, [pc, #464]	@ (8000b84 <main+0x2cc>)
 80009b4:	f000 fe16 	bl	80015e4 <HAL_GPIO_ReadPin>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d10a      	bne.n	80009d4 <main+0x11c>
	  {
		  blink(4);
 80009be:	2004      	movs	r0, #4
 80009c0:	f7ff fd98 	bl	80004f4 <blink>
		  seven_Seg(4);
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	469c      	mov	ip, r3
 80009c8:	2004      	movs	r0, #4
 80009ca:	f7ff fdb1 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 80009ce:	20c8      	movs	r0, #200	@ 0xc8
 80009d0:	f000 fb6a 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C3_Pin))
 80009d4:	2102      	movs	r1, #2
 80009d6:	486b      	ldr	r0, [pc, #428]	@ (8000b84 <main+0x2cc>)
 80009d8:	f000 fe04 	bl	80015e4 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d10a      	bne.n	80009f8 <main+0x140>
	  {
		  blink(5);
 80009e2:	2005      	movs	r0, #5
 80009e4:	f7ff fd86 	bl	80004f4 <blink>
		  seven_Seg(5);
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	469c      	mov	ip, r3
 80009ec:	2005      	movs	r0, #5
 80009ee:	f7ff fd9f 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 80009f2:	20c8      	movs	r0, #200	@ 0xc8
 80009f4:	f000 fb58 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C2_Pin))
 80009f8:	2104      	movs	r1, #4
 80009fa:	4862      	ldr	r0, [pc, #392]	@ (8000b84 <main+0x2cc>)
 80009fc:	f000 fdf2 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d10a      	bne.n	8000a1c <main+0x164>
	  {
		  blink(6);
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff fd74 	bl	80004f4 <blink>
		  seven_Seg(6);
 8000a0c:	1d3b      	adds	r3, r7, #4
 8000a0e:	469c      	mov	ip, r3
 8000a10:	2006      	movs	r0, #6
 8000a12:	f7ff fd8d 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000a16:	20c8      	movs	r0, #200	@ 0xc8
 8000a18:	f000 fb46 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C1_Pin))
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	4859      	ldr	r0, [pc, #356]	@ (8000b84 <main+0x2cc>)
 8000a20:	f000 fde0 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10a      	bne.n	8000a40 <main+0x188>
	  {
		  blink(4);
 8000a2a:	2004      	movs	r0, #4
 8000a2c:	f7ff fd62 	bl	80004f4 <blink>
		  seven_Seg(4);
 8000a30:	1d3b      	adds	r3, r7, #4
 8000a32:	469c      	mov	ip, r3
 8000a34:	2004      	movs	r0, #4
 8000a36:	f7ff fd7b 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000a3a:	20c8      	movs	r0, #200	@ 0xc8
 8000a3c:	f000 fb34 	bl	80010a8 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, R3_Pin, SET);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2180      	movs	r1, #128	@ 0x80
 8000a44:	484f      	ldr	r0, [pc, #316]	@ (8000b84 <main+0x2cc>)
 8000a46:	f000 fde5 	bl	8001614 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, R2_Pin, RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	484d      	ldr	r0, [pc, #308]	@ (8000b84 <main+0x2cc>)
 8000a50:	f000 fde0 	bl	8001614 <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOB, C4_Pin))
 8000a54:	2101      	movs	r1, #1
 8000a56:	484b      	ldr	r0, [pc, #300]	@ (8000b84 <main+0x2cc>)
 8000a58:	f000 fdc4 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d10a      	bne.n	8000a78 <main+0x1c0>
	  {
		  blink(7);
 8000a62:	2007      	movs	r0, #7
 8000a64:	f7ff fd46 	bl	80004f4 <blink>
		  seven_Seg(7);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	2007      	movs	r0, #7
 8000a6e:	f7ff fd5f 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000a72:	20c8      	movs	r0, #200	@ 0xc8
 8000a74:	f000 fb18 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C3_Pin))
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4842      	ldr	r0, [pc, #264]	@ (8000b84 <main+0x2cc>)
 8000a7c:	f000 fdb2 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d10a      	bne.n	8000a9c <main+0x1e4>
	  {
		  blink(8);
 8000a86:	2008      	movs	r0, #8
 8000a88:	f7ff fd34 	bl	80004f4 <blink>
		  seven_Seg(8);
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	469c      	mov	ip, r3
 8000a90:	2008      	movs	r0, #8
 8000a92:	f7ff fd4d 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000a96:	20c8      	movs	r0, #200	@ 0xc8
 8000a98:	f000 fb06 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C2_Pin))
 8000a9c:	2104      	movs	r1, #4
 8000a9e:	4839      	ldr	r0, [pc, #228]	@ (8000b84 <main+0x2cc>)
 8000aa0:	f000 fda0 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d10a      	bne.n	8000ac0 <main+0x208>
	  {
		  blink(9);
 8000aaa:	2009      	movs	r0, #9
 8000aac:	f7ff fd22 	bl	80004f4 <blink>
		  seven_Seg(9);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	469c      	mov	ip, r3
 8000ab4:	2009      	movs	r0, #9
 8000ab6:	f7ff fd3b 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000aba:	20c8      	movs	r0, #200	@ 0xc8
 8000abc:	f000 faf4 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C1_Pin))
 8000ac0:	2110      	movs	r1, #16
 8000ac2:	4830      	ldr	r0, [pc, #192]	@ (8000b84 <main+0x2cc>)
 8000ac4:	f000 fd8e 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10a      	bne.n	8000ae4 <main+0x22c>
	  {
		  blink(7);
 8000ace:	2007      	movs	r0, #7
 8000ad0:	f7ff fd10 	bl	80004f4 <blink>
		  seven_Seg(7);
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	469c      	mov	ip, r3
 8000ad8:	2007      	movs	r0, #7
 8000ada:	f7ff fd29 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000ade:	20c8      	movs	r0, #200	@ 0xc8
 8000ae0:	f000 fae2 	bl	80010a8 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, R2_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	2140      	movs	r1, #64	@ 0x40
 8000ae8:	4826      	ldr	r0, [pc, #152]	@ (8000b84 <main+0x2cc>)
 8000aea:	f000 fd93 	bl	8001614 <HAL_GPIO_WritePin>

	  HAL_GPIO_WritePin(GPIOB, R1_Pin, RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	2120      	movs	r1, #32
 8000af2:	4824      	ldr	r0, [pc, #144]	@ (8000b84 <main+0x2cc>)
 8000af4:	f000 fd8e 	bl	8001614 <HAL_GPIO_WritePin>
	  if(!HAL_GPIO_ReadPin(GPIOB, C4_Pin))
 8000af8:	2101      	movs	r1, #1
 8000afa:	4822      	ldr	r0, [pc, #136]	@ (8000b84 <main+0x2cc>)
 8000afc:	f000 fd72 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d10a      	bne.n	8000b1c <main+0x264>
	  {
		  blink(0);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fcf4 	bl	80004f4 <blink>
		  seven_Seg(0);
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	469c      	mov	ip, r3
 8000b10:	2000      	movs	r0, #0
 8000b12:	f7ff fd0d 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000b16:	20c8      	movs	r0, #200	@ 0xc8
 8000b18:	f000 fac6 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C3_Pin))
 8000b1c:	2102      	movs	r1, #2
 8000b1e:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <main+0x2cc>)
 8000b20:	f000 fd60 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d107      	bne.n	8000b3a <main+0x282>
	  {
		  seven_Seg(0);
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	469c      	mov	ip, r3
 8000b2e:	2000      	movs	r0, #0
 8000b30:	f7ff fcfe 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000b34:	20c8      	movs	r0, #200	@ 0xc8
 8000b36:	f000 fab7 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C2_Pin))
 8000b3a:	2104      	movs	r1, #4
 8000b3c:	4811      	ldr	r0, [pc, #68]	@ (8000b84 <main+0x2cc>)
 8000b3e:	f000 fd51 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d107      	bne.n	8000b58 <main+0x2a0>
	  {
		  seven_Seg(0);
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	469c      	mov	ip, r3
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	f7ff fcef 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000b52:	20c8      	movs	r0, #200	@ 0xc8
 8000b54:	f000 faa8 	bl	80010a8 <HAL_Delay>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOB, C1_Pin))
 8000b58:	2110      	movs	r1, #16
 8000b5a:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <main+0x2cc>)
 8000b5c:	f000 fd42 	bl	80015e4 <HAL_GPIO_ReadPin>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d107      	bne.n	8000b76 <main+0x2be>
	  {
		  seven_Seg(0);
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	469c      	mov	ip, r3
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f7ff fce0 	bl	8000530 <seven_Seg.0>
		  HAL_Delay(200);
 8000b70:	20c8      	movs	r0, #200	@ 0xc8
 8000b72:	f000 fa99 	bl	80010a8 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, R1_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2120      	movs	r1, #32
 8000b7a:	4802      	ldr	r0, [pc, #8]	@ (8000b84 <main+0x2cc>)
 8000b7c:	f000 fd4a 	bl	8001614 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, R1_Pin, SET);
 8000b80:	e6a8      	b.n	80008d4 <main+0x1c>
 8000b82:	bf00      	nop
 8000b84:	40020400 	.word	0x40020400

08000b88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b094      	sub	sp, #80	@ 0x50
 8000b8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	2234      	movs	r2, #52	@ 0x34
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 fe1c 	bl	80027d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b9c:	f107 0308 	add.w	r3, r7, #8
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	601a      	str	r2, [r3, #0]
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	609a      	str	r2, [r3, #8]
 8000ba8:	60da      	str	r2, [r3, #12]
 8000baa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	4a29      	ldr	r2, [pc, #164]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bb6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bbc:	4b27      	ldr	r3, [pc, #156]	@ (8000c5c <SystemClock_Config+0xd4>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	4b24      	ldr	r3, [pc, #144]	@ (8000c60 <SystemClock_Config+0xd8>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bd4:	4a22      	ldr	r2, [pc, #136]	@ (8000c60 <SystemClock_Config+0xd8>)
 8000bd6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bda:	6013      	str	r3, [r2, #0]
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <SystemClock_Config+0xd8>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be8:	2302      	movs	r3, #2
 8000bea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bec:	2301      	movs	r3, #1
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bfc:	2310      	movs	r3, #16
 8000bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c00:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c06:	2304      	movs	r3, #4
 8000c08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c12:	f107 031c 	add.w	r3, r7, #28
 8000c16:	4618      	mov	r0, r3
 8000c18:	f001 f87a 	bl	8001d10 <HAL_RCC_OscConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c22:	f000 f8ed 	bl	8000e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c26:	230f      	movs	r3, #15
 8000c28:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c3c:	f107 0308 	add.w	r3, r7, #8
 8000c40:	2102      	movs	r1, #2
 8000c42:	4618      	mov	r0, r3
 8000c44:	f000 fd1a 	bl	800167c <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c4e:	f000 f8d7 	bl	8000e00 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	@ 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	4a12      	ldr	r2, [pc, #72]	@ (8000cb4 <MX_USART2_UART_Init+0x50>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b09      	ldr	r3, [pc, #36]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	@ (8000cb0 <MX_USART2_UART_Init+0x4c>)
 8000c9c:	f001 fad6 	bl	800224c <HAL_UART_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ca6:	f000 f8ab 	bl	8000e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000028 	.word	0x20000028
 8000cb4:	40004400 	.word	0x40004400

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b47      	ldr	r3, [pc, #284]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a46      	ldr	r2, [pc, #280]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b44      	ldr	r3, [pc, #272]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a3f      	ldr	r2, [pc, #252]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b39      	ldr	r3, [pc, #228]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a38      	ldr	r2, [pc, #224]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b36      	ldr	r3, [pc, #216]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a31      	ldr	r2, [pc, #196]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <MX_GPIO_Init+0x138>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d3e:	2200      	movs	r2, #0
 8000d40:	21ff      	movs	r1, #255	@ 0xff
 8000d42:	482c      	ldr	r0, [pc, #176]	@ (8000df4 <MX_GPIO_Init+0x13c>)
 8000d44:	f000 fc66 	bl	8001614 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2120      	movs	r1, #32
 8000d4c:	482a      	ldr	r0, [pc, #168]	@ (8000df8 <MX_GPIO_Init+0x140>)
 8000d4e:	f000 fc61 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, R1_Pin|R2_Pin|R3_Pin|R4_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 8000d58:	4828      	ldr	r0, [pc, #160]	@ (8000dfc <MX_GPIO_Init+0x144>)
 8000d5a:	f000 fc5b 	bl	8001614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000d68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <MX_GPIO_Init+0x13c>)
 8000d76:	f000 faa1 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4818      	ldr	r0, [pc, #96]	@ (8000df4 <MX_GPIO_Init+0x13c>)
 8000d92:	f000 fa93 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d96:	2320      	movs	r3, #32
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	4619      	mov	r1, r3
 8000dac:	4812      	ldr	r0, [pc, #72]	@ (8000df8 <MX_GPIO_Init+0x140>)
 8000dae:	f000 fa85 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : C4_Pin C3_Pin C2_Pin C1_Pin */
  GPIO_InitStruct.Pin = C4_Pin|C3_Pin|C2_Pin|C1_Pin;
 8000db2:	2317      	movs	r3, #23
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	@ (8000dfc <MX_GPIO_Init+0x144>)
 8000dc6:	f000 fa79 	bl	80012bc <HAL_GPIO_Init>

  /*Configure GPIO pins : R1_Pin R2_Pin R3_Pin R4_Pin */
  GPIO_InitStruct.Pin = R1_Pin|R2_Pin|R3_Pin|R4_Pin;
 8000dca:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4806      	ldr	r0, [pc, #24]	@ (8000dfc <MX_GPIO_Init+0x144>)
 8000de4:	f000 fa6a 	bl	80012bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000de8:	bf00      	nop
 8000dea:	3728      	adds	r7, #40	@ 0x28
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020800 	.word	0x40020800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40020400 	.word	0x40020400

08000e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e04:	b672      	cpsid	i
}
 8000e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <Error_Handler+0x8>

08000e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	603b      	str	r3, [r7, #0]
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <HAL_MspInit+0x4c>)
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e4a:	2007      	movs	r0, #7
 8000e4c:	f000 fa02 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800

08000e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	@ 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a19      	ldr	r2, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0x84>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12b      	bne.n	8000ed6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b18      	ldr	r3, [pc, #96]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	4a17      	ldr	r2, [pc, #92]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a10      	ldr	r2, [pc, #64]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <HAL_UART_MspInit+0x88>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eca:	f107 0314 	add.w	r3, r7, #20
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <HAL_UART_MspInit+0x8c>)
 8000ed2:	f000 f9f3 	bl	80012bc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3728      	adds	r7, #40	@ 0x28
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40004400 	.word	0x40004400
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020000 	.word	0x40020000

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <HardFault_Handler+0x4>

08000efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f00:	bf00      	nop
 8000f02:	e7fd      	b.n	8000f00 <MemManage_Handler+0x4>

08000f04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f08:	bf00      	nop
 8000f0a:	e7fd      	b.n	8000f08 <BusFault_Handler+0x4>

08000f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f10:	bf00      	nop
 8000f12:	e7fd      	b.n	8000f10 <UsageFault_Handler+0x4>

08000f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f42:	f000 f891 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
	...

08000f4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f50:	4b06      	ldr	r3, [pc, #24]	@ (8000f6c <SystemInit+0x20>)
 8000f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f56:	4a05      	ldr	r2, [pc, #20]	@ (8000f6c <SystemInit+0x20>)
 8000f58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f74:	f7ff ffea 	bl	8000f4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480c      	ldr	r0, [pc, #48]	@ (8000fac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f7a:	490d      	ldr	r1, [pc, #52]	@ (8000fb0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f90:	4c0a      	ldr	r4, [pc, #40]	@ (8000fbc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000f9e:	f001 fc21 	bl	80027e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa2:	f7ff fc89 	bl	80008b8 <main>
  bx  lr    
 8000fa6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fb4:	0800286c 	.word	0x0800286c
  ldr r2, =_sbss
 8000fb8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fbc:	20000074 	.word	0x20000074

08000fc0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc0:	e7fe      	b.n	8000fc0 <ADC_IRQHandler>
	...

08000fc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001004 <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <HAL_Init+0x40>)
 8000fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8001004 <HAL_Init+0x40>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001004 <HAL_Init+0x40>)
 8000fda:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000fde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <HAL_Init+0x40>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a07      	ldr	r2, [pc, #28]	@ (8001004 <HAL_Init+0x40>)
 8000fe6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 f931 	bl	8001254 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	f000 f808 	bl	8001008 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff8:	f7ff ff08 	bl	8000e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023c00 	.word	0x40023c00

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001010:	4b12      	ldr	r3, [pc, #72]	@ (800105c <HAL_InitTick+0x54>)
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <HAL_InitTick+0x58>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001022:	fbb2 f3f3 	udiv	r3, r2, r3
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f93b 	bl	80012a2 <HAL_SYSTICK_Config>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e00e      	b.n	8001054 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b0f      	cmp	r3, #15
 800103a:	d80a      	bhi.n	8001052 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103c:	2200      	movs	r2, #0
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f000 f911 	bl	800126a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4a06      	ldr	r2, [pc, #24]	@ (8001064 <HAL_InitTick+0x5c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <HAL_IncTick+0x20>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_IncTick+0x24>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4413      	add	r3, r2
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_IncTick+0x24>)
 800107a:	6013      	str	r3, [r2, #0]
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008
 800108c:	20000070 	.word	0x20000070

08001090 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  return uwTick;
 8001094:	4b03      	ldr	r3, [pc, #12]	@ (80010a4 <HAL_GetTick+0x14>)
 8001096:	681b      	ldr	r3, [r3, #0]
}
 8001098:	4618      	mov	r0, r3
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	20000070 	.word	0x20000070

080010a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b0:	f7ff ffee 	bl	8001090 <HAL_GetTick>
 80010b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c0:	d005      	beq.n	80010ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c2:	4b0a      	ldr	r3, [pc, #40]	@ (80010ec <HAL_Delay+0x44>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	461a      	mov	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4413      	add	r3, r2
 80010cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010ce:	bf00      	nop
 80010d0:	f7ff ffde 	bl	8001090 <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	68fa      	ldr	r2, [r7, #12]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8f7      	bhi.n	80010d0 <HAL_Delay+0x28>
  {
  }
}
 80010e0:	bf00      	nop
 80010e2:	bf00      	nop
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000008 	.word	0x20000008

080010f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f003 0307 	and.w	r3, r3, #7
 80010fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001100:	4b0c      	ldr	r3, [pc, #48]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800110c:	4013      	ands	r3, r2
 800110e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001118:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800111c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001122:	4a04      	ldr	r2, [pc, #16]	@ (8001134 <__NVIC_SetPriorityGrouping+0x44>)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	60d3      	str	r3, [r2, #12]
}
 8001128:	bf00      	nop
 800112a:	3714      	adds	r7, #20
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <__NVIC_GetPriorityGrouping+0x18>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	f003 0307 	and.w	r3, r3, #7
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	6039      	str	r1, [r7, #0]
 800115e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	db0a      	blt.n	800117e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	b2da      	uxtb	r2, r3
 800116c:	490c      	ldr	r1, [pc, #48]	@ (80011a0 <__NVIC_SetPriority+0x4c>)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	0112      	lsls	r2, r2, #4
 8001174:	b2d2      	uxtb	r2, r2
 8001176:	440b      	add	r3, r1
 8001178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800117c:	e00a      	b.n	8001194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	b2da      	uxtb	r2, r3
 8001182:	4908      	ldr	r1, [pc, #32]	@ (80011a4 <__NVIC_SetPriority+0x50>)
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	3b04      	subs	r3, #4
 800118c:	0112      	lsls	r2, r2, #4
 800118e:	b2d2      	uxtb	r2, r2
 8001190:	440b      	add	r3, r1
 8001192:	761a      	strb	r2, [r3, #24]
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b089      	sub	sp, #36	@ 0x24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f1c3 0307 	rsb	r3, r3, #7
 80011c2:	2b04      	cmp	r3, #4
 80011c4:	bf28      	it	cs
 80011c6:	2304      	movcs	r3, #4
 80011c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	3304      	adds	r3, #4
 80011ce:	2b06      	cmp	r3, #6
 80011d0:	d902      	bls.n	80011d8 <NVIC_EncodePriority+0x30>
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3b03      	subs	r3, #3
 80011d6:	e000      	b.n	80011da <NVIC_EncodePriority+0x32>
 80011d8:	2300      	movs	r3, #0
 80011da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	f04f 32ff 	mov.w	r2, #4294967295
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	43da      	mvns	r2, r3
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	401a      	ands	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f0:	f04f 31ff 	mov.w	r1, #4294967295
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	43d9      	mvns	r1, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001200:	4313      	orrs	r3, r2
         );
}
 8001202:	4618      	mov	r0, r3
 8001204:	3724      	adds	r7, #36	@ 0x24
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3b01      	subs	r3, #1
 800121c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001220:	d301      	bcc.n	8001226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001222:	2301      	movs	r3, #1
 8001224:	e00f      	b.n	8001246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <SysTick_Config+0x40>)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	3b01      	subs	r3, #1
 800122c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800122e:	210f      	movs	r1, #15
 8001230:	f04f 30ff 	mov.w	r0, #4294967295
 8001234:	f7ff ff8e 	bl	8001154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001238:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <SysTick_Config+0x40>)
 800123a:	2200      	movs	r2, #0
 800123c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800123e:	4b04      	ldr	r3, [pc, #16]	@ (8001250 <SysTick_Config+0x40>)
 8001240:	2207      	movs	r2, #7
 8001242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	e000e010 	.word	0xe000e010

08001254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff ff47 	bl	80010f0 <__NVIC_SetPriorityGrouping>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800126a:	b580      	push	{r7, lr}
 800126c:	b086      	sub	sp, #24
 800126e:	af00      	add	r7, sp, #0
 8001270:	4603      	mov	r3, r0
 8001272:	60b9      	str	r1, [r7, #8]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001278:	2300      	movs	r3, #0
 800127a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800127c:	f7ff ff5c 	bl	8001138 <__NVIC_GetPriorityGrouping>
 8001280:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	6978      	ldr	r0, [r7, #20]
 8001288:	f7ff ff8e 	bl	80011a8 <NVIC_EncodePriority>
 800128c:	4602      	mov	r2, r0
 800128e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001292:	4611      	mov	r1, r2
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff5d 	bl	8001154 <__NVIC_SetPriority>
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffb0 	bl	8001210 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012bc:	b480      	push	{r7}
 80012be:	b089      	sub	sp, #36	@ 0x24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	e165      	b.n	80015a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012d8:	2201      	movs	r2, #1
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	697a      	ldr	r2, [r7, #20]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012ec:	693a      	ldr	r2, [r7, #16]
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f040 8154 	bne.w	800159e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d005      	beq.n	800130e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130a:	2b02      	cmp	r3, #2
 800130c:	d130      	bne.n	8001370 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	005b      	lsls	r3, r3, #1
 8001318:	2203      	movs	r2, #3
 800131a:	fa02 f303 	lsl.w	r3, r2, r3
 800131e:	43db      	mvns	r3, r3
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	4013      	ands	r3, r2
 8001324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4313      	orrs	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	4013      	ands	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	4013      	ands	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	69fb      	ldr	r3, [r7, #28]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	69b9      	ldr	r1, [r7, #24]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ae 	beq.w	800159e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b5d      	ldr	r3, [pc, #372]	@ (80015bc <HAL_GPIO_Init+0x300>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a5c      	ldr	r2, [pc, #368]	@ (80015bc <HAL_GPIO_Init+0x300>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b5a      	ldr	r3, [pc, #360]	@ (80015bc <HAL_GPIO_Init+0x300>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800145e:	4a58      	ldr	r2, [pc, #352]	@ (80015c0 <HAL_GPIO_Init+0x304>)
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	089b      	lsrs	r3, r3, #2
 8001464:	3302      	adds	r3, #2
 8001466:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0303 	and.w	r3, r3, #3
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	220f      	movs	r2, #15
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43db      	mvns	r3, r3
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	4013      	ands	r3, r2
 8001480:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4f      	ldr	r2, [pc, #316]	@ (80015c4 <HAL_GPIO_Init+0x308>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d025      	beq.n	80014d6 <HAL_GPIO_Init+0x21a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4e      	ldr	r2, [pc, #312]	@ (80015c8 <HAL_GPIO_Init+0x30c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d01f      	beq.n	80014d2 <HAL_GPIO_Init+0x216>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4d      	ldr	r2, [pc, #308]	@ (80015cc <HAL_GPIO_Init+0x310>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d019      	beq.n	80014ce <HAL_GPIO_Init+0x212>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4c      	ldr	r2, [pc, #304]	@ (80015d0 <HAL_GPIO_Init+0x314>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d013      	beq.n	80014ca <HAL_GPIO_Init+0x20e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <HAL_GPIO_Init+0x318>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d00d      	beq.n	80014c6 <HAL_GPIO_Init+0x20a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4a      	ldr	r2, [pc, #296]	@ (80015d8 <HAL_GPIO_Init+0x31c>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d007      	beq.n	80014c2 <HAL_GPIO_Init+0x206>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a49      	ldr	r2, [pc, #292]	@ (80015dc <HAL_GPIO_Init+0x320>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_GPIO_Init+0x202>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00c      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014be:	2307      	movs	r3, #7
 80014c0:	e00a      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014c2:	2305      	movs	r3, #5
 80014c4:	e008      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014c6:	2304      	movs	r3, #4
 80014c8:	e006      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014ca:	2303      	movs	r3, #3
 80014cc:	e004      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e002      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_GPIO_Init+0x21c>
 80014d6:	2300      	movs	r3, #0
 80014d8:	69fa      	ldr	r2, [r7, #28]
 80014da:	f002 0203 	and.w	r2, r2, #3
 80014de:	0092      	lsls	r2, r2, #2
 80014e0:	4093      	lsls	r3, r2
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e8:	4935      	ldr	r1, [pc, #212]	@ (80015c0 <HAL_GPIO_Init+0x304>)
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f6:	4b3a      	ldr	r3, [pc, #232]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d003      	beq.n	800151a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	4313      	orrs	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800151a:	4a31      	ldr	r2, [pc, #196]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001520:	4b2f      	ldr	r3, [pc, #188]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	43db      	mvns	r3, r3
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	4013      	ands	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d003      	beq.n	8001544 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800153c:	69ba      	ldr	r2, [r7, #24]
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	4313      	orrs	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001544:	4a26      	ldr	r2, [pc, #152]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800154a:	4b25      	ldr	r3, [pc, #148]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	43db      	mvns	r3, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4013      	ands	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001566:	69ba      	ldr	r2, [r7, #24]
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4313      	orrs	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156e:	4a1c      	ldr	r2, [pc, #112]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001574:	4b1a      	ldr	r3, [pc, #104]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	43db      	mvns	r3, r3
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	4013      	ands	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d003      	beq.n	8001598 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001598:	4a11      	ldr	r2, [pc, #68]	@ (80015e0 <HAL_GPIO_Init+0x324>)
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3301      	adds	r3, #1
 80015a2:	61fb      	str	r3, [r7, #28]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	2b0f      	cmp	r3, #15
 80015a8:	f67f ae96 	bls.w	80012d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015ac:	bf00      	nop
 80015ae:	bf00      	nop
 80015b0:	3724      	adds	r7, #36	@ 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40013800 	.word	0x40013800
 80015c4:	40020000 	.word	0x40020000
 80015c8:	40020400 	.word	0x40020400
 80015cc:	40020800 	.word	0x40020800
 80015d0:	40020c00 	.word	0x40020c00
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40021400 	.word	0x40021400
 80015dc:	40021800 	.word	0x40021800
 80015e0:	40013c00 	.word	0x40013c00

080015e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691a      	ldr	r2, [r3, #16]
 80015f4:	887b      	ldrh	r3, [r7, #2]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d002      	beq.n	8001602 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
 8001600:	e001      	b.n	8001606 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001606:	7bfb      	ldrb	r3, [r7, #15]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	460b      	mov	r3, r1
 800161e:	807b      	strh	r3, [r7, #2]
 8001620:	4613      	mov	r3, r2
 8001622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001624:	787b      	ldrb	r3, [r7, #1]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800162a:	887a      	ldrh	r2, [r7, #2]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001630:	e003      	b.n	800163a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001632:	887b      	ldrh	r3, [r7, #2]
 8001634:	041a      	lsls	r2, r3, #16
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	619a      	str	r2, [r3, #24]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	460b      	mov	r3, r1
 8001650:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001658:	887a      	ldrh	r2, [r7, #2]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	041a      	lsls	r2, r3, #16
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	43d9      	mvns	r1, r3
 8001664:	887b      	ldrh	r3, [r7, #2]
 8001666:	400b      	ands	r3, r1
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	619a      	str	r2, [r3, #24]
}
 800166e:	bf00      	nop
 8001670:	3714      	adds	r7, #20
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
	...

0800167c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0cc      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001690:	4b68      	ldr	r3, [pc, #416]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d90c      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b65      	ldr	r3, [pc, #404]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80016da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	4a52      	ldr	r2, [pc, #328]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80016f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	4313      	orrs	r3, r2
 8001704:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d044      	beq.n	800179c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d119      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d003      	beq.n	800173a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001736:	2b03      	cmp	r3, #3
 8001738:	d107      	bne.n	800174a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800173a:	4b3f      	ldr	r3, [pc, #252]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d109      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e06f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	4b3b      	ldr	r3, [pc, #236]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e067      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800175a:	4b37      	ldr	r3, [pc, #220]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f023 0203 	bic.w	r2, r3, #3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4934      	ldr	r1, [pc, #208]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	4313      	orrs	r3, r2
 800176a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800176c:	f7ff fc90 	bl	8001090 <HAL_GetTick>
 8001770:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001772:	e00a      	b.n	800178a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7ff fc8c 	bl	8001090 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001782:	4293      	cmp	r3, r2
 8001784:	d901      	bls.n	800178a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e04f      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178a:	4b2b      	ldr	r3, [pc, #172]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 020c 	and.w	r2, r3, #12
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	429a      	cmp	r2, r3
 800179a:	d1eb      	bne.n	8001774 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800179c:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 030f 	and.w	r3, r3, #15
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d20c      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	@ (8001834 <HAL_RCC_ClockConfig+0x1b8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f855 	bl	80018b0 <HAL_RCC_GetSysClockFreq>
 8001806:	4602      	mov	r2, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	@ (8001838 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	490a      	ldr	r1, [pc, #40]	@ (800183c <HAL_RCC_ClockConfig+0x1c0>)
 8001814:	5ccb      	ldrb	r3, [r1, r3]
 8001816:	fa22 f303 	lsr.w	r3, r2, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	@ (8001840 <HAL_RCC_ClockConfig+0x1c4>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	@ (8001844 <HAL_RCC_ClockConfig+0x1c8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fbf0 	bl	8001008 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023c00 	.word	0x40023c00
 8001838:	40023800 	.word	0x40023800
 800183c:	08002844 	.word	0x08002844
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800184c:	4b03      	ldr	r3, [pc, #12]	@ (800185c <HAL_RCC_GetHCLKFreq+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000000 	.word	0x20000000

08001860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001864:	f7ff fff0 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 8001868:	4602      	mov	r2, r0
 800186a:	4b05      	ldr	r3, [pc, #20]	@ (8001880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	0a9b      	lsrs	r3, r3, #10
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	4903      	ldr	r1, [pc, #12]	@ (8001884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001876:	5ccb      	ldrb	r3, [r1, r3]
 8001878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800187c:	4618      	mov	r0, r3
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	08002854 	.word	0x08002854

08001888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800188c:	f7ff ffdc 	bl	8001848 <HAL_RCC_GetHCLKFreq>
 8001890:	4602      	mov	r2, r0
 8001892:	4b05      	ldr	r3, [pc, #20]	@ (80018a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001894:	689b      	ldr	r3, [r3, #8]
 8001896:	0b5b      	lsrs	r3, r3, #13
 8001898:	f003 0307 	and.w	r3, r3, #7
 800189c:	4903      	ldr	r1, [pc, #12]	@ (80018ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800189e:	5ccb      	ldrb	r3, [r1, r3]
 80018a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	40023800 	.word	0x40023800
 80018ac:	08002854 	.word	0x08002854

080018b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b4:	b0ae      	sub	sp, #184	@ 0xb8
 80018b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018b8:	2300      	movs	r3, #0
 80018ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018d6:	4bcb      	ldr	r3, [pc, #812]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	f200 8206 	bhi.w	8001cf0 <HAL_RCC_GetSysClockFreq+0x440>
 80018e4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80018e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ea:	bf00      	nop
 80018ec:	08001921 	.word	0x08001921
 80018f0:	08001cf1 	.word	0x08001cf1
 80018f4:	08001cf1 	.word	0x08001cf1
 80018f8:	08001cf1 	.word	0x08001cf1
 80018fc:	08001929 	.word	0x08001929
 8001900:	08001cf1 	.word	0x08001cf1
 8001904:	08001cf1 	.word	0x08001cf1
 8001908:	08001cf1 	.word	0x08001cf1
 800190c:	08001931 	.word	0x08001931
 8001910:	08001cf1 	.word	0x08001cf1
 8001914:	08001cf1 	.word	0x08001cf1
 8001918:	08001cf1 	.word	0x08001cf1
 800191c:	08001b21 	.word	0x08001b21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4bb9      	ldr	r3, [pc, #740]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x358>)
 8001922:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001926:	e1e7      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001928:	4bb8      	ldr	r3, [pc, #736]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800192a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800192e:	e1e3      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4bb4      	ldr	r3, [pc, #720]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800193c:	4bb1      	ldr	r3, [pc, #708]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d071      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001948:	4bae      	ldr	r3, [pc, #696]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	099b      	lsrs	r3, r3, #6
 800194e:	2200      	movs	r2, #0
 8001950:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001954:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001958:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800195c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001960:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800196a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800196e:	4622      	mov	r2, r4
 8001970:	462b      	mov	r3, r5
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4621      	mov	r1, r4
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	6439      	str	r1, [r7, #64]	@ 0x40
 800198c:	4629      	mov	r1, r5
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	647b      	str	r3, [r7, #68]	@ 0x44
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80019a0:	4649      	mov	r1, r9
 80019a2:	018b      	lsls	r3, r1, #6
 80019a4:	4641      	mov	r1, r8
 80019a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019aa:	4641      	mov	r1, r8
 80019ac:	018a      	lsls	r2, r1, #6
 80019ae:	4641      	mov	r1, r8
 80019b0:	1a51      	subs	r1, r2, r1
 80019b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019b4:	4649      	mov	r1, r9
 80019b6:	eb63 0301 	sbc.w	r3, r3, r1
 80019ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80019c8:	4649      	mov	r1, r9
 80019ca:	00cb      	lsls	r3, r1, #3
 80019cc:	4641      	mov	r1, r8
 80019ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019d2:	4641      	mov	r1, r8
 80019d4:	00ca      	lsls	r2, r1, #3
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	4603      	mov	r3, r0
 80019dc:	4622      	mov	r2, r4
 80019de:	189b      	adds	r3, r3, r2
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e2:	462b      	mov	r3, r5
 80019e4:	460a      	mov	r2, r1
 80019e6:	eb42 0303 	adc.w	r3, r2, r3
 80019ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019f8:	4629      	mov	r1, r5
 80019fa:	024b      	lsls	r3, r1, #9
 80019fc:	4621      	mov	r1, r4
 80019fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a02:	4621      	mov	r1, r4
 8001a04:	024a      	lsls	r2, r1, #9
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a0e:	2200      	movs	r2, #0
 8001a10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a14:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a1c:	f7fe fbf2 	bl	8000204 <__aeabi_uldivmod>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4613      	mov	r3, r2
 8001a26:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a2a:	e067      	b.n	8001afc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a2c:	4b75      	ldr	r3, [pc, #468]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	099b      	lsrs	r3, r3, #6
 8001a32:	2200      	movs	r2, #0
 8001a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a38:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a46:	2300      	movs	r3, #0
 8001a48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a4e:	4622      	mov	r2, r4
 8001a50:	462b      	mov	r3, r5
 8001a52:	f04f 0000 	mov.w	r0, #0
 8001a56:	f04f 0100 	mov.w	r1, #0
 8001a5a:	0159      	lsls	r1, r3, #5
 8001a5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a60:	0150      	lsls	r0, r2, #5
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4621      	mov	r1, r4
 8001a68:	1a51      	subs	r1, r2, r1
 8001a6a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a80:	4649      	mov	r1, r9
 8001a82:	018b      	lsls	r3, r1, #6
 8001a84:	4641      	mov	r1, r8
 8001a86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8a:	4641      	mov	r1, r8
 8001a8c:	018a      	lsls	r2, r1, #6
 8001a8e:	4641      	mov	r1, r8
 8001a90:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a94:	4649      	mov	r1, r9
 8001a96:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aa6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aaa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001aae:	4692      	mov	sl, r2
 8001ab0:	469b      	mov	fp, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	eb1a 0303 	adds.w	r3, sl, r3
 8001ab8:	623b      	str	r3, [r7, #32]
 8001aba:	462b      	mov	r3, r5
 8001abc:	eb4b 0303 	adc.w	r3, fp, r3
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	f04f 0300 	mov.w	r3, #0
 8001aca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ace:	4629      	mov	r1, r5
 8001ad0:	028b      	lsls	r3, r1, #10
 8001ad2:	4621      	mov	r1, r4
 8001ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad8:	4621      	mov	r1, r4
 8001ada:	028a      	lsls	r2, r1, #10
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ae8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001aea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001aee:	f7fe fb89 	bl	8000204 <__aeabi_uldivmod>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4613      	mov	r3, r2
 8001af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001afc:	4b41      	ldr	r3, [pc, #260]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f003 0303 	and.w	r3, r3, #3
 8001b06:	3301      	adds	r3, #1
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001b0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b1e:	e0eb      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b20:	4b38      	ldr	r3, [pc, #224]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2c:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d06b      	beq.n	8001c10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b38:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	099b      	lsrs	r3, r3, #6
 8001b3e:	2200      	movs	r2, #0
 8001b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b42:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b44:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b54:	4622      	mov	r2, r4
 8001b56:	462b      	mov	r3, r5
 8001b58:	f04f 0000 	mov.w	r0, #0
 8001b5c:	f04f 0100 	mov.w	r1, #0
 8001b60:	0159      	lsls	r1, r3, #5
 8001b62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b66:	0150      	lsls	r0, r2, #5
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	1a51      	subs	r1, r2, r1
 8001b70:	61b9      	str	r1, [r7, #24]
 8001b72:	4629      	mov	r1, r5
 8001b74:	eb63 0301 	sbc.w	r3, r3, r1
 8001b78:	61fb      	str	r3, [r7, #28]
 8001b7a:	f04f 0200 	mov.w	r2, #0
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b86:	4659      	mov	r1, fp
 8001b88:	018b      	lsls	r3, r1, #6
 8001b8a:	4651      	mov	r1, sl
 8001b8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b90:	4651      	mov	r1, sl
 8001b92:	018a      	lsls	r2, r1, #6
 8001b94:	4651      	mov	r1, sl
 8001b96:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9a:	4659      	mov	r1, fp
 8001b9c:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb4:	4690      	mov	r8, r2
 8001bb6:	4699      	mov	r9, r3
 8001bb8:	4623      	mov	r3, r4
 8001bba:	eb18 0303 	adds.w	r3, r8, r3
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	462b      	mov	r3, r5
 8001bc2:	eb49 0303 	adc.w	r3, r9, r3
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	f04f 0300 	mov.w	r3, #0
 8001bd0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bd4:	4629      	mov	r1, r5
 8001bd6:	024b      	lsls	r3, r1, #9
 8001bd8:	4621      	mov	r1, r4
 8001bda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bde:	4621      	mov	r1, r4
 8001be0:	024a      	lsls	r2, r1, #9
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bea:	2200      	movs	r2, #0
 8001bec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bee:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bf4:	f7fe fb06 	bl	8000204 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c02:	e065      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x420>
 8001c04:	40023800 	.word	0x40023800
 8001c08:	00f42400 	.word	0x00f42400
 8001c0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c10:	4b3d      	ldr	r3, [pc, #244]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	099b      	lsrs	r3, r3, #6
 8001c16:	2200      	movs	r2, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c20:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c22:	2300      	movs	r3, #0
 8001c24:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c2a:	4642      	mov	r2, r8
 8001c2c:	464b      	mov	r3, r9
 8001c2e:	f04f 0000 	mov.w	r0, #0
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	0159      	lsls	r1, r3, #5
 8001c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3c:	0150      	lsls	r0, r2, #5
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	4641      	mov	r1, r8
 8001c44:	1a51      	subs	r1, r2, r1
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	4649      	mov	r1, r9
 8001c4a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	f04f 0200 	mov.w	r2, #0
 8001c54:	f04f 0300 	mov.w	r3, #0
 8001c58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c5c:	4659      	mov	r1, fp
 8001c5e:	018b      	lsls	r3, r1, #6
 8001c60:	4651      	mov	r1, sl
 8001c62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c66:	4651      	mov	r1, sl
 8001c68:	018a      	lsls	r2, r1, #6
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	1a54      	subs	r4, r2, r1
 8001c6e:	4659      	mov	r1, fp
 8001c70:	eb63 0501 	sbc.w	r5, r3, r1
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	f04f 0300 	mov.w	r3, #0
 8001c7c:	00eb      	lsls	r3, r5, #3
 8001c7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c82:	00e2      	lsls	r2, r4, #3
 8001c84:	4614      	mov	r4, r2
 8001c86:	461d      	mov	r5, r3
 8001c88:	4643      	mov	r3, r8
 8001c8a:	18e3      	adds	r3, r4, r3
 8001c8c:	603b      	str	r3, [r7, #0]
 8001c8e:	464b      	mov	r3, r9
 8001c90:	eb45 0303 	adc.w	r3, r5, r3
 8001c94:	607b      	str	r3, [r7, #4]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	f04f 0300 	mov.w	r3, #0
 8001c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca2:	4629      	mov	r1, r5
 8001ca4:	028b      	lsls	r3, r1, #10
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cac:	4621      	mov	r1, r4
 8001cae:	028a      	lsls	r2, r1, #10
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cb8:	2200      	movs	r2, #0
 8001cba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cbc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cc2:	f7fe fa9f 	bl	8000204 <__aeabi_uldivmod>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4613      	mov	r3, r2
 8001ccc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001d08 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	0f1b      	lsrs	r3, r3, #28
 8001cd6:	f003 0307 	and.w	r3, r3, #7
 8001cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ce2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cee:	e003      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cf6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	37b8      	adds	r7, #184	@ 0xb8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d06:	bf00      	nop
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400

08001d10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e28d      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 8083 	beq.w	8001e36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d30:	4b94      	ldr	r3, [pc, #592]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d019      	beq.n	8001d70 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d3c:	4b91      	ldr	r3, [pc, #580]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d48:	4b8e      	ldr	r3, [pc, #568]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d54:	d00c      	beq.n	8001d70 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d56:	4b8b      	ldr	r3, [pc, #556]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d5e:	2b0c      	cmp	r3, #12
 8001d60:	d112      	bne.n	8001d88 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d62:	4b88      	ldr	r3, [pc, #544]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d6e:	d10b      	bne.n	8001d88 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d70:	4b84      	ldr	r3, [pc, #528]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d05b      	beq.n	8001e34 <HAL_RCC_OscConfig+0x124>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d157      	bne.n	8001e34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e25a      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d90:	d106      	bne.n	8001da0 <HAL_RCC_OscConfig+0x90>
 8001d92:	4b7c      	ldr	r3, [pc, #496]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a7b      	ldr	r2, [pc, #492]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9c:	6013      	str	r3, [r2, #0]
 8001d9e:	e01d      	b.n	8001ddc <HAL_RCC_OscConfig+0xcc>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001da8:	d10c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0xb4>
 8001daa:	4b76      	ldr	r3, [pc, #472]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a75      	ldr	r2, [pc, #468]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	4b73      	ldr	r3, [pc, #460]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a72      	ldr	r2, [pc, #456]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e00b      	b.n	8001ddc <HAL_RCC_OscConfig+0xcc>
 8001dc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dce:	6013      	str	r3, [r2, #0]
 8001dd0:	4b6c      	ldr	r3, [pc, #432]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d013      	beq.n	8001e0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff f954 	bl	8001090 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dec:	f7ff f950 	bl	8001090 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b64      	cmp	r3, #100	@ 0x64
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e21f      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	4b61      	ldr	r3, [pc, #388]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d0f0      	beq.n	8001dec <HAL_RCC_OscConfig+0xdc>
 8001e0a:	e014      	b.n	8001e36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f940 	bl	8001090 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff f93c 	bl	8001090 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	@ 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e20b      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e26:	4b57      	ldr	r3, [pc, #348]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x104>
 8001e32:	e000      	b.n	8001e36 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d06f      	beq.n	8001f22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e42:	4b50      	ldr	r3, [pc, #320]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 030c 	and.w	r3, r3, #12
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d017      	beq.n	8001e7e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e4e:	4b4d      	ldr	r3, [pc, #308]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d105      	bne.n	8001e66 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e5a:	4b4a      	ldr	r3, [pc, #296]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b47      	ldr	r3, [pc, #284]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e72:	4b44      	ldr	r3, [pc, #272]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x186>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1d3      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	4937      	ldr	r1, [pc, #220]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e03a      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d020      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b34      	ldr	r3, [pc, #208]	@ (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f8e9 	bl	8001090 <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff f8e5 	bl	8001090 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e1b4      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b28      	ldr	r3, [pc, #160]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	4925      	ldr	r1, [pc, #148]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	600b      	str	r3, [r1, #0]
 8001ef4:	e015      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b24      	ldr	r3, [pc, #144]	@ (8001f88 <HAL_RCC_OscConfig+0x278>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efc:	f7ff f8c8 	bl	8001090 <HAL_GetTick>
 8001f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f04:	f7ff f8c4 	bl	8001090 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e193      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f16:	4b1b      	ldr	r3, [pc, #108]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d1f0      	bne.n	8001f04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d036      	beq.n	8001f9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	695b      	ldr	r3, [r3, #20]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d016      	beq.n	8001f64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f36:	4b15      	ldr	r3, [pc, #84]	@ (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	2201      	movs	r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3c:	f7ff f8a8 	bl	8001090 <HAL_GetTick>
 8001f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f44:	f7ff f8a4 	bl	8001090 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e173      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f56:	4b0b      	ldr	r3, [pc, #44]	@ (8001f84 <HAL_RCC_OscConfig+0x274>)
 8001f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x234>
 8001f62:	e01b      	b.n	8001f9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_RCC_OscConfig+0x27c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6a:	f7ff f891 	bl	8001090 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f70:	e00e      	b.n	8001f90 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f72:	f7ff f88d 	bl	8001090 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d907      	bls.n	8001f90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e15c      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 8001f84:	40023800 	.word	0x40023800
 8001f88:	42470000 	.word	0x42470000
 8001f8c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f90:	4b8a      	ldr	r3, [pc, #552]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001f92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ea      	bne.n	8001f72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8097 	beq.w	80020d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fae:	4b83      	ldr	r3, [pc, #524]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10f      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	4b7f      	ldr	r3, [pc, #508]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc2:	4a7e      	ldr	r2, [pc, #504]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fca:	4b7c      	ldr	r3, [pc, #496]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fda:	4b79      	ldr	r3, [pc, #484]	@ (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d118      	bne.n	8002018 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fe6:	4b76      	ldr	r3, [pc, #472]	@ (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a75      	ldr	r2, [pc, #468]	@ (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 8001fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f84d 	bl	8001090 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffa:	f7ff f849 	bl	8001090 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e118      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	4b6c      	ldr	r3, [pc, #432]	@ (80021c0 <HAL_RCC_OscConfig+0x4b0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d106      	bne.n	800202e <HAL_RCC_OscConfig+0x31e>
 8002020:	4b66      	ldr	r3, [pc, #408]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002024:	4a65      	ldr	r2, [pc, #404]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002026:	f043 0301 	orr.w	r3, r3, #1
 800202a:	6713      	str	r3, [r2, #112]	@ 0x70
 800202c:	e01c      	b.n	8002068 <HAL_RCC_OscConfig+0x358>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2b05      	cmp	r3, #5
 8002034:	d10c      	bne.n	8002050 <HAL_RCC_OscConfig+0x340>
 8002036:	4b61      	ldr	r3, [pc, #388]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203a:	4a60      	ldr	r2, [pc, #384]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 800203c:	f043 0304 	orr.w	r3, r3, #4
 8002040:	6713      	str	r3, [r2, #112]	@ 0x70
 8002042:	4b5e      	ldr	r3, [pc, #376]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	4a5d      	ldr	r2, [pc, #372]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6713      	str	r3, [r2, #112]	@ 0x70
 800204e:	e00b      	b.n	8002068 <HAL_RCC_OscConfig+0x358>
 8002050:	4b5a      	ldr	r3, [pc, #360]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002054:	4a59      	ldr	r2, [pc, #356]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002056:	f023 0301 	bic.w	r3, r3, #1
 800205a:	6713      	str	r3, [r2, #112]	@ 0x70
 800205c:	4b57      	ldr	r3, [pc, #348]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 800205e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002060:	4a56      	ldr	r2, [pc, #344]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002062:	f023 0304 	bic.w	r3, r3, #4
 8002066:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7ff f80e 	bl	8001090 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002076:	e00a      	b.n	800208e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002078:	f7ff f80a 	bl	8001090 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002086:	4293      	cmp	r3, r2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e0d7      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800208e:	4b4b      	ldr	r3, [pc, #300]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0ee      	beq.n	8002078 <HAL_RCC_OscConfig+0x368>
 800209a:	e014      	b.n	80020c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7fe fff8 	bl	8001090 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7fe fff4 	bl	8001090 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e0c1      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ba:	4b40      	ldr	r3, [pc, #256]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ee      	bne.n	80020a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020cc:	4b3b      	ldr	r3, [pc, #236]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	4a3a      	ldr	r2, [pc, #232]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f000 80ad 	beq.w	800223c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e2:	4b36      	ldr	r3, [pc, #216]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d060      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d145      	bne.n	8002182 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f6:	4b33      	ldr	r3, [pc, #204]	@ (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe ffc8 	bl	8001090 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe ffc4 	bl	8001090 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e093      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	4b29      	ldr	r3, [pc, #164]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f0      	bne.n	8002104 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69da      	ldr	r2, [r3, #28]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	019b      	lsls	r3, r3, #6
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	041b      	lsls	r3, r3, #16
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002144:	061b      	lsls	r3, r3, #24
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214c:	071b      	lsls	r3, r3, #28
 800214e:	491b      	ldr	r1, [pc, #108]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002150:	4313      	orrs	r3, r2
 8002152:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002154:	4b1b      	ldr	r3, [pc, #108]	@ (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 8002156:	2201      	movs	r2, #1
 8002158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215a:	f7fe ff99 	bl	8001090 <HAL_GetTick>
 800215e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002162:	f7fe ff95 	bl	8001090 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e064      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002174:	4b11      	ldr	r3, [pc, #68]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0x452>
 8002180:	e05c      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_RCC_OscConfig+0x4b4>)
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002188:	f7fe ff82 	bl	8001090 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe ff7e 	bl	8001090 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e04d      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a2:	4b06      	ldr	r3, [pc, #24]	@ (80021bc <HAL_RCC_OscConfig+0x4ac>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f0      	bne.n	8002190 <HAL_RCC_OscConfig+0x480>
 80021ae:	e045      	b.n	800223c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e040      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40007000 	.word	0x40007000
 80021c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021c8:	4b1f      	ldr	r3, [pc, #124]	@ (8002248 <HAL_RCC_OscConfig+0x538>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	699b      	ldr	r3, [r3, #24]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d030      	beq.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d129      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ee:	429a      	cmp	r2, r3
 80021f0:	d122      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021f8:	4013      	ands	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002200:	4293      	cmp	r3, r2
 8002202:	d119      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220e:	085b      	lsrs	r3, r3, #1
 8002210:	3b01      	subs	r3, #1
 8002212:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002214:	429a      	cmp	r2, r3
 8002216:	d10f      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d107      	bne.n	8002238 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3718      	adds	r7, #24
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40023800 	.word	0x40023800

0800224c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d101      	bne.n	800225e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e042      	b.n	80022e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d106      	bne.n	8002278 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe fdf2 	bl	8000e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2224      	movs	r2, #36	@ 0x24
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68da      	ldr	r2, [r3, #12]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800228e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f82b 	bl	80022ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	691a      	ldr	r2, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80022a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2220      	movs	r2, #32
 80022d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2220      	movs	r2, #32
 80022d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022e2:	2300      	movs	r3, #0
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80022ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022f0:	b0c0      	sub	sp, #256	@ 0x100
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002308:	68d9      	ldr	r1, [r3, #12]
 800230a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	ea40 0301 	orr.w	r3, r0, r1
 8002314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	431a      	orrs	r2, r3
 8002324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	431a      	orrs	r2, r3
 800232c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002344:	f021 010c 	bic.w	r1, r1, #12
 8002348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002352:	430b      	orrs	r3, r1
 8002354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002366:	6999      	ldr	r1, [r3, #24]
 8002368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	ea40 0301 	orr.w	r3, r0, r1
 8002372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	4b8f      	ldr	r3, [pc, #572]	@ (80025b8 <UART_SetConfig+0x2cc>)
 800237c:	429a      	cmp	r2, r3
 800237e:	d005      	beq.n	800238c <UART_SetConfig+0xa0>
 8002380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b8d      	ldr	r3, [pc, #564]	@ (80025bc <UART_SetConfig+0x2d0>)
 8002388:	429a      	cmp	r2, r3
 800238a:	d104      	bne.n	8002396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800238c:	f7ff fa7c 	bl	8001888 <HAL_RCC_GetPCLK2Freq>
 8002390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002394:	e003      	b.n	800239e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002396:	f7ff fa63 	bl	8001860 <HAL_RCC_GetPCLK1Freq>
 800239a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800239e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a8:	f040 810c 	bne.w	80025c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80023ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023b0:	2200      	movs	r2, #0
 80023b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80023b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023be:	4622      	mov	r2, r4
 80023c0:	462b      	mov	r3, r5
 80023c2:	1891      	adds	r1, r2, r2
 80023c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80023c6:	415b      	adcs	r3, r3
 80023c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023ce:	4621      	mov	r1, r4
 80023d0:	eb12 0801 	adds.w	r8, r2, r1
 80023d4:	4629      	mov	r1, r5
 80023d6:	eb43 0901 	adc.w	r9, r3, r1
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80023ee:	4690      	mov	r8, r2
 80023f0:	4699      	mov	r9, r3
 80023f2:	4623      	mov	r3, r4
 80023f4:	eb18 0303 	adds.w	r3, r8, r3
 80023f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80023fc:	462b      	mov	r3, r5
 80023fe:	eb49 0303 	adc.w	r3, r9, r3
 8002402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002412:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800241a:	460b      	mov	r3, r1
 800241c:	18db      	adds	r3, r3, r3
 800241e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002420:	4613      	mov	r3, r2
 8002422:	eb42 0303 	adc.w	r3, r2, r3
 8002426:	657b      	str	r3, [r7, #84]	@ 0x54
 8002428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800242c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002430:	f7fd fee8 	bl	8000204 <__aeabi_uldivmod>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4b61      	ldr	r3, [pc, #388]	@ (80025c0 <UART_SetConfig+0x2d4>)
 800243a:	fba3 2302 	umull	r2, r3, r3, r2
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	011c      	lsls	r4, r3, #4
 8002442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002446:	2200      	movs	r2, #0
 8002448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800244c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002454:	4642      	mov	r2, r8
 8002456:	464b      	mov	r3, r9
 8002458:	1891      	adds	r1, r2, r2
 800245a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800245c:	415b      	adcs	r3, r3
 800245e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002464:	4641      	mov	r1, r8
 8002466:	eb12 0a01 	adds.w	sl, r2, r1
 800246a:	4649      	mov	r1, r9
 800246c:	eb43 0b01 	adc.w	fp, r3, r1
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800247c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002484:	4692      	mov	sl, r2
 8002486:	469b      	mov	fp, r3
 8002488:	4643      	mov	r3, r8
 800248a:	eb1a 0303 	adds.w	r3, sl, r3
 800248e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002492:	464b      	mov	r3, r9
 8002494:	eb4b 0303 	adc.w	r3, fp, r3
 8002498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800249c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80024ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80024b0:	460b      	mov	r3, r1
 80024b2:	18db      	adds	r3, r3, r3
 80024b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80024b6:	4613      	mov	r3, r2
 80024b8:	eb42 0303 	adc.w	r3, r2, r3
 80024bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80024be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80024c6:	f7fd fe9d 	bl	8000204 <__aeabi_uldivmod>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	4b3b      	ldr	r3, [pc, #236]	@ (80025c0 <UART_SetConfig+0x2d4>)
 80024d2:	fba3 2301 	umull	r2, r3, r3, r1
 80024d6:	095b      	lsrs	r3, r3, #5
 80024d8:	2264      	movs	r2, #100	@ 0x64
 80024da:	fb02 f303 	mul.w	r3, r2, r3
 80024de:	1acb      	subs	r3, r1, r3
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80024e6:	4b36      	ldr	r3, [pc, #216]	@ (80025c0 <UART_SetConfig+0x2d4>)
 80024e8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ec:	095b      	lsrs	r3, r3, #5
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80024f4:	441c      	add	r4, r3
 80024f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80024fa:	2200      	movs	r2, #0
 80024fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002500:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002508:	4642      	mov	r2, r8
 800250a:	464b      	mov	r3, r9
 800250c:	1891      	adds	r1, r2, r2
 800250e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002510:	415b      	adcs	r3, r3
 8002512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002518:	4641      	mov	r1, r8
 800251a:	1851      	adds	r1, r2, r1
 800251c:	6339      	str	r1, [r7, #48]	@ 0x30
 800251e:	4649      	mov	r1, r9
 8002520:	414b      	adcs	r3, r1
 8002522:	637b      	str	r3, [r7, #52]	@ 0x34
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002530:	4659      	mov	r1, fp
 8002532:	00cb      	lsls	r3, r1, #3
 8002534:	4651      	mov	r1, sl
 8002536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800253a:	4651      	mov	r1, sl
 800253c:	00ca      	lsls	r2, r1, #3
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	4603      	mov	r3, r0
 8002544:	4642      	mov	r2, r8
 8002546:	189b      	adds	r3, r3, r2
 8002548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800254c:	464b      	mov	r3, r9
 800254e:	460a      	mov	r2, r1
 8002550:	eb42 0303 	adc.w	r3, r2, r3
 8002554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800256c:	460b      	mov	r3, r1
 800256e:	18db      	adds	r3, r3, r3
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002572:	4613      	mov	r3, r2
 8002574:	eb42 0303 	adc.w	r3, r2, r3
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800257e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002582:	f7fd fe3f 	bl	8000204 <__aeabi_uldivmod>
 8002586:	4602      	mov	r2, r0
 8002588:	460b      	mov	r3, r1
 800258a:	4b0d      	ldr	r3, [pc, #52]	@ (80025c0 <UART_SetConfig+0x2d4>)
 800258c:	fba3 1302 	umull	r1, r3, r3, r2
 8002590:	095b      	lsrs	r3, r3, #5
 8002592:	2164      	movs	r1, #100	@ 0x64
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	3332      	adds	r3, #50	@ 0x32
 800259e:	4a08      	ldr	r2, [pc, #32]	@ (80025c0 <UART_SetConfig+0x2d4>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	095b      	lsrs	r3, r3, #5
 80025a6:	f003 0207 	and.w	r2, r3, #7
 80025aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4422      	add	r2, r4
 80025b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80025b4:	e106      	b.n	80027c4 <UART_SetConfig+0x4d8>
 80025b6:	bf00      	nop
 80025b8:	40011000 	.word	0x40011000
 80025bc:	40011400 	.word	0x40011400
 80025c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80025ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80025d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80025d6:	4642      	mov	r2, r8
 80025d8:	464b      	mov	r3, r9
 80025da:	1891      	adds	r1, r2, r2
 80025dc:	6239      	str	r1, [r7, #32]
 80025de:	415b      	adcs	r3, r3
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025e6:	4641      	mov	r1, r8
 80025e8:	1854      	adds	r4, r2, r1
 80025ea:	4649      	mov	r1, r9
 80025ec:	eb43 0501 	adc.w	r5, r3, r1
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	00eb      	lsls	r3, r5, #3
 80025fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025fe:	00e2      	lsls	r2, r4, #3
 8002600:	4614      	mov	r4, r2
 8002602:	461d      	mov	r5, r3
 8002604:	4643      	mov	r3, r8
 8002606:	18e3      	adds	r3, r4, r3
 8002608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800260c:	464b      	mov	r3, r9
 800260e:	eb45 0303 	adc.w	r3, r5, r3
 8002612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002632:	4629      	mov	r1, r5
 8002634:	008b      	lsls	r3, r1, #2
 8002636:	4621      	mov	r1, r4
 8002638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800263c:	4621      	mov	r1, r4
 800263e:	008a      	lsls	r2, r1, #2
 8002640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002644:	f7fd fdde 	bl	8000204 <__aeabi_uldivmod>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4b60      	ldr	r3, [pc, #384]	@ (80027d0 <UART_SetConfig+0x4e4>)
 800264e:	fba3 2302 	umull	r2, r3, r3, r2
 8002652:	095b      	lsrs	r3, r3, #5
 8002654:	011c      	lsls	r4, r3, #4
 8002656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800265a:	2200      	movs	r2, #0
 800265c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002668:	4642      	mov	r2, r8
 800266a:	464b      	mov	r3, r9
 800266c:	1891      	adds	r1, r2, r2
 800266e:	61b9      	str	r1, [r7, #24]
 8002670:	415b      	adcs	r3, r3
 8002672:	61fb      	str	r3, [r7, #28]
 8002674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002678:	4641      	mov	r1, r8
 800267a:	1851      	adds	r1, r2, r1
 800267c:	6139      	str	r1, [r7, #16]
 800267e:	4649      	mov	r1, r9
 8002680:	414b      	adcs	r3, r1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002690:	4659      	mov	r1, fp
 8002692:	00cb      	lsls	r3, r1, #3
 8002694:	4651      	mov	r1, sl
 8002696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800269a:	4651      	mov	r1, sl
 800269c:	00ca      	lsls	r2, r1, #3
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	4642      	mov	r2, r8
 80026a6:	189b      	adds	r3, r3, r2
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80026ac:	464b      	mov	r3, r9
 80026ae:	460a      	mov	r2, r1
 80026b0:	eb42 0303 	adc.w	r3, r2, r3
 80026b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80026c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80026d0:	4649      	mov	r1, r9
 80026d2:	008b      	lsls	r3, r1, #2
 80026d4:	4641      	mov	r1, r8
 80026d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80026da:	4641      	mov	r1, r8
 80026dc:	008a      	lsls	r2, r1, #2
 80026de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80026e2:	f7fd fd8f 	bl	8000204 <__aeabi_uldivmod>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4611      	mov	r1, r2
 80026ec:	4b38      	ldr	r3, [pc, #224]	@ (80027d0 <UART_SetConfig+0x4e4>)
 80026ee:	fba3 2301 	umull	r2, r3, r3, r1
 80026f2:	095b      	lsrs	r3, r3, #5
 80026f4:	2264      	movs	r2, #100	@ 0x64
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	1acb      	subs	r3, r1, r3
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	3332      	adds	r3, #50	@ 0x32
 8002700:	4a33      	ldr	r2, [pc, #204]	@ (80027d0 <UART_SetConfig+0x4e4>)
 8002702:	fba2 2303 	umull	r2, r3, r2, r3
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800270c:	441c      	add	r4, r3
 800270e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002712:	2200      	movs	r2, #0
 8002714:	673b      	str	r3, [r7, #112]	@ 0x70
 8002716:	677a      	str	r2, [r7, #116]	@ 0x74
 8002718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800271c:	4642      	mov	r2, r8
 800271e:	464b      	mov	r3, r9
 8002720:	1891      	adds	r1, r2, r2
 8002722:	60b9      	str	r1, [r7, #8]
 8002724:	415b      	adcs	r3, r3
 8002726:	60fb      	str	r3, [r7, #12]
 8002728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800272c:	4641      	mov	r1, r8
 800272e:	1851      	adds	r1, r2, r1
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	4649      	mov	r1, r9
 8002734:	414b      	adcs	r3, r1
 8002736:	607b      	str	r3, [r7, #4]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002744:	4659      	mov	r1, fp
 8002746:	00cb      	lsls	r3, r1, #3
 8002748:	4651      	mov	r1, sl
 800274a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800274e:	4651      	mov	r1, sl
 8002750:	00ca      	lsls	r2, r1, #3
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	4603      	mov	r3, r0
 8002758:	4642      	mov	r2, r8
 800275a:	189b      	adds	r3, r3, r2
 800275c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800275e:	464b      	mov	r3, r9
 8002760:	460a      	mov	r2, r1
 8002762:	eb42 0303 	adc.w	r3, r2, r3
 8002766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	663b      	str	r3, [r7, #96]	@ 0x60
 8002772:	667a      	str	r2, [r7, #100]	@ 0x64
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002780:	4649      	mov	r1, r9
 8002782:	008b      	lsls	r3, r1, #2
 8002784:	4641      	mov	r1, r8
 8002786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800278a:	4641      	mov	r1, r8
 800278c:	008a      	lsls	r2, r1, #2
 800278e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002792:	f7fd fd37 	bl	8000204 <__aeabi_uldivmod>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <UART_SetConfig+0x4e4>)
 800279c:	fba3 1302 	umull	r1, r3, r3, r2
 80027a0:	095b      	lsrs	r3, r3, #5
 80027a2:	2164      	movs	r1, #100	@ 0x64
 80027a4:	fb01 f303 	mul.w	r3, r1, r3
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	3332      	adds	r3, #50	@ 0x32
 80027ae:	4a08      	ldr	r2, [pc, #32]	@ (80027d0 <UART_SetConfig+0x4e4>)
 80027b0:	fba2 2303 	umull	r2, r3, r2, r3
 80027b4:	095b      	lsrs	r3, r3, #5
 80027b6:	f003 020f 	and.w	r2, r3, #15
 80027ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4422      	add	r2, r4
 80027c2:	609a      	str	r2, [r3, #8]
}
 80027c4:	bf00      	nop
 80027c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80027ca:	46bd      	mov	sp, r7
 80027cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027d0:	51eb851f 	.word	0x51eb851f

080027d4 <memset>:
 80027d4:	4402      	add	r2, r0
 80027d6:	4603      	mov	r3, r0
 80027d8:	4293      	cmp	r3, r2
 80027da:	d100      	bne.n	80027de <memset+0xa>
 80027dc:	4770      	bx	lr
 80027de:	f803 1b01 	strb.w	r1, [r3], #1
 80027e2:	e7f9      	b.n	80027d8 <memset+0x4>

080027e4 <__libc_init_array>:
 80027e4:	b570      	push	{r4, r5, r6, lr}
 80027e6:	4d0d      	ldr	r5, [pc, #52]	@ (800281c <__libc_init_array+0x38>)
 80027e8:	4c0d      	ldr	r4, [pc, #52]	@ (8002820 <__libc_init_array+0x3c>)
 80027ea:	1b64      	subs	r4, r4, r5
 80027ec:	10a4      	asrs	r4, r4, #2
 80027ee:	2600      	movs	r6, #0
 80027f0:	42a6      	cmp	r6, r4
 80027f2:	d109      	bne.n	8002808 <__libc_init_array+0x24>
 80027f4:	4d0b      	ldr	r5, [pc, #44]	@ (8002824 <__libc_init_array+0x40>)
 80027f6:	4c0c      	ldr	r4, [pc, #48]	@ (8002828 <__libc_init_array+0x44>)
 80027f8:	f000 f818 	bl	800282c <_init>
 80027fc:	1b64      	subs	r4, r4, r5
 80027fe:	10a4      	asrs	r4, r4, #2
 8002800:	2600      	movs	r6, #0
 8002802:	42a6      	cmp	r6, r4
 8002804:	d105      	bne.n	8002812 <__libc_init_array+0x2e>
 8002806:	bd70      	pop	{r4, r5, r6, pc}
 8002808:	f855 3b04 	ldr.w	r3, [r5], #4
 800280c:	4798      	blx	r3
 800280e:	3601      	adds	r6, #1
 8002810:	e7ee      	b.n	80027f0 <__libc_init_array+0xc>
 8002812:	f855 3b04 	ldr.w	r3, [r5], #4
 8002816:	4798      	blx	r3
 8002818:	3601      	adds	r6, #1
 800281a:	e7f2      	b.n	8002802 <__libc_init_array+0x1e>
 800281c:	08002864 	.word	0x08002864
 8002820:	08002864 	.word	0x08002864
 8002824:	08002864 	.word	0x08002864
 8002828:	08002868 	.word	0x08002868

0800282c <_init>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr

08002838 <_fini>:
 8002838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283a:	bf00      	nop
 800283c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800283e:	bc08      	pop	{r3}
 8002840:	469e      	mov	lr, r3
 8002842:	4770      	bx	lr
