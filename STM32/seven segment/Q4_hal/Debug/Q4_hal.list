
Q4_hal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c60  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002e24  08002e24  00003e24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  00004068  2**0
                  CONTENTS
  4 .ARM          00000008  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e44  08002e44  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e44  08002e44  00003e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002e4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  08002eb4  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08002eb4  00004220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000868f  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017f8  00000000  00000000  0000c727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000df20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005aa  00000000  00000000  0000e698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021bc8  00000000  00000000  0000ec42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d12  00000000  00000000  0003080a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca116  00000000  00000000  0003a51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104632  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d0  00000000  00000000  00104678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00106a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002e0c 	.word	0x08002e0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	08002e0c 	.word	0x08002e0c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include<stdio.h>
int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffc9 	bl	80004f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <main>:
  * @retval int
  */


int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fbcc 	bl	8000d1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f926 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f9bc 	bl	8000904 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f990 	bl	80008b0 <MX_USART2_UART_Init>


  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2120      	movs	r1, #32
 8000594:	488e      	ldr	r0, [pc, #568]	@ (80007d0 <main+0x254>)
 8000596:	f000 fee9 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	2140      	movs	r1, #64	@ 0x40
 800059e:	488c      	ldr	r0, [pc, #560]	@ (80007d0 <main+0x254>)
 80005a0:	f000 fee4 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	4889      	ldr	r0, [pc, #548]	@ (80007d0 <main+0x254>)
 80005aa:	f000 fedf 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80005ae:	2200      	movs	r2, #0
 80005b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005b4:	4886      	ldr	r0, [pc, #536]	@ (80007d0 <main+0x254>)
 80005b6:	f000 fed9 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	4884      	ldr	r0, [pc, #528]	@ (80007d0 <main+0x254>)
 80005c0:	f000 fed4 	bl	800136c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80005c4:	2110      	movs	r1, #16
 80005c6:	4882      	ldr	r0, [pc, #520]	@ (80007d0 <main+0x254>)
 80005c8:	f000 feb8 	bl	800133c <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d006      	beq.n	80005e0 <main+0x64>
	  {
		  printf("1");
 80005d2:	2031      	movs	r0, #49	@ 0x31
 80005d4:	f002 f852 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80005d8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005dc:	f000 fc10 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 80005e0:	2108      	movs	r1, #8
 80005e2:	487b      	ldr	r0, [pc, #492]	@ (80007d0 <main+0x254>)
 80005e4:	f000 feaa 	bl	800133c <HAL_GPIO_ReadPin>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d006      	beq.n	80005fc <main+0x80>
	  {
		  printf("1");
 80005ee:	2031      	movs	r0, #49	@ 0x31
 80005f0:	f002 f844 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80005f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80005f8:	f000 fc02 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 80005fc:	2104      	movs	r1, #4
 80005fe:	4874      	ldr	r0, [pc, #464]	@ (80007d0 <main+0x254>)
 8000600:	f000 fe9c 	bl	800133c <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d006      	beq.n	8000618 <main+0x9c>
	  {
		  printf("1");
 800060a:	2031      	movs	r0, #49	@ 0x31
 800060c:	f002 f836 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000610:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000614:	f000 fbf4 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000618:	2102      	movs	r1, #2
 800061a:	486d      	ldr	r0, [pc, #436]	@ (80007d0 <main+0x254>)
 800061c:	f000 fe8e 	bl	800133c <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d006      	beq.n	8000634 <main+0xb8>
	  {
		  printf("1");
 8000626:	2031      	movs	r0, #49	@ 0x31
 8000628:	f002 f828 	bl	800267c <putchar>
		  HAL_Delay(2000);
 800062c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000630:	f000 fbe6 	bl	8000e00 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	2120      	movs	r1, #32
 8000638:	4865      	ldr	r0, [pc, #404]	@ (80007d0 <main+0x254>)
 800063a:	f000 fe97 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, SET);
 800063e:	2201      	movs	r2, #1
 8000640:	2140      	movs	r1, #64	@ 0x40
 8000642:	4863      	ldr	r0, [pc, #396]	@ (80007d0 <main+0x254>)
 8000644:	f000 fe92 	bl	800136c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8000648:	2110      	movs	r1, #16
 800064a:	4861      	ldr	r0, [pc, #388]	@ (80007d0 <main+0x254>)
 800064c:	f000 fe76 	bl	800133c <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d006      	beq.n	8000664 <main+0xe8>
	  {
		  printf("2");
 8000656:	2032      	movs	r0, #50	@ 0x32
 8000658:	f002 f810 	bl	800267c <putchar>
		  HAL_Delay(2000);
 800065c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000660:	f000 fbce 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 8000664:	2108      	movs	r1, #8
 8000666:	485a      	ldr	r0, [pc, #360]	@ (80007d0 <main+0x254>)
 8000668:	f000 fe68 	bl	800133c <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d006      	beq.n	8000680 <main+0x104>
	  {
		  printf("2");
 8000672:	2032      	movs	r0, #50	@ 0x32
 8000674:	f002 f802 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000678:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800067c:	f000 fbc0 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 8000680:	2104      	movs	r1, #4
 8000682:	4853      	ldr	r0, [pc, #332]	@ (80007d0 <main+0x254>)
 8000684:	f000 fe5a 	bl	800133c <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <main+0x120>
	  {
		  printf("2");
 800068e:	2032      	movs	r0, #50	@ 0x32
 8000690:	f001 fff4 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000694:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000698:	f000 fbb2 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 800069c:	2102      	movs	r1, #2
 800069e:	484c      	ldr	r0, [pc, #304]	@ (80007d0 <main+0x254>)
 80006a0:	f000 fe4c 	bl	800133c <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d006      	beq.n	80006b8 <main+0x13c>
	  {
		  printf("2");
 80006aa:	2032      	movs	r0, #50	@ 0x32
 80006ac:	f001 ffe6 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80006b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006b4:	f000 fba4 	bl	8000e00 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4844      	ldr	r0, [pc, #272]	@ (80007d0 <main+0x254>)
 80006be:	f000 fe55 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, SET);
 80006c2:	2201      	movs	r2, #1
 80006c4:	2180      	movs	r1, #128	@ 0x80
 80006c6:	4842      	ldr	r0, [pc, #264]	@ (80007d0 <main+0x254>)
 80006c8:	f000 fe50 	bl	800136c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 80006cc:	2110      	movs	r1, #16
 80006ce:	4840      	ldr	r0, [pc, #256]	@ (80007d0 <main+0x254>)
 80006d0:	f000 fe34 	bl	800133c <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d006      	beq.n	80006e8 <main+0x16c>
	  {
		  printf("3");
 80006da:	2033      	movs	r0, #51	@ 0x33
 80006dc:	f001 ffce 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80006e0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006e4:	f000 fb8c 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 80006e8:	2108      	movs	r1, #8
 80006ea:	4839      	ldr	r0, [pc, #228]	@ (80007d0 <main+0x254>)
 80006ec:	f000 fe26 	bl	800133c <HAL_GPIO_ReadPin>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d006      	beq.n	8000704 <main+0x188>
	  {
		  printf("3");
 80006f6:	2033      	movs	r0, #51	@ 0x33
 80006f8:	f001 ffc0 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80006fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000700:	f000 fb7e 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 8000704:	2104      	movs	r1, #4
 8000706:	4832      	ldr	r0, [pc, #200]	@ (80007d0 <main+0x254>)
 8000708:	f000 fe18 	bl	800133c <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d006      	beq.n	8000720 <main+0x1a4>
	  {
		  printf("3");
 8000712:	2033      	movs	r0, #51	@ 0x33
 8000714:	f001 ffb2 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000718:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800071c:	f000 fb70 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 8000720:	2102      	movs	r1, #2
 8000722:	482b      	ldr	r0, [pc, #172]	@ (80007d0 <main+0x254>)
 8000724:	f000 fe0a 	bl	800133c <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d006      	beq.n	800073c <main+0x1c0>
	  {
		  printf("3");
 800072e:	2033      	movs	r0, #51	@ 0x33
 8000730:	f001 ffa4 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000734:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000738:	f000 fb62 	bl	8000e00 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, RESET);
 800073c:	2200      	movs	r2, #0
 800073e:	2180      	movs	r1, #128	@ 0x80
 8000740:	4823      	ldr	r0, [pc, #140]	@ (80007d0 <main+0x254>)
 8000742:	f000 fe13 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800074c:	4820      	ldr	r0, [pc, #128]	@ (80007d0 <main+0x254>)
 800074e:	f000 fe0d 	bl	800136c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4))
 8000752:	2110      	movs	r1, #16
 8000754:	481e      	ldr	r0, [pc, #120]	@ (80007d0 <main+0x254>)
 8000756:	f000 fdf1 	bl	800133c <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d006      	beq.n	800076e <main+0x1f2>
	  {
		  printf("4");
 8000760:	2034      	movs	r0, #52	@ 0x34
 8000762:	f001 ff8b 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000766:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800076a:	f000 fb49 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3))
 800076e:	2108      	movs	r1, #8
 8000770:	4817      	ldr	r0, [pc, #92]	@ (80007d0 <main+0x254>)
 8000772:	f000 fde3 	bl	800133c <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d006      	beq.n	800078a <main+0x20e>
	  {
		  printf("4");
 800077c:	2034      	movs	r0, #52	@ 0x34
 800077e:	f001 ff7d 	bl	800267c <putchar>
		  HAL_Delay(2000);
 8000782:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000786:	f000 fb3b 	bl	8000e00 <HAL_Delay>
	  }
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2))
 800078a:	2104      	movs	r1, #4
 800078c:	4810      	ldr	r0, [pc, #64]	@ (80007d0 <main+0x254>)
 800078e:	f000 fdd5 	bl	800133c <HAL_GPIO_ReadPin>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d006      	beq.n	80007a6 <main+0x22a>
	  {
		  printf("4");
 8000798:	2034      	movs	r0, #52	@ 0x34
 800079a:	f001 ff6f 	bl	800267c <putchar>
		  HAL_Delay(2000);
 800079e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007a2:	f000 fb2d 	bl	8000e00 <HAL_Delay>
	  }
	  if( HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1))
 80007a6:	2102      	movs	r1, #2
 80007a8:	4809      	ldr	r0, [pc, #36]	@ (80007d0 <main+0x254>)
 80007aa:	f000 fdc7 	bl	800133c <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d006      	beq.n	80007c2 <main+0x246>
	  {
		  printf("4");
 80007b4:	2034      	movs	r0, #52	@ 0x34
 80007b6:	f001 ff61 	bl	800267c <putchar>
		  HAL_Delay(2000);
 80007ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007be:	f000 fb1f 	bl	8000e00 <HAL_Delay>
	  }
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80007c8:	4801      	ldr	r0, [pc, #4]	@ (80007d0 <main+0x254>)
 80007ca:	f000 fdcf 	bl	800136c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 80007ce:	e6df      	b.n	8000590 <main+0x14>
 80007d0:	40020400 	.word	0x40020400

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	@ 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	2234      	movs	r2, #52	@ 0x34
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f001 ff95 	bl	8002712 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	4b2a      	ldr	r3, [pc, #168]	@ (80008a8 <SystemClock_Config+0xd4>)
 80007fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000800:	4a29      	ldr	r2, [pc, #164]	@ (80008a8 <SystemClock_Config+0xd4>)
 8000802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000806:	6413      	str	r3, [r2, #64]	@ 0x40
 8000808:	4b27      	ldr	r3, [pc, #156]	@ (80008a8 <SystemClock_Config+0xd4>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800080c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000814:	2300      	movs	r3, #0
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b24      	ldr	r3, [pc, #144]	@ (80008ac <SystemClock_Config+0xd8>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000820:	4a22      	ldr	r2, [pc, #136]	@ (80008ac <SystemClock_Config+0xd8>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b20      	ldr	r3, [pc, #128]	@ (80008ac <SystemClock_Config+0xd8>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000834:	2302      	movs	r3, #2
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000838:	2301      	movs	r3, #1
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800083c:	2310      	movs	r3, #16
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000844:	2300      	movs	r3, #0
 8000846:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800084c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000850:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000852:	2304      	movs	r3, #4
 8000854:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000856:	2302      	movs	r3, #2
 8000858:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800085a:	2302      	movs	r3, #2
 800085c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4618      	mov	r0, r3
 8000864:	f001 f8e6 	bl	8001a34 <HAL_RCC_OscConfig>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800086e:	f000 f8ed 	bl	8000a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000872:	230f      	movs	r3, #15
 8000874:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000876:	2302      	movs	r3, #2
 8000878:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800087e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000888:	f107 0308 	add.w	r3, r7, #8
 800088c:	2102      	movs	r1, #2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd86 	bl	80013a0 <HAL_RCC_ClockConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800089a:	f000 f8d7 	bl	8000a4c <Error_Handler>
  }
}
 800089e:	bf00      	nop
 80008a0:	3750      	adds	r7, #80	@ 0x50
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40007000 	.word	0x40007000

080008b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b4:	4b11      	ldr	r3, [pc, #68]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	@ (8000900 <MX_USART2_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008ba:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008d6:	220c      	movs	r2, #12
 80008d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008da:	4b08      	ldr	r3, [pc, #32]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e0:	4b06      	ldr	r3, [pc, #24]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e6:	4805      	ldr	r0, [pc, #20]	@ (80008fc <MX_USART2_UART_Init+0x4c>)
 80008e8:	f001 fb42 	bl	8001f70 <HAL_UART_Init>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008f2:	f000 f8ab 	bl	8000a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000084 	.word	0x20000084
 8000900:	40004400 	.word	0x40004400

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	@ 0x28
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	613b      	str	r3, [r7, #16]
 800091e:	4b47      	ldr	r3, [pc, #284]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a46      	ldr	r2, [pc, #280]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b44      	ldr	r3, [pc, #272]	@ (8000a3c <MX_GPIO_Init+0x138>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	4b40      	ldr	r3, [pc, #256]	@ (8000a3c <MX_GPIO_Init+0x138>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093e:	4a3f      	ldr	r2, [pc, #252]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000940:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000944:	6313      	str	r3, [r2, #48]	@ 0x30
 8000946:	4b3d      	ldr	r3, [pc, #244]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	4b39      	ldr	r3, [pc, #228]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a38      	ldr	r2, [pc, #224]	@ (8000a3c <MX_GPIO_Init+0x138>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b36      	ldr	r3, [pc, #216]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b32      	ldr	r3, [pc, #200]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a31      	ldr	r2, [pc, #196]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a3c <MX_GPIO_Init+0x138>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800098a:	2200      	movs	r2, #0
 800098c:	21ff      	movs	r1, #255	@ 0xff
 800098e:	482c      	ldr	r0, [pc, #176]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 8000990:	f000 fcec 	bl	800136c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2120      	movs	r1, #32
 8000998:	482a      	ldr	r0, [pc, #168]	@ (8000a44 <MX_GPIO_Init+0x140>)
 800099a:	f000 fce7 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80009a4:	4828      	ldr	r0, [pc, #160]	@ (8000a48 <MX_GPIO_Init+0x144>)
 80009a6:	f000 fce1 	bl	800136c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	481f      	ldr	r0, [pc, #124]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 80009c2:	f000 fb27 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009c6:	23ff      	movs	r3, #255	@ 0xff
 80009c8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	4619      	mov	r1, r3
 80009dc:	4818      	ldr	r0, [pc, #96]	@ (8000a40 <MX_GPIO_Init+0x13c>)
 80009de:	f000 fb19 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009e2:	2320      	movs	r3, #32
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	4619      	mov	r1, r3
 80009f8:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <MX_GPIO_Init+0x140>)
 80009fa:	f000 fb0b 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80009fe:	231e      	movs	r3, #30
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_GPIO_Init+0x144>)
 8000a12:	f000 faff 	bl	8001014 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000a16:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4806      	ldr	r0, [pc, #24]	@ (8000a48 <MX_GPIO_Init+0x144>)
 8000a30:	f000 faf0 	bl	8001014 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a34:	bf00      	nop
 8000a36:	3728      	adds	r7, #40	@ 0x28
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020800 	.word	0x40020800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020400 	.word	0x40020400

08000a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a50:	b672      	cpsid	i
}
 8000a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <Error_Handler+0x8>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 fa88 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	@ 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <HAL_UART_MspInit+0x84>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d12b      	bne.n	8000b22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b18      	ldr	r3, [pc, #96]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	4a17      	ldr	r2, [pc, #92]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ada:	4b15      	ldr	r3, [pc, #84]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	4a10      	ldr	r2, [pc, #64]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <HAL_UART_MspInit+0x88>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b02:	230c      	movs	r3, #12
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0e:	2303      	movs	r3, #3
 8000b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b12:	2307      	movs	r3, #7
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	@ (8000b34 <HAL_UART_MspInit+0x8c>)
 8000b1e:	f000 fa79 	bl	8001014 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	@ 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40004400 	.word	0x40004400
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020000 	.word	0x40020000

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <NMI_Handler+0x4>

08000b40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <HardFault_Handler+0x4>

08000b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <MemManage_Handler+0x4>

08000b50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <BusFault_Handler+0x4>

08000b58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b5c:	bf00      	nop
 8000b5e:	e7fd      	b.n	8000b5c <UsageFault_Handler+0x4>

08000b60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b8e:	f000 f917 	bl	8000dc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e00a      	b.n	8000bbe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba8:	f3af 8000 	nop.w
 8000bac:	4601      	mov	r1, r0
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	1c5a      	adds	r2, r3, #1
 8000bb2:	60ba      	str	r2, [r7, #8]
 8000bb4:	b2ca      	uxtb	r2, r1
 8000bb6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	dbf0      	blt.n	8000ba8 <_read+0x12>
  }

  return len;
 8000bc6:	687b      	ldr	r3, [r7, #4]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3718      	adds	r7, #24
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
 8000bf0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bf8:	605a      	str	r2, [r3, #4]
  return 0;
 8000bfa:	2300      	movs	r3, #0
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	370c      	adds	r7, #12
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <_isatty>:

int _isatty(int file)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c10:	2301      	movs	r3, #1
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	b085      	sub	sp, #20
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	60f8      	str	r0, [r7, #12]
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	@ (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	@ (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	@ (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	@ (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d207      	bcs.n	8000c78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c68:	f001 fda2 	bl	80027b0 <__errno>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	220c      	movs	r2, #12
 8000c70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e009      	b.n	8000c8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <_sbrk+0x64>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4413      	add	r3, r2
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <_sbrk+0x64>)
 8000c88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8a:	68fb      	ldr	r3, [r7, #12]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20020000 	.word	0x20020000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200000cc 	.word	0x200000cc
 8000ca0:	20000220 	.word	0x20000220

08000ca4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <SystemInit+0x20>)
 8000caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cae:	4a05      	ldr	r2, [pc, #20]	@ (8000cc4 <SystemInit+0x20>)
 8000cb0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cc8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ccc:	f7ff ffea 	bl	8000ca4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cd0:	480c      	ldr	r0, [pc, #48]	@ (8000d04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cd2:	490d      	ldr	r1, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000d0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd8:	e002      	b.n	8000ce0 <LoopCopyDataInit>

08000cda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cde:	3304      	adds	r3, #4

08000ce0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ce2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce4:	d3f9      	bcc.n	8000cda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cec:	e001      	b.n	8000cf2 <LoopFillZerobss>

08000cee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf0:	3204      	adds	r2, #4

08000cf2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cf2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf4:	d3fb      	bcc.n	8000cee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000cf6:	f001 fd61 	bl	80027bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cfa:	f7ff fc3f 	bl	800057c <main>
  bx  lr    
 8000cfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d08:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d0c:	08002e4c 	.word	0x08002e4c
  ldr r2, =_sbss
 8000d10:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d14:	20000220 	.word	0x20000220

08000d18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC_IRQHandler>
	...

08000d1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_Init+0x40>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0d      	ldr	r2, [pc, #52]	@ (8000d5c <HAL_Init+0x40>)
 8000d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d5c <HAL_Init+0x40>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a0a      	ldr	r2, [pc, #40]	@ (8000d5c <HAL_Init+0x40>)
 8000d32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <HAL_Init+0x40>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a07      	ldr	r2, [pc, #28]	@ (8000d5c <HAL_Init+0x40>)
 8000d3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f000 f931 	bl	8000fac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d4a:	2000      	movs	r0, #0
 8000d4c:	f000 f808 	bl	8000d60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d50:	f7ff fe82 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023c00 	.word	0x40023c00

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_InitTick+0x54>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b12      	ldr	r3, [pc, #72]	@ (8000db8 <HAL_InitTick+0x58>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	4619      	mov	r1, r3
 8000d72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 f93b 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e00e      	b.n	8000dac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	2b0f      	cmp	r3, #15
 8000d92:	d80a      	bhi.n	8000daa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d94:	2200      	movs	r2, #0
 8000d96:	6879      	ldr	r1, [r7, #4]
 8000d98:	f04f 30ff 	mov.w	r0, #4294967295
 8000d9c:	f000 f911 	bl	8000fc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000da0:	4a06      	ldr	r2, [pc, #24]	@ (8000dbc <HAL_InitTick+0x5c>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000000 	.word	0x20000000
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000004 	.word	0x20000004

08000dc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_IncTick+0x20>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4413      	add	r3, r2
 8000dd0:	4a04      	ldr	r2, [pc, #16]	@ (8000de4 <HAL_IncTick+0x24>)
 8000dd2:	6013      	str	r3, [r2, #0]
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000008 	.word	0x20000008
 8000de4:	200000d0 	.word	0x200000d0

08000de8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  return uwTick;
 8000dec:	4b03      	ldr	r3, [pc, #12]	@ (8000dfc <HAL_GetTick+0x14>)
 8000dee:	681b      	ldr	r3, [r3, #0]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	200000d0 	.word	0x200000d0

08000e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b084      	sub	sp, #16
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e08:	f7ff ffee 	bl	8000de8 <HAL_GetTick>
 8000e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e18:	d005      	beq.n	8000e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e44 <HAL_Delay+0x44>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	461a      	mov	r2, r3
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e26:	bf00      	nop
 8000e28:	f7ff ffde 	bl	8000de8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	68fa      	ldr	r2, [r7, #12]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d8f7      	bhi.n	8000e28 <HAL_Delay+0x28>
  {
  }
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000008 	.word	0x20000008

08000e48 <__NVIC_SetPriorityGrouping>:
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f003 0307 	and.w	r3, r3, #7
 8000e56:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e58:	4b0c      	ldr	r3, [pc, #48]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e64:	4013      	ands	r3, r2
 8000e66:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7a:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <__NVIC_SetPriorityGrouping+0x44>)
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	60d3      	str	r3, [r2, #12]
}
 8000e80:	bf00      	nop
 8000e82:	3714      	adds	r7, #20
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_GetPriorityGrouping>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e94:	4b04      	ldr	r3, [pc, #16]	@ (8000ea8 <__NVIC_GetPriorityGrouping+0x18>)
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	f003 0307 	and.w	r3, r3, #7
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	e000ed00 	.word	0xe000ed00

08000eac <__NVIC_SetPriority>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	6039      	str	r1, [r7, #0]
 8000eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db0a      	blt.n	8000ed6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2da      	uxtb	r2, r3
 8000ec4:	490c      	ldr	r1, [pc, #48]	@ (8000ef8 <__NVIC_SetPriority+0x4c>)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	0112      	lsls	r2, r2, #4
 8000ecc:	b2d2      	uxtb	r2, r2
 8000ece:	440b      	add	r3, r1
 8000ed0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000ed4:	e00a      	b.n	8000eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4908      	ldr	r1, [pc, #32]	@ (8000efc <__NVIC_SetPriority+0x50>)
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	f003 030f 	and.w	r3, r3, #15
 8000ee2:	3b04      	subs	r3, #4
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	b2d2      	uxtb	r2, r2
 8000ee8:	440b      	add	r3, r1
 8000eea:	761a      	strb	r2, [r3, #24]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	e000e100 	.word	0xe000e100
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <NVIC_EncodePriority>:
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	@ 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f003 0307 	and.w	r3, r3, #7
 8000f12:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	f1c3 0307 	rsb	r3, r3, #7
 8000f1a:	2b04      	cmp	r3, #4
 8000f1c:	bf28      	it	cs
 8000f1e:	2304      	movcs	r3, #4
 8000f20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3304      	adds	r3, #4
 8000f26:	2b06      	cmp	r3, #6
 8000f28:	d902      	bls.n	8000f30 <NVIC_EncodePriority+0x30>
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	3b03      	subs	r3, #3
 8000f2e:	e000      	b.n	8000f32 <NVIC_EncodePriority+0x32>
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	f04f 32ff 	mov.w	r2, #4294967295
 8000f38:	69bb      	ldr	r3, [r7, #24]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43da      	mvns	r2, r3
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	401a      	ands	r2, r3
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f48:	f04f 31ff 	mov.w	r1, #4294967295
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	43d9      	mvns	r1, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	4313      	orrs	r3, r2
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3724      	adds	r7, #36	@ 0x24
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
	...

08000f68 <SysTick_Config>:
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3b01      	subs	r3, #1
 8000f74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f78:	d301      	bcc.n	8000f7e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e00f      	b.n	8000f9e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f86:	210f      	movs	r1, #15
 8000f88:	f04f 30ff 	mov.w	r0, #4294967295
 8000f8c:	f7ff ff8e 	bl	8000eac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f90:	4b05      	ldr	r3, [pc, #20]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f96:	4b04      	ldr	r3, [pc, #16]	@ (8000fa8 <SysTick_Config+0x40>)
 8000f98:	2207      	movs	r2, #7
 8000f9a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000f9c:	2300      	movs	r3, #0
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	e000e010 	.word	0xe000e010

08000fac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff ff47 	bl	8000e48 <__NVIC_SetPriorityGrouping>
}
 8000fba:	bf00      	nop
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b086      	sub	sp, #24
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	4603      	mov	r3, r0
 8000fca:	60b9      	str	r1, [r7, #8]
 8000fcc:	607a      	str	r2, [r7, #4]
 8000fce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fd4:	f7ff ff5c 	bl	8000e90 <__NVIC_GetPriorityGrouping>
 8000fd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	68b9      	ldr	r1, [r7, #8]
 8000fde:	6978      	ldr	r0, [r7, #20]
 8000fe0:	f7ff ff8e 	bl	8000f00 <NVIC_EncodePriority>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff5d 	bl	8000eac <__NVIC_SetPriority>
}
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffb0 	bl	8000f68 <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b089      	sub	sp, #36	@ 0x24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001022:	2300      	movs	r3, #0
 8001024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	2300      	movs	r3, #0
 800102c:	61fb      	str	r3, [r7, #28]
 800102e:	e165      	b.n	80012fc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001030:	2201      	movs	r2, #1
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	697a      	ldr	r2, [r7, #20]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	429a      	cmp	r2, r3
 800104a:	f040 8154 	bne.w	80012f6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f003 0303 	and.w	r3, r3, #3
 8001056:	2b01      	cmp	r3, #1
 8001058:	d005      	beq.n	8001066 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001062:	2b02      	cmp	r3, #2
 8001064:	d130      	bne.n	80010c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	2203      	movs	r2, #3
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	43db      	mvns	r3, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4013      	ands	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68da      	ldr	r2, [r3, #12]
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800109c:	2201      	movs	r2, #1
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	091b      	lsrs	r3, r3, #4
 80010b2:	f003 0201 	and.w	r2, r3, #1
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0303 	and.w	r3, r3, #3
 80010d0:	2b03      	cmp	r3, #3
 80010d2:	d017      	beq.n	8001104 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0303 	and.w	r3, r3, #3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d123      	bne.n	8001158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	08da      	lsrs	r2, r3, #3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3208      	adds	r2, #8
 8001118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0307 	and.w	r3, r3, #7
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	220f      	movs	r2, #15
 8001128:	fa02 f303 	lsl.w	r3, r2, r3
 800112c:	43db      	mvns	r3, r3
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4013      	ands	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	691a      	ldr	r2, [r3, #16]
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	fa02 f303 	lsl.w	r3, r2, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4313      	orrs	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	08da      	lsrs	r2, r3, #3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	3208      	adds	r2, #8
 8001152:	69b9      	ldr	r1, [r7, #24]
 8001154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	005b      	lsls	r3, r3, #1
 8001162:	2203      	movs	r2, #3
 8001164:	fa02 f303 	lsl.w	r3, r2, r3
 8001168:	43db      	mvns	r3, r3
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4013      	ands	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0203 	and.w	r2, r3, #3
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4313      	orrs	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001194:	2b00      	cmp	r3, #0
 8001196:	f000 80ae 	beq.w	80012f6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	4b5d      	ldr	r3, [pc, #372]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	4a5c      	ldr	r2, [pc, #368]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001314 <HAL_GPIO_Init+0x300>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011b6:	4a58      	ldr	r2, [pc, #352]	@ (8001318 <HAL_GPIO_Init+0x304>)
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f003 0303 	and.w	r3, r3, #3
 80011ca:	009b      	lsls	r3, r3, #2
 80011cc:	220f      	movs	r2, #15
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a4f      	ldr	r2, [pc, #316]	@ (800131c <HAL_GPIO_Init+0x308>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x21a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a4e      	ldr	r2, [pc, #312]	@ (8001320 <HAL_GPIO_Init+0x30c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x216>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4d      	ldr	r2, [pc, #308]	@ (8001324 <HAL_GPIO_Init+0x310>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x212>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001328 <HAL_GPIO_Init+0x314>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x20e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4b      	ldr	r2, [pc, #300]	@ (800132c <HAL_GPIO_Init+0x318>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x20a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4a      	ldr	r2, [pc, #296]	@ (8001330 <HAL_GPIO_Init+0x31c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x206>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a49      	ldr	r2, [pc, #292]	@ (8001334 <HAL_GPIO_Init+0x320>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x202>
 8001212:	2306      	movs	r3, #6
 8001214:	e00c      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001216:	2307      	movs	r3, #7
 8001218:	e00a      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121a:	2305      	movs	r3, #5
 800121c:	e008      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800121e:	2304      	movs	r3, #4
 8001220:	e006      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001222:	2303      	movs	r3, #3
 8001224:	e004      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 8001226:	2302      	movs	r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122a:	2301      	movs	r3, #1
 800122c:	e000      	b.n	8001230 <HAL_GPIO_Init+0x21c>
 800122e:	2300      	movs	r3, #0
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	f002 0203 	and.w	r2, r2, #3
 8001236:	0092      	lsls	r2, r2, #2
 8001238:	4093      	lsls	r3, r2
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001240:	4935      	ldr	r1, [pc, #212]	@ (8001318 <HAL_GPIO_Init+0x304>)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	089b      	lsrs	r3, r3, #2
 8001246:	3302      	adds	r3, #2
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800124e:	4b3a      	ldr	r3, [pc, #232]	@ (8001338 <HAL_GPIO_Init+0x324>)
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	43db      	mvns	r3, r3
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	4013      	ands	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800126a:	69ba      	ldr	r2, [r7, #24]
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001272:	4a31      	ldr	r2, [pc, #196]	@ (8001338 <HAL_GPIO_Init+0x324>)
 8001274:	69bb      	ldr	r3, [r7, #24]
 8001276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001278:	4b2f      	ldr	r3, [pc, #188]	@ (8001338 <HAL_GPIO_Init+0x324>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800127e:	693b      	ldr	r3, [r7, #16]
 8001280:	43db      	mvns	r3, r3
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800129c:	4a26      	ldr	r2, [pc, #152]	@ (8001338 <HAL_GPIO_Init+0x324>)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d003      	beq.n	80012c6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	4013      	ands	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012f0:	4a11      	ldr	r2, [pc, #68]	@ (8001338 <HAL_GPIO_Init+0x324>)
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3301      	adds	r3, #1
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0f      	cmp	r3, #15
 8001300:	f67f ae96 	bls.w	8001030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3724      	adds	r7, #36	@ 0x24
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800
 8001318:	40013800 	.word	0x40013800
 800131c:	40020000 	.word	0x40020000
 8001320:	40020400 	.word	0x40020400
 8001324:	40020800 	.word	0x40020800
 8001328:	40020c00 	.word	0x40020c00
 800132c:	40021000 	.word	0x40021000
 8001330:	40021400 	.word	0x40021400
 8001334:	40021800 	.word	0x40021800
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	691a      	ldr	r2, [r3, #16]
 800134c:	887b      	ldrh	r3, [r7, #2]
 800134e:	4013      	ands	r3, r2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001354:	2301      	movs	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	e001      	b.n	800135e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800135e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	460b      	mov	r3, r1
 8001376:	807b      	strh	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800137c:	787b      	ldrb	r3, [r7, #1]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001382:	887a      	ldrh	r2, [r7, #2]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001388:	e003      	b.n	8001392 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800138a:	887b      	ldrh	r3, [r7, #2]
 800138c:	041a      	lsls	r2, r3, #16
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	619a      	str	r2, [r3, #24]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0cc      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b68      	ldr	r3, [pc, #416]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d90c      	bls.n	80013dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b65      	ldr	r3, [pc, #404]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ca:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	683a      	ldr	r2, [r7, #0]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	d001      	beq.n	80013dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	e0b8      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d020      	beq.n	800142a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013f4:	4b59      	ldr	r3, [pc, #356]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	4a58      	ldr	r2, [pc, #352]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80013fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d005      	beq.n	8001418 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800140c:	4b53      	ldr	r3, [pc, #332]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	4a52      	ldr	r2, [pc, #328]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001416:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001418:	4b50      	ldr	r3, [pc, #320]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	494d      	ldr	r1, [pc, #308]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	4313      	orrs	r3, r2
 8001428:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	2b00      	cmp	r3, #0
 8001434:	d044      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d107      	bne.n	800144e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143e:	4b47      	ldr	r3, [pc, #284]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d119      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e07f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	2b02      	cmp	r3, #2
 8001454:	d003      	beq.n	800145e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800145a:	2b03      	cmp	r3, #3
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800145e:	4b3f      	ldr	r3, [pc, #252]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d109      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e06f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146e:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0302 	and.w	r3, r3, #2
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e067      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800147e:	4b37      	ldr	r3, [pc, #220]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f023 0203 	bic.w	r2, r3, #3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4934      	ldr	r1, [pc, #208]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	4313      	orrs	r3, r2
 800148e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001490:	f7ff fcaa 	bl	8000de8 <HAL_GetTick>
 8001494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001496:	e00a      	b.n	80014ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001498:	f7ff fca6 	bl	8000de8 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e04f      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ae:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f003 020c 	and.w	r2, r3, #12
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	429a      	cmp	r2, r3
 80014be:	d1eb      	bne.n	8001498 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c0:	4b25      	ldr	r3, [pc, #148]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 030f 	and.w	r3, r3, #15
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	d20c      	bcs.n	80014e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ce:	4b22      	ldr	r3, [pc, #136]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d6:	4b20      	ldr	r3, [pc, #128]	@ (8001558 <HAL_RCC_ClockConfig+0x1b8>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d001      	beq.n	80014e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e032      	b.n	800154e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d008      	beq.n	8001506 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f4:	4b19      	ldr	r3, [pc, #100]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 80014f6:	689b      	ldr	r3, [r3, #8]
 80014f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	4916      	ldr	r1, [pc, #88]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001502:	4313      	orrs	r3, r2
 8001504:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d009      	beq.n	8001526 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001512:	4b12      	ldr	r3, [pc, #72]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	490e      	ldr	r1, [pc, #56]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001526:	f000 f855 	bl	80015d4 <HAL_RCC_GetSysClockFreq>
 800152a:	4602      	mov	r2, r0
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	091b      	lsrs	r3, r3, #4
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	490a      	ldr	r1, [pc, #40]	@ (8001560 <HAL_RCC_ClockConfig+0x1c0>)
 8001538:	5ccb      	ldrb	r3, [r1, r3]
 800153a:	fa22 f303 	lsr.w	r3, r2, r3
 800153e:	4a09      	ldr	r2, [pc, #36]	@ (8001564 <HAL_RCC_ClockConfig+0x1c4>)
 8001540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001542:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <HAL_RCC_ClockConfig+0x1c8>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fc0a 	bl	8000d60 <HAL_InitTick>

  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023c00 	.word	0x40023c00
 800155c:	40023800 	.word	0x40023800
 8001560:	08002e24 	.word	0x08002e24
 8001564:	20000000 	.word	0x20000000
 8001568:	20000004 	.word	0x20000004

0800156c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001570:	4b03      	ldr	r3, [pc, #12]	@ (8001580 <HAL_RCC_GetHCLKFreq+0x14>)
 8001572:	681b      	ldr	r3, [r3, #0]
}
 8001574:	4618      	mov	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000000 	.word	0x20000000

08001584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001588:	f7ff fff0 	bl	800156c <HAL_RCC_GetHCLKFreq>
 800158c:	4602      	mov	r2, r0
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	0a9b      	lsrs	r3, r3, #10
 8001594:	f003 0307 	and.w	r3, r3, #7
 8001598:	4903      	ldr	r1, [pc, #12]	@ (80015a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800159a:	5ccb      	ldrb	r3, [r1, r3]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40023800 	.word	0x40023800
 80015a8:	08002e34 	.word	0x08002e34

080015ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015b0:	f7ff ffdc 	bl	800156c <HAL_RCC_GetHCLKFreq>
 80015b4:	4602      	mov	r2, r0
 80015b6:	4b05      	ldr	r3, [pc, #20]	@ (80015cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	0b5b      	lsrs	r3, r3, #13
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	4903      	ldr	r1, [pc, #12]	@ (80015d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015c2:	5ccb      	ldrb	r3, [r1, r3]
 80015c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	08002e34 	.word	0x08002e34

080015d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015d8:	b0ae      	sub	sp, #184	@ 0xb8
 80015da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80015dc:	2300      	movs	r3, #0
 80015de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015fa:	4bcb      	ldr	r3, [pc, #812]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 030c 	and.w	r3, r3, #12
 8001602:	2b0c      	cmp	r3, #12
 8001604:	f200 8206 	bhi.w	8001a14 <HAL_RCC_GetSysClockFreq+0x440>
 8001608:	a201      	add	r2, pc, #4	@ (adr r2, 8001610 <HAL_RCC_GetSysClockFreq+0x3c>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001645 	.word	0x08001645
 8001614:	08001a15 	.word	0x08001a15
 8001618:	08001a15 	.word	0x08001a15
 800161c:	08001a15 	.word	0x08001a15
 8001620:	0800164d 	.word	0x0800164d
 8001624:	08001a15 	.word	0x08001a15
 8001628:	08001a15 	.word	0x08001a15
 800162c:	08001a15 	.word	0x08001a15
 8001630:	08001655 	.word	0x08001655
 8001634:	08001a15 	.word	0x08001a15
 8001638:	08001a15 	.word	0x08001a15
 800163c:	08001a15 	.word	0x08001a15
 8001640:	08001845 	.word	0x08001845
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001644:	4bb9      	ldr	r3, [pc, #740]	@ (800192c <HAL_RCC_GetSysClockFreq+0x358>)
 8001646:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800164a:	e1e7      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800164c:	4bb8      	ldr	r3, [pc, #736]	@ (8001930 <HAL_RCC_GetSysClockFreq+0x35c>)
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001652:	e1e3      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4bb4      	ldr	r3, [pc, #720]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001660:	4bb1      	ldr	r3, [pc, #708]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d071      	beq.n	8001750 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4bae      	ldr	r3, [pc, #696]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	2200      	movs	r2, #0
 8001674:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001678:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800167c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001688:	2300      	movs	r3, #0
 800168a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800168e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80016c4:	4649      	mov	r1, r9
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4641      	mov	r1, r8
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4641      	mov	r1, r8
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4641      	mov	r1, r8
 80016d4:	1a51      	subs	r1, r2, r1
 80016d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80016d8:	4649      	mov	r1, r9
 80016da:	eb63 0301 	sbc.w	r3, r3, r1
 80016de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016e0:	f04f 0200 	mov.w	r2, #0
 80016e4:	f04f 0300 	mov.w	r3, #0
 80016e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80016ec:	4649      	mov	r1, r9
 80016ee:	00cb      	lsls	r3, r1, #3
 80016f0:	4641      	mov	r1, r8
 80016f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80016f6:	4641      	mov	r1, r8
 80016f8:	00ca      	lsls	r2, r1, #3
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4603      	mov	r3, r0
 8001700:	4622      	mov	r2, r4
 8001702:	189b      	adds	r3, r3, r2
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
 8001706:	462b      	mov	r3, r5
 8001708:	460a      	mov	r2, r1
 800170a:	eb42 0303 	adc.w	r3, r2, r3
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001710:	f04f 0200 	mov.w	r2, #0
 8001714:	f04f 0300 	mov.w	r3, #0
 8001718:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800171c:	4629      	mov	r1, r5
 800171e:	024b      	lsls	r3, r1, #9
 8001720:	4621      	mov	r1, r4
 8001722:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001726:	4621      	mov	r1, r4
 8001728:	024a      	lsls	r2, r1, #9
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001732:	2200      	movs	r2, #0
 8001734:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001738:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800173c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001740:	f7fe fd60 	bl	8000204 <__aeabi_uldivmod>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4613      	mov	r3, r2
 800174a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800174e:	e067      	b.n	8001820 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	099b      	lsrs	r3, r3, #6
 8001756:	2200      	movs	r2, #0
 8001758:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800175c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001760:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001764:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001768:	67bb      	str	r3, [r7, #120]	@ 0x78
 800176a:	2300      	movs	r3, #0
 800176c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800176e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001772:	4622      	mov	r2, r4
 8001774:	462b      	mov	r3, r5
 8001776:	f04f 0000 	mov.w	r0, #0
 800177a:	f04f 0100 	mov.w	r1, #0
 800177e:	0159      	lsls	r1, r3, #5
 8001780:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001784:	0150      	lsls	r0, r2, #5
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4621      	mov	r1, r4
 800178c:	1a51      	subs	r1, r2, r1
 800178e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001790:	4629      	mov	r1, r5
 8001792:	eb63 0301 	sbc.w	r3, r3, r1
 8001796:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80017a4:	4649      	mov	r1, r9
 80017a6:	018b      	lsls	r3, r1, #6
 80017a8:	4641      	mov	r1, r8
 80017aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ae:	4641      	mov	r1, r8
 80017b0:	018a      	lsls	r2, r1, #6
 80017b2:	4641      	mov	r1, r8
 80017b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80017b8:	4649      	mov	r1, r9
 80017ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80017be:	f04f 0200 	mov.w	r2, #0
 80017c2:	f04f 0300 	mov.w	r3, #0
 80017c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80017ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80017ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80017d2:	4692      	mov	sl, r2
 80017d4:	469b      	mov	fp, r3
 80017d6:	4623      	mov	r3, r4
 80017d8:	eb1a 0303 	adds.w	r3, sl, r3
 80017dc:	623b      	str	r3, [r7, #32]
 80017de:	462b      	mov	r3, r5
 80017e0:	eb4b 0303 	adc.w	r3, fp, r3
 80017e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	f04f 0300 	mov.w	r3, #0
 80017ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80017f2:	4629      	mov	r1, r5
 80017f4:	028b      	lsls	r3, r1, #10
 80017f6:	4621      	mov	r1, r4
 80017f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017fc:	4621      	mov	r1, r4
 80017fe:	028a      	lsls	r2, r1, #10
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001808:	2200      	movs	r2, #0
 800180a:	673b      	str	r3, [r7, #112]	@ 0x70
 800180c:	677a      	str	r2, [r7, #116]	@ 0x74
 800180e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001812:	f7fe fcf7 	bl	8000204 <__aeabi_uldivmod>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4613      	mov	r3, r2
 800181c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001820:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	0c1b      	lsrs	r3, r3, #16
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	3301      	adds	r3, #1
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001836:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e0eb      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001844:	4b38      	ldr	r3, [pc, #224]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800184c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001850:	4b35      	ldr	r3, [pc, #212]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d06b      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185c:	4b32      	ldr	r3, [pc, #200]	@ (8001928 <HAL_RCC_GetSysClockFreq+0x354>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	099b      	lsrs	r3, r3, #6
 8001862:	2200      	movs	r2, #0
 8001864:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001866:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800186a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800186e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001870:	2300      	movs	r3, #0
 8001872:	667b      	str	r3, [r7, #100]	@ 0x64
 8001874:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001878:	4622      	mov	r2, r4
 800187a:	462b      	mov	r3, r5
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0159      	lsls	r1, r3, #5
 8001886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188a:	0150      	lsls	r0, r2, #5
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4621      	mov	r1, r4
 8001892:	1a51      	subs	r1, r2, r1
 8001894:	61b9      	str	r1, [r7, #24]
 8001896:	4629      	mov	r1, r5
 8001898:	eb63 0301 	sbc.w	r3, r3, r1
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	f04f 0200 	mov.w	r2, #0
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80018aa:	4659      	mov	r1, fp
 80018ac:	018b      	lsls	r3, r1, #6
 80018ae:	4651      	mov	r1, sl
 80018b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018b4:	4651      	mov	r1, sl
 80018b6:	018a      	lsls	r2, r1, #6
 80018b8:	4651      	mov	r1, sl
 80018ba:	ebb2 0801 	subs.w	r8, r2, r1
 80018be:	4659      	mov	r1, fp
 80018c0:	eb63 0901 	sbc.w	r9, r3, r1
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	f04f 0300 	mov.w	r3, #0
 80018cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018d8:	4690      	mov	r8, r2
 80018da:	4699      	mov	r9, r3
 80018dc:	4623      	mov	r3, r4
 80018de:	eb18 0303 	adds.w	r3, r8, r3
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	462b      	mov	r3, r5
 80018e6:	eb49 0303 	adc.w	r3, r9, r3
 80018ea:	617b      	str	r3, [r7, #20]
 80018ec:	f04f 0200 	mov.w	r2, #0
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80018f8:	4629      	mov	r1, r5
 80018fa:	024b      	lsls	r3, r1, #9
 80018fc:	4621      	mov	r1, r4
 80018fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001902:	4621      	mov	r1, r4
 8001904:	024a      	lsls	r2, r1, #9
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800190e:	2200      	movs	r2, #0
 8001910:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001912:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001914:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001918:	f7fe fc74 	bl	8000204 <__aeabi_uldivmod>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4613      	mov	r3, r2
 8001922:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001926:	e065      	b.n	80019f4 <HAL_RCC_GetSysClockFreq+0x420>
 8001928:	40023800 	.word	0x40023800
 800192c:	00f42400 	.word	0x00f42400
 8001930:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001934:	4b3d      	ldr	r3, [pc, #244]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x458>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	2200      	movs	r2, #0
 800193c:	4618      	mov	r0, r3
 800193e:	4611      	mov	r1, r2
 8001940:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001944:	653b      	str	r3, [r7, #80]	@ 0x50
 8001946:	2300      	movs	r3, #0
 8001948:	657b      	str	r3, [r7, #84]	@ 0x54
 800194a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800194e:	4642      	mov	r2, r8
 8001950:	464b      	mov	r3, r9
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0159      	lsls	r1, r3, #5
 800195c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001960:	0150      	lsls	r0, r2, #5
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4641      	mov	r1, r8
 8001968:	1a51      	subs	r1, r2, r1
 800196a:	60b9      	str	r1, [r7, #8]
 800196c:	4649      	mov	r1, r9
 800196e:	eb63 0301 	sbc.w	r3, r3, r1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001980:	4659      	mov	r1, fp
 8001982:	018b      	lsls	r3, r1, #6
 8001984:	4651      	mov	r1, sl
 8001986:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198a:	4651      	mov	r1, sl
 800198c:	018a      	lsls	r2, r1, #6
 800198e:	4651      	mov	r1, sl
 8001990:	1a54      	subs	r4, r2, r1
 8001992:	4659      	mov	r1, fp
 8001994:	eb63 0501 	sbc.w	r5, r3, r1
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	00eb      	lsls	r3, r5, #3
 80019a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80019a6:	00e2      	lsls	r2, r4, #3
 80019a8:	4614      	mov	r4, r2
 80019aa:	461d      	mov	r5, r3
 80019ac:	4643      	mov	r3, r8
 80019ae:	18e3      	adds	r3, r4, r3
 80019b0:	603b      	str	r3, [r7, #0]
 80019b2:	464b      	mov	r3, r9
 80019b4:	eb45 0303 	adc.w	r3, r5, r3
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019c6:	4629      	mov	r1, r5
 80019c8:	028b      	lsls	r3, r1, #10
 80019ca:	4621      	mov	r1, r4
 80019cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019d0:	4621      	mov	r1, r4
 80019d2:	028a      	lsls	r2, r1, #10
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019dc:	2200      	movs	r2, #0
 80019de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80019e6:	f7fe fc0d 	bl	8000204 <__aeabi_uldivmod>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4613      	mov	r3, r2
 80019f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80019f4:	4b0d      	ldr	r3, [pc, #52]	@ (8001a2c <HAL_RCC_GetSysClockFreq+0x458>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	0f1b      	lsrs	r3, r3, #28
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001a02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001a06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a12:	e003      	b.n	8001a1c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a14:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001a1a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a1c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	37b8      	adds	r7, #184	@ 0xb8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	00f42400 	.word	0x00f42400

08001a34 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e28d      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 8083 	beq.w	8001b5a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a54:	4b94      	ldr	r3, [pc, #592]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f003 030c 	and.w	r3, r3, #12
 8001a5c:	2b04      	cmp	r3, #4
 8001a5e:	d019      	beq.n	8001a94 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a60:	4b91      	ldr	r3, [pc, #580]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d106      	bne.n	8001a7a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a6c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a78:	d00c      	beq.n	8001a94 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a7a:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d112      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a86:	4b88      	ldr	r3, [pc, #544]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a8e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a92:	d10b      	bne.n	8001aac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	4b84      	ldr	r3, [pc, #528]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d05b      	beq.n	8001b58 <HAL_RCC_OscConfig+0x124>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d157      	bne.n	8001b58 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e25a      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ab4:	d106      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x90>
 8001ab6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a7b      	ldr	r2, [pc, #492]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ac0:	6013      	str	r3, [r2, #0]
 8001ac2:	e01d      	b.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001acc:	d10c      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xb4>
 8001ace:	4b76      	ldr	r3, [pc, #472]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a75      	ldr	r2, [pc, #468]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ad8:	6013      	str	r3, [r2, #0]
 8001ada:	4b73      	ldr	r3, [pc, #460]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a72      	ldr	r2, [pc, #456]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	e00b      	b.n	8001b00 <HAL_RCC_OscConfig+0xcc>
 8001ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001aee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	4b6c      	ldr	r3, [pc, #432]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a6b      	ldr	r2, [pc, #428]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001afa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001afe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d013      	beq.n	8001b30 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7ff f96e 	bl	8000de8 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b10:	f7ff f96a 	bl	8000de8 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b64      	cmp	r3, #100	@ 0x64
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e21f      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b22:	4b61      	ldr	r3, [pc, #388]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0f0      	beq.n	8001b10 <HAL_RCC_OscConfig+0xdc>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b30:	f7ff f95a 	bl	8000de8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b38:	f7ff f956 	bl	8000de8 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	@ 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e20b      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b4a:	4b57      	ldr	r3, [pc, #348]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f0      	bne.n	8001b38 <HAL_RCC_OscConfig+0x104>
 8001b56:	e000      	b.n	8001b5a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d06f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b66:	4b50      	ldr	r3, [pc, #320]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	f003 030c 	and.w	r3, r3, #12
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d017      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b72:	4b4d      	ldr	r3, [pc, #308]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b7a:	2b08      	cmp	r3, #8
 8001b7c:	d105      	bne.n	8001b8a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b8a:	4b47      	ldr	r3, [pc, #284]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d11c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b96:	4b44      	ldr	r3, [pc, #272]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d116      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ba2:	4b41      	ldr	r3, [pc, #260]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <HAL_RCC_OscConfig+0x186>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e1d3      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bba:	4b3b      	ldr	r3, [pc, #236]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	691b      	ldr	r3, [r3, #16]
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	4937      	ldr	r1, [pc, #220]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bce:	e03a      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d020      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bd8:	4b34      	ldr	r3, [pc, #208]	@ (8001cac <HAL_RCC_OscConfig+0x278>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bde:	f7ff f903 	bl	8000de8 <HAL_GetTick>
 8001be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001be4:	e008      	b.n	8001bf8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be6:	f7ff f8ff 	bl	8000de8 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d901      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e1b4      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d0f0      	beq.n	8001be6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c04:	4b28      	ldr	r3, [pc, #160]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	4925      	ldr	r1, [pc, #148]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	600b      	str	r3, [r1, #0]
 8001c18:	e015      	b.n	8001c46 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c1a:	4b24      	ldr	r3, [pc, #144]	@ (8001cac <HAL_RCC_OscConfig+0x278>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c20:	f7ff f8e2 	bl	8000de8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c28:	f7ff f8de 	bl	8000de8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e193      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1f0      	bne.n	8001c28 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d036      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	695b      	ldr	r3, [r3, #20]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c5a:	4b15      	ldr	r3, [pc, #84]	@ (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f8c2 	bl	8000de8 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f8be 	bl	8000de8 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e173      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <HAL_RCC_OscConfig+0x274>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x234>
 8001c86:	e01b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b09      	ldr	r3, [pc, #36]	@ (8001cb0 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f8ab 	bl	8000de8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	e00e      	b.n	8001cb4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f8a7 	bl	8000de8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d907      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e15c      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	42470000 	.word	0x42470000
 8001cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cb4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1ea      	bne.n	8001c96 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 8097 	beq.w	8001dfc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cd2:	4b83      	ldr	r3, [pc, #524]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d10f      	bne.n	8001cfe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a7e      	ldr	r2, [pc, #504]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b7c      	ldr	r3, [pc, #496]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cfe:	4b79      	ldr	r3, [pc, #484]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d118      	bne.n	8001d3c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d0a:	4b76      	ldr	r3, [pc, #472]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d16:	f7ff f867 	bl	8000de8 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d1e:	f7ff f863 	bl	8000de8 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e118      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b6c      	ldr	r3, [pc, #432]	@ (8001ee4 <HAL_RCC_OscConfig+0x4b0>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0f0      	beq.n	8001d1e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d106      	bne.n	8001d52 <HAL_RCC_OscConfig+0x31e>
 8001d44:	4b66      	ldr	r3, [pc, #408]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a65      	ldr	r2, [pc, #404]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d4a:	f043 0301 	orr.w	r3, r3, #1
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x358>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x340>
 8001d5a:	4b61      	ldr	r3, [pc, #388]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a60      	ldr	r2, [pc, #384]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	4b5e      	ldr	r3, [pc, #376]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x358>
 8001d74:	4b5a      	ldr	r3, [pc, #360]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a59      	ldr	r2, [pc, #356]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	4b57      	ldr	r3, [pc, #348]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a56      	ldr	r2, [pc, #344]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f828 	bl	8000de8 <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f824 	bl	8000de8 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e0d7      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x368>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f812 	bl	8000de8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f80e 	bl	8000de8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e0c1      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d105      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	4a3a      	ldr	r2, [pc, #232]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 80ad 	beq.w	8001f60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d060      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	699b      	ldr	r3, [r3, #24]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d145      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e1a:	4b33      	ldr	r3, [pc, #204]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7fe ffe2 	bl	8000de8 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7fe ffde 	bl	8000de8 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e093      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b29      	ldr	r3, [pc, #164]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	431a      	orrs	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	085b      	lsrs	r3, r3, #1
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	041b      	lsls	r3, r3, #16
 8001e62:	431a      	orrs	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e68:	061b      	lsls	r3, r3, #24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	071b      	lsls	r3, r3, #28
 8001e72:	491b      	ldr	r1, [pc, #108]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e78:	4b1b      	ldr	r3, [pc, #108]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7fe ffb3 	bl	8000de8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e86:	f7fe ffaf 	bl	8000de8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b02      	cmp	r3, #2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e064      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0f0      	beq.n	8001e86 <HAL_RCC_OscConfig+0x452>
 8001ea4:	e05c      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea6:	4b10      	ldr	r3, [pc, #64]	@ (8001ee8 <HAL_RCC_OscConfig+0x4b4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe ff9c 	bl	8000de8 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7fe ff98 	bl	8000de8 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e04d      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_RCC_OscConfig+0x4ac>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d1f0      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x480>
 8001ed2:	e045      	b.n	8001f60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d107      	bne.n	8001eec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e040      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <HAL_RCC_OscConfig+0x538>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	699b      	ldr	r3, [r3, #24]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d030      	beq.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d129      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d122      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f16:	68fa      	ldr	r2, [r7, #12]
 8001f18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d119      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f32:	085b      	lsrs	r3, r3, #1
 8001f34:	3b01      	subs	r3, #1
 8001f36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d10f      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d107      	bne.n	8001f5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3718      	adds	r7, #24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023800 	.word	0x40023800

08001f70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e042      	b.n	8002008 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fd86 	bl	8000aa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2224      	movs	r2, #36	@ 0x24
 8001fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	68da      	ldr	r2, [r3, #12]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001fb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 f82b 	bl	8002010 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691a      	ldr	r2, [r3, #16]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001fc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001fd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001fe8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2220      	movs	r2, #32
 8001ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002014:	b0c0      	sub	sp, #256	@ 0x100
 8002016:	af00      	add	r7, sp, #0
 8002018:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800201c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	ea40 0301 	orr.w	r3, r0, r1
 8002038:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800203a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800203e:	689a      	ldr	r2, [r3, #8]
 8002040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	431a      	orrs	r2, r3
 8002048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	431a      	orrs	r2, r3
 8002050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	4313      	orrs	r3, r2
 8002058:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800205c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002068:	f021 010c 	bic.w	r1, r1, #12
 800206c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002076:	430b      	orrs	r3, r1
 8002078:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800207a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800208a:	6999      	ldr	r1, [r3, #24]
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	ea40 0301 	orr.w	r3, r0, r1
 8002096:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b8f      	ldr	r3, [pc, #572]	@ (80022dc <UART_SetConfig+0x2cc>)
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d005      	beq.n	80020b0 <UART_SetConfig+0xa0>
 80020a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	4b8d      	ldr	r3, [pc, #564]	@ (80022e0 <UART_SetConfig+0x2d0>)
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d104      	bne.n	80020ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80020b0:	f7ff fa7c 	bl	80015ac <HAL_RCC_GetPCLK2Freq>
 80020b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80020b8:	e003      	b.n	80020c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020ba:	f7ff fa63 	bl	8001584 <HAL_RCC_GetPCLK1Freq>
 80020be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80020c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80020cc:	f040 810c 	bne.w	80022e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80020d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020d4:	2200      	movs	r2, #0
 80020d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80020da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80020de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80020e2:	4622      	mov	r2, r4
 80020e4:	462b      	mov	r3, r5
 80020e6:	1891      	adds	r1, r2, r2
 80020e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80020ea:	415b      	adcs	r3, r3
 80020ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80020ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80020f2:	4621      	mov	r1, r4
 80020f4:	eb12 0801 	adds.w	r8, r2, r1
 80020f8:	4629      	mov	r1, r5
 80020fa:	eb43 0901 	adc.w	r9, r3, r1
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	f04f 0300 	mov.w	r3, #0
 8002106:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800210a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800210e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002112:	4690      	mov	r8, r2
 8002114:	4699      	mov	r9, r3
 8002116:	4623      	mov	r3, r4
 8002118:	eb18 0303 	adds.w	r3, r8, r3
 800211c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002120:	462b      	mov	r3, r5
 8002122:	eb49 0303 	adc.w	r3, r9, r3
 8002126:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800212a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002136:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800213a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800213e:	460b      	mov	r3, r1
 8002140:	18db      	adds	r3, r3, r3
 8002142:	653b      	str	r3, [r7, #80]	@ 0x50
 8002144:	4613      	mov	r3, r2
 8002146:	eb42 0303 	adc.w	r3, r2, r3
 800214a:	657b      	str	r3, [r7, #84]	@ 0x54
 800214c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002150:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002154:	f7fe f856 	bl	8000204 <__aeabi_uldivmod>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4b61      	ldr	r3, [pc, #388]	@ (80022e4 <UART_SetConfig+0x2d4>)
 800215e:	fba3 2302 	umull	r2, r3, r3, r2
 8002162:	095b      	lsrs	r3, r3, #5
 8002164:	011c      	lsls	r4, r3, #4
 8002166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800216a:	2200      	movs	r2, #0
 800216c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002170:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002174:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002178:	4642      	mov	r2, r8
 800217a:	464b      	mov	r3, r9
 800217c:	1891      	adds	r1, r2, r2
 800217e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002180:	415b      	adcs	r3, r3
 8002182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002184:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002188:	4641      	mov	r1, r8
 800218a:	eb12 0a01 	adds.w	sl, r2, r1
 800218e:	4649      	mov	r1, r9
 8002190:	eb43 0b01 	adc.w	fp, r3, r1
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	f04f 0300 	mov.w	r3, #0
 800219c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021a8:	4692      	mov	sl, r2
 80021aa:	469b      	mov	fp, r3
 80021ac:	4643      	mov	r3, r8
 80021ae:	eb1a 0303 	adds.w	r3, sl, r3
 80021b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80021b6:	464b      	mov	r3, r9
 80021b8:	eb4b 0303 	adc.w	r3, fp, r3
 80021bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80021c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80021cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80021d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80021d4:	460b      	mov	r3, r1
 80021d6:	18db      	adds	r3, r3, r3
 80021d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80021da:	4613      	mov	r3, r2
 80021dc:	eb42 0303 	adc.w	r3, r2, r3
 80021e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80021e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80021e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80021ea:	f7fe f80b 	bl	8000204 <__aeabi_uldivmod>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4611      	mov	r1, r2
 80021f4:	4b3b      	ldr	r3, [pc, #236]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80021f6:	fba3 2301 	umull	r2, r3, r3, r1
 80021fa:	095b      	lsrs	r3, r3, #5
 80021fc:	2264      	movs	r2, #100	@ 0x64
 80021fe:	fb02 f303 	mul.w	r3, r2, r3
 8002202:	1acb      	subs	r3, r1, r3
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800220a:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <UART_SetConfig+0x2d4>)
 800220c:	fba3 2302 	umull	r2, r3, r3, r2
 8002210:	095b      	lsrs	r3, r3, #5
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002218:	441c      	add	r4, r3
 800221a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800221e:	2200      	movs	r2, #0
 8002220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002224:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002228:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800222c:	4642      	mov	r2, r8
 800222e:	464b      	mov	r3, r9
 8002230:	1891      	adds	r1, r2, r2
 8002232:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002234:	415b      	adcs	r3, r3
 8002236:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002238:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800223c:	4641      	mov	r1, r8
 800223e:	1851      	adds	r1, r2, r1
 8002240:	6339      	str	r1, [r7, #48]	@ 0x30
 8002242:	4649      	mov	r1, r9
 8002244:	414b      	adcs	r3, r1
 8002246:	637b      	str	r3, [r7, #52]	@ 0x34
 8002248:	f04f 0200 	mov.w	r2, #0
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002254:	4659      	mov	r1, fp
 8002256:	00cb      	lsls	r3, r1, #3
 8002258:	4651      	mov	r1, sl
 800225a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800225e:	4651      	mov	r1, sl
 8002260:	00ca      	lsls	r2, r1, #3
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	4603      	mov	r3, r0
 8002268:	4642      	mov	r2, r8
 800226a:	189b      	adds	r3, r3, r2
 800226c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002270:	464b      	mov	r3, r9
 8002272:	460a      	mov	r2, r1
 8002274:	eb42 0303 	adc.w	r3, r2, r3
 8002278:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002288:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800228c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002290:	460b      	mov	r3, r1
 8002292:	18db      	adds	r3, r3, r3
 8002294:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002296:	4613      	mov	r3, r2
 8002298:	eb42 0303 	adc.w	r3, r2, r3
 800229c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800229e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80022a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80022a6:	f7fd ffad 	bl	8000204 <__aeabi_uldivmod>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4b0d      	ldr	r3, [pc, #52]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80022b0:	fba3 1302 	umull	r1, r3, r3, r2
 80022b4:	095b      	lsrs	r3, r3, #5
 80022b6:	2164      	movs	r1, #100	@ 0x64
 80022b8:	fb01 f303 	mul.w	r3, r1, r3
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	00db      	lsls	r3, r3, #3
 80022c0:	3332      	adds	r3, #50	@ 0x32
 80022c2:	4a08      	ldr	r2, [pc, #32]	@ (80022e4 <UART_SetConfig+0x2d4>)
 80022c4:	fba2 2303 	umull	r2, r3, r2, r3
 80022c8:	095b      	lsrs	r3, r3, #5
 80022ca:	f003 0207 	and.w	r2, r3, #7
 80022ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4422      	add	r2, r4
 80022d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80022d8:	e106      	b.n	80024e8 <UART_SetConfig+0x4d8>
 80022da:	bf00      	nop
 80022dc:	40011000 	.word	0x40011000
 80022e0:	40011400 	.word	0x40011400
 80022e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80022ec:	2200      	movs	r2, #0
 80022ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80022f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80022fa:	4642      	mov	r2, r8
 80022fc:	464b      	mov	r3, r9
 80022fe:	1891      	adds	r1, r2, r2
 8002300:	6239      	str	r1, [r7, #32]
 8002302:	415b      	adcs	r3, r3
 8002304:	627b      	str	r3, [r7, #36]	@ 0x24
 8002306:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800230a:	4641      	mov	r1, r8
 800230c:	1854      	adds	r4, r2, r1
 800230e:	4649      	mov	r1, r9
 8002310:	eb43 0501 	adc.w	r5, r3, r1
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	00eb      	lsls	r3, r5, #3
 800231e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002322:	00e2      	lsls	r2, r4, #3
 8002324:	4614      	mov	r4, r2
 8002326:	461d      	mov	r5, r3
 8002328:	4643      	mov	r3, r8
 800232a:	18e3      	adds	r3, r4, r3
 800232c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002330:	464b      	mov	r3, r9
 8002332:	eb45 0303 	adc.w	r3, r5, r3
 8002336:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800233a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002346:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002356:	4629      	mov	r1, r5
 8002358:	008b      	lsls	r3, r1, #2
 800235a:	4621      	mov	r1, r4
 800235c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002360:	4621      	mov	r1, r4
 8002362:	008a      	lsls	r2, r1, #2
 8002364:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002368:	f7fd ff4c 	bl	8000204 <__aeabi_uldivmod>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4b60      	ldr	r3, [pc, #384]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002372:	fba3 2302 	umull	r2, r3, r3, r2
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	011c      	lsls	r4, r3, #4
 800237a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800237e:	2200      	movs	r2, #0
 8002380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002384:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002388:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800238c:	4642      	mov	r2, r8
 800238e:	464b      	mov	r3, r9
 8002390:	1891      	adds	r1, r2, r2
 8002392:	61b9      	str	r1, [r7, #24]
 8002394:	415b      	adcs	r3, r3
 8002396:	61fb      	str	r3, [r7, #28]
 8002398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800239c:	4641      	mov	r1, r8
 800239e:	1851      	adds	r1, r2, r1
 80023a0:	6139      	str	r1, [r7, #16]
 80023a2:	4649      	mov	r1, r9
 80023a4:	414b      	adcs	r3, r1
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80023b4:	4659      	mov	r1, fp
 80023b6:	00cb      	lsls	r3, r1, #3
 80023b8:	4651      	mov	r1, sl
 80023ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023be:	4651      	mov	r1, sl
 80023c0:	00ca      	lsls	r2, r1, #3
 80023c2:	4610      	mov	r0, r2
 80023c4:	4619      	mov	r1, r3
 80023c6:	4603      	mov	r3, r0
 80023c8:	4642      	mov	r2, r8
 80023ca:	189b      	adds	r3, r3, r2
 80023cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80023d0:	464b      	mov	r3, r9
 80023d2:	460a      	mov	r2, r1
 80023d4:	eb42 0303 	adc.w	r3, r2, r3
 80023d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80023dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80023e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80023f4:	4649      	mov	r1, r9
 80023f6:	008b      	lsls	r3, r1, #2
 80023f8:	4641      	mov	r1, r8
 80023fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80023fe:	4641      	mov	r1, r8
 8002400:	008a      	lsls	r2, r1, #2
 8002402:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002406:	f7fd fefd 	bl	8000204 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4611      	mov	r1, r2
 8002410:	4b38      	ldr	r3, [pc, #224]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002412:	fba3 2301 	umull	r2, r3, r3, r1
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	2264      	movs	r2, #100	@ 0x64
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	1acb      	subs	r3, r1, r3
 8002420:	011b      	lsls	r3, r3, #4
 8002422:	3332      	adds	r3, #50	@ 0x32
 8002424:	4a33      	ldr	r2, [pc, #204]	@ (80024f4 <UART_SetConfig+0x4e4>)
 8002426:	fba2 2303 	umull	r2, r3, r2, r3
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002430:	441c      	add	r4, r3
 8002432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002436:	2200      	movs	r2, #0
 8002438:	673b      	str	r3, [r7, #112]	@ 0x70
 800243a:	677a      	str	r2, [r7, #116]	@ 0x74
 800243c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002440:	4642      	mov	r2, r8
 8002442:	464b      	mov	r3, r9
 8002444:	1891      	adds	r1, r2, r2
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	415b      	adcs	r3, r3
 800244a:	60fb      	str	r3, [r7, #12]
 800244c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002450:	4641      	mov	r1, r8
 8002452:	1851      	adds	r1, r2, r1
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	4649      	mov	r1, r9
 8002458:	414b      	adcs	r3, r1
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002468:	4659      	mov	r1, fp
 800246a:	00cb      	lsls	r3, r1, #3
 800246c:	4651      	mov	r1, sl
 800246e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002472:	4651      	mov	r1, sl
 8002474:	00ca      	lsls	r2, r1, #3
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	4603      	mov	r3, r0
 800247c:	4642      	mov	r2, r8
 800247e:	189b      	adds	r3, r3, r2
 8002480:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002482:	464b      	mov	r3, r9
 8002484:	460a      	mov	r2, r1
 8002486:	eb42 0303 	adc.w	r3, r2, r3
 800248a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800248c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	663b      	str	r3, [r7, #96]	@ 0x60
 8002496:	667a      	str	r2, [r7, #100]	@ 0x64
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80024a4:	4649      	mov	r1, r9
 80024a6:	008b      	lsls	r3, r1, #2
 80024a8:	4641      	mov	r1, r8
 80024aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024ae:	4641      	mov	r1, r8
 80024b0:	008a      	lsls	r2, r1, #2
 80024b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80024b6:	f7fd fea5 	bl	8000204 <__aeabi_uldivmod>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4b0d      	ldr	r3, [pc, #52]	@ (80024f4 <UART_SetConfig+0x4e4>)
 80024c0:	fba3 1302 	umull	r1, r3, r3, r2
 80024c4:	095b      	lsrs	r3, r3, #5
 80024c6:	2164      	movs	r1, #100	@ 0x64
 80024c8:	fb01 f303 	mul.w	r3, r1, r3
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	3332      	adds	r3, #50	@ 0x32
 80024d2:	4a08      	ldr	r2, [pc, #32]	@ (80024f4 <UART_SetConfig+0x4e4>)
 80024d4:	fba2 2303 	umull	r2, r3, r2, r3
 80024d8:	095b      	lsrs	r3, r3, #5
 80024da:	f003 020f 	and.w	r2, r3, #15
 80024de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4422      	add	r2, r4
 80024e6:	609a      	str	r2, [r3, #8]
}
 80024e8:	bf00      	nop
 80024ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80024ee:	46bd      	mov	sp, r7
 80024f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024f4:	51eb851f 	.word	0x51eb851f

080024f8 <std>:
 80024f8:	2300      	movs	r3, #0
 80024fa:	b510      	push	{r4, lr}
 80024fc:	4604      	mov	r4, r0
 80024fe:	e9c0 3300 	strd	r3, r3, [r0]
 8002502:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002506:	6083      	str	r3, [r0, #8]
 8002508:	8181      	strh	r1, [r0, #12]
 800250a:	6643      	str	r3, [r0, #100]	@ 0x64
 800250c:	81c2      	strh	r2, [r0, #14]
 800250e:	6183      	str	r3, [r0, #24]
 8002510:	4619      	mov	r1, r3
 8002512:	2208      	movs	r2, #8
 8002514:	305c      	adds	r0, #92	@ 0x5c
 8002516:	f000 f8fc 	bl	8002712 <memset>
 800251a:	4b0d      	ldr	r3, [pc, #52]	@ (8002550 <std+0x58>)
 800251c:	6263      	str	r3, [r4, #36]	@ 0x24
 800251e:	4b0d      	ldr	r3, [pc, #52]	@ (8002554 <std+0x5c>)
 8002520:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002522:	4b0d      	ldr	r3, [pc, #52]	@ (8002558 <std+0x60>)
 8002524:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002526:	4b0d      	ldr	r3, [pc, #52]	@ (800255c <std+0x64>)
 8002528:	6323      	str	r3, [r4, #48]	@ 0x30
 800252a:	4b0d      	ldr	r3, [pc, #52]	@ (8002560 <std+0x68>)
 800252c:	6224      	str	r4, [r4, #32]
 800252e:	429c      	cmp	r4, r3
 8002530:	d006      	beq.n	8002540 <std+0x48>
 8002532:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002536:	4294      	cmp	r4, r2
 8002538:	d002      	beq.n	8002540 <std+0x48>
 800253a:	33d0      	adds	r3, #208	@ 0xd0
 800253c:	429c      	cmp	r4, r3
 800253e:	d105      	bne.n	800254c <std+0x54>
 8002540:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002548:	f000 b95c 	b.w	8002804 <__retarget_lock_init_recursive>
 800254c:	bd10      	pop	{r4, pc}
 800254e:	bf00      	nop
 8002550:	0800268d 	.word	0x0800268d
 8002554:	080026af 	.word	0x080026af
 8002558:	080026e7 	.word	0x080026e7
 800255c:	0800270b 	.word	0x0800270b
 8002560:	200000d4 	.word	0x200000d4

08002564 <stdio_exit_handler>:
 8002564:	4a02      	ldr	r2, [pc, #8]	@ (8002570 <stdio_exit_handler+0xc>)
 8002566:	4903      	ldr	r1, [pc, #12]	@ (8002574 <stdio_exit_handler+0x10>)
 8002568:	4803      	ldr	r0, [pc, #12]	@ (8002578 <stdio_exit_handler+0x14>)
 800256a:	f000 b869 	b.w	8002640 <_fwalk_sglue>
 800256e:	bf00      	nop
 8002570:	2000000c 	.word	0x2000000c
 8002574:	08002b05 	.word	0x08002b05
 8002578:	2000001c 	.word	0x2000001c

0800257c <cleanup_stdio>:
 800257c:	6841      	ldr	r1, [r0, #4]
 800257e:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <cleanup_stdio+0x34>)
 8002580:	4299      	cmp	r1, r3
 8002582:	b510      	push	{r4, lr}
 8002584:	4604      	mov	r4, r0
 8002586:	d001      	beq.n	800258c <cleanup_stdio+0x10>
 8002588:	f000 fabc 	bl	8002b04 <_fflush_r>
 800258c:	68a1      	ldr	r1, [r4, #8]
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <cleanup_stdio+0x38>)
 8002590:	4299      	cmp	r1, r3
 8002592:	d002      	beq.n	800259a <cleanup_stdio+0x1e>
 8002594:	4620      	mov	r0, r4
 8002596:	f000 fab5 	bl	8002b04 <_fflush_r>
 800259a:	68e1      	ldr	r1, [r4, #12]
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <cleanup_stdio+0x3c>)
 800259e:	4299      	cmp	r1, r3
 80025a0:	d004      	beq.n	80025ac <cleanup_stdio+0x30>
 80025a2:	4620      	mov	r0, r4
 80025a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a8:	f000 baac 	b.w	8002b04 <_fflush_r>
 80025ac:	bd10      	pop	{r4, pc}
 80025ae:	bf00      	nop
 80025b0:	200000d4 	.word	0x200000d4
 80025b4:	2000013c 	.word	0x2000013c
 80025b8:	200001a4 	.word	0x200001a4

080025bc <global_stdio_init.part.0>:
 80025bc:	b510      	push	{r4, lr}
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <global_stdio_init.part.0+0x30>)
 80025c0:	4c0b      	ldr	r4, [pc, #44]	@ (80025f0 <global_stdio_init.part.0+0x34>)
 80025c2:	4a0c      	ldr	r2, [pc, #48]	@ (80025f4 <global_stdio_init.part.0+0x38>)
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	4620      	mov	r0, r4
 80025c8:	2200      	movs	r2, #0
 80025ca:	2104      	movs	r1, #4
 80025cc:	f7ff ff94 	bl	80024f8 <std>
 80025d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80025d4:	2201      	movs	r2, #1
 80025d6:	2109      	movs	r1, #9
 80025d8:	f7ff ff8e 	bl	80024f8 <std>
 80025dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80025e0:	2202      	movs	r2, #2
 80025e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025e6:	2112      	movs	r1, #18
 80025e8:	f7ff bf86 	b.w	80024f8 <std>
 80025ec:	2000020c 	.word	0x2000020c
 80025f0:	200000d4 	.word	0x200000d4
 80025f4:	08002565 	.word	0x08002565

080025f8 <__sfp_lock_acquire>:
 80025f8:	4801      	ldr	r0, [pc, #4]	@ (8002600 <__sfp_lock_acquire+0x8>)
 80025fa:	f000 b904 	b.w	8002806 <__retarget_lock_acquire_recursive>
 80025fe:	bf00      	nop
 8002600:	20000215 	.word	0x20000215

08002604 <__sfp_lock_release>:
 8002604:	4801      	ldr	r0, [pc, #4]	@ (800260c <__sfp_lock_release+0x8>)
 8002606:	f000 b8ff 	b.w	8002808 <__retarget_lock_release_recursive>
 800260a:	bf00      	nop
 800260c:	20000215 	.word	0x20000215

08002610 <__sinit>:
 8002610:	b510      	push	{r4, lr}
 8002612:	4604      	mov	r4, r0
 8002614:	f7ff fff0 	bl	80025f8 <__sfp_lock_acquire>
 8002618:	6a23      	ldr	r3, [r4, #32]
 800261a:	b11b      	cbz	r3, 8002624 <__sinit+0x14>
 800261c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002620:	f7ff bff0 	b.w	8002604 <__sfp_lock_release>
 8002624:	4b04      	ldr	r3, [pc, #16]	@ (8002638 <__sinit+0x28>)
 8002626:	6223      	str	r3, [r4, #32]
 8002628:	4b04      	ldr	r3, [pc, #16]	@ (800263c <__sinit+0x2c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f5      	bne.n	800261c <__sinit+0xc>
 8002630:	f7ff ffc4 	bl	80025bc <global_stdio_init.part.0>
 8002634:	e7f2      	b.n	800261c <__sinit+0xc>
 8002636:	bf00      	nop
 8002638:	0800257d 	.word	0x0800257d
 800263c:	2000020c 	.word	0x2000020c

08002640 <_fwalk_sglue>:
 8002640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002644:	4607      	mov	r7, r0
 8002646:	4688      	mov	r8, r1
 8002648:	4614      	mov	r4, r2
 800264a:	2600      	movs	r6, #0
 800264c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002650:	f1b9 0901 	subs.w	r9, r9, #1
 8002654:	d505      	bpl.n	8002662 <_fwalk_sglue+0x22>
 8002656:	6824      	ldr	r4, [r4, #0]
 8002658:	2c00      	cmp	r4, #0
 800265a:	d1f7      	bne.n	800264c <_fwalk_sglue+0xc>
 800265c:	4630      	mov	r0, r6
 800265e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002662:	89ab      	ldrh	r3, [r5, #12]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d907      	bls.n	8002678 <_fwalk_sglue+0x38>
 8002668:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800266c:	3301      	adds	r3, #1
 800266e:	d003      	beq.n	8002678 <_fwalk_sglue+0x38>
 8002670:	4629      	mov	r1, r5
 8002672:	4638      	mov	r0, r7
 8002674:	47c0      	blx	r8
 8002676:	4306      	orrs	r6, r0
 8002678:	3568      	adds	r5, #104	@ 0x68
 800267a:	e7e9      	b.n	8002650 <_fwalk_sglue+0x10>

0800267c <putchar>:
 800267c:	4b02      	ldr	r3, [pc, #8]	@ (8002688 <putchar+0xc>)
 800267e:	4601      	mov	r1, r0
 8002680:	6818      	ldr	r0, [r3, #0]
 8002682:	6882      	ldr	r2, [r0, #8]
 8002684:	f000 ba66 	b.w	8002b54 <_putc_r>
 8002688:	20000018 	.word	0x20000018

0800268c <__sread>:
 800268c:	b510      	push	{r4, lr}
 800268e:	460c      	mov	r4, r1
 8002690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002694:	f000 f868 	bl	8002768 <_read_r>
 8002698:	2800      	cmp	r0, #0
 800269a:	bfab      	itete	ge
 800269c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800269e:	89a3      	ldrhlt	r3, [r4, #12]
 80026a0:	181b      	addge	r3, r3, r0
 80026a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80026a6:	bfac      	ite	ge
 80026a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80026aa:	81a3      	strhlt	r3, [r4, #12]
 80026ac:	bd10      	pop	{r4, pc}

080026ae <__swrite>:
 80026ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026b2:	461f      	mov	r7, r3
 80026b4:	898b      	ldrh	r3, [r1, #12]
 80026b6:	05db      	lsls	r3, r3, #23
 80026b8:	4605      	mov	r5, r0
 80026ba:	460c      	mov	r4, r1
 80026bc:	4616      	mov	r6, r2
 80026be:	d505      	bpl.n	80026cc <__swrite+0x1e>
 80026c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026c4:	2302      	movs	r3, #2
 80026c6:	2200      	movs	r2, #0
 80026c8:	f000 f83c 	bl	8002744 <_lseek_r>
 80026cc:	89a3      	ldrh	r3, [r4, #12]
 80026ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80026d6:	81a3      	strh	r3, [r4, #12]
 80026d8:	4632      	mov	r2, r6
 80026da:	463b      	mov	r3, r7
 80026dc:	4628      	mov	r0, r5
 80026de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80026e2:	f000 b853 	b.w	800278c <_write_r>

080026e6 <__sseek>:
 80026e6:	b510      	push	{r4, lr}
 80026e8:	460c      	mov	r4, r1
 80026ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ee:	f000 f829 	bl	8002744 <_lseek_r>
 80026f2:	1c43      	adds	r3, r0, #1
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	bf15      	itete	ne
 80026f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80026fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80026fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002702:	81a3      	strheq	r3, [r4, #12]
 8002704:	bf18      	it	ne
 8002706:	81a3      	strhne	r3, [r4, #12]
 8002708:	bd10      	pop	{r4, pc}

0800270a <__sclose>:
 800270a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800270e:	f000 b809 	b.w	8002724 <_close_r>

08002712 <memset>:
 8002712:	4402      	add	r2, r0
 8002714:	4603      	mov	r3, r0
 8002716:	4293      	cmp	r3, r2
 8002718:	d100      	bne.n	800271c <memset+0xa>
 800271a:	4770      	bx	lr
 800271c:	f803 1b01 	strb.w	r1, [r3], #1
 8002720:	e7f9      	b.n	8002716 <memset+0x4>
	...

08002724 <_close_r>:
 8002724:	b538      	push	{r3, r4, r5, lr}
 8002726:	4d06      	ldr	r5, [pc, #24]	@ (8002740 <_close_r+0x1c>)
 8002728:	2300      	movs	r3, #0
 800272a:	4604      	mov	r4, r0
 800272c:	4608      	mov	r0, r1
 800272e:	602b      	str	r3, [r5, #0]
 8002730:	f7fe fa4e 	bl	8000bd0 <_close>
 8002734:	1c43      	adds	r3, r0, #1
 8002736:	d102      	bne.n	800273e <_close_r+0x1a>
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	b103      	cbz	r3, 800273e <_close_r+0x1a>
 800273c:	6023      	str	r3, [r4, #0]
 800273e:	bd38      	pop	{r3, r4, r5, pc}
 8002740:	20000210 	.word	0x20000210

08002744 <_lseek_r>:
 8002744:	b538      	push	{r3, r4, r5, lr}
 8002746:	4d07      	ldr	r5, [pc, #28]	@ (8002764 <_lseek_r+0x20>)
 8002748:	4604      	mov	r4, r0
 800274a:	4608      	mov	r0, r1
 800274c:	4611      	mov	r1, r2
 800274e:	2200      	movs	r2, #0
 8002750:	602a      	str	r2, [r5, #0]
 8002752:	461a      	mov	r2, r3
 8002754:	f7fe fa63 	bl	8000c1e <_lseek>
 8002758:	1c43      	adds	r3, r0, #1
 800275a:	d102      	bne.n	8002762 <_lseek_r+0x1e>
 800275c:	682b      	ldr	r3, [r5, #0]
 800275e:	b103      	cbz	r3, 8002762 <_lseek_r+0x1e>
 8002760:	6023      	str	r3, [r4, #0]
 8002762:	bd38      	pop	{r3, r4, r5, pc}
 8002764:	20000210 	.word	0x20000210

08002768 <_read_r>:
 8002768:	b538      	push	{r3, r4, r5, lr}
 800276a:	4d07      	ldr	r5, [pc, #28]	@ (8002788 <_read_r+0x20>)
 800276c:	4604      	mov	r4, r0
 800276e:	4608      	mov	r0, r1
 8002770:	4611      	mov	r1, r2
 8002772:	2200      	movs	r2, #0
 8002774:	602a      	str	r2, [r5, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	f7fe fa0d 	bl	8000b96 <_read>
 800277c:	1c43      	adds	r3, r0, #1
 800277e:	d102      	bne.n	8002786 <_read_r+0x1e>
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	b103      	cbz	r3, 8002786 <_read_r+0x1e>
 8002784:	6023      	str	r3, [r4, #0]
 8002786:	bd38      	pop	{r3, r4, r5, pc}
 8002788:	20000210 	.word	0x20000210

0800278c <_write_r>:
 800278c:	b538      	push	{r3, r4, r5, lr}
 800278e:	4d07      	ldr	r5, [pc, #28]	@ (80027ac <_write_r+0x20>)
 8002790:	4604      	mov	r4, r0
 8002792:	4608      	mov	r0, r1
 8002794:	4611      	mov	r1, r2
 8002796:	2200      	movs	r2, #0
 8002798:	602a      	str	r2, [r5, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	f7fd fed1 	bl	8000542 <_write>
 80027a0:	1c43      	adds	r3, r0, #1
 80027a2:	d102      	bne.n	80027aa <_write_r+0x1e>
 80027a4:	682b      	ldr	r3, [r5, #0]
 80027a6:	b103      	cbz	r3, 80027aa <_write_r+0x1e>
 80027a8:	6023      	str	r3, [r4, #0]
 80027aa:	bd38      	pop	{r3, r4, r5, pc}
 80027ac:	20000210 	.word	0x20000210

080027b0 <__errno>:
 80027b0:	4b01      	ldr	r3, [pc, #4]	@ (80027b8 <__errno+0x8>)
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	4770      	bx	lr
 80027b6:	bf00      	nop
 80027b8:	20000018 	.word	0x20000018

080027bc <__libc_init_array>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	4d0d      	ldr	r5, [pc, #52]	@ (80027f4 <__libc_init_array+0x38>)
 80027c0:	4c0d      	ldr	r4, [pc, #52]	@ (80027f8 <__libc_init_array+0x3c>)
 80027c2:	1b64      	subs	r4, r4, r5
 80027c4:	10a4      	asrs	r4, r4, #2
 80027c6:	2600      	movs	r6, #0
 80027c8:	42a6      	cmp	r6, r4
 80027ca:	d109      	bne.n	80027e0 <__libc_init_array+0x24>
 80027cc:	4d0b      	ldr	r5, [pc, #44]	@ (80027fc <__libc_init_array+0x40>)
 80027ce:	4c0c      	ldr	r4, [pc, #48]	@ (8002800 <__libc_init_array+0x44>)
 80027d0:	f000 fb1c 	bl	8002e0c <_init>
 80027d4:	1b64      	subs	r4, r4, r5
 80027d6:	10a4      	asrs	r4, r4, #2
 80027d8:	2600      	movs	r6, #0
 80027da:	42a6      	cmp	r6, r4
 80027dc:	d105      	bne.n	80027ea <__libc_init_array+0x2e>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e4:	4798      	blx	r3
 80027e6:	3601      	adds	r6, #1
 80027e8:	e7ee      	b.n	80027c8 <__libc_init_array+0xc>
 80027ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ee:	4798      	blx	r3
 80027f0:	3601      	adds	r6, #1
 80027f2:	e7f2      	b.n	80027da <__libc_init_array+0x1e>
 80027f4:	08002e44 	.word	0x08002e44
 80027f8:	08002e44 	.word	0x08002e44
 80027fc:	08002e44 	.word	0x08002e44
 8002800:	08002e48 	.word	0x08002e48

08002804 <__retarget_lock_init_recursive>:
 8002804:	4770      	bx	lr

08002806 <__retarget_lock_acquire_recursive>:
 8002806:	4770      	bx	lr

08002808 <__retarget_lock_release_recursive>:
 8002808:	4770      	bx	lr
	...

0800280c <_free_r>:
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4605      	mov	r5, r0
 8002810:	2900      	cmp	r1, #0
 8002812:	d041      	beq.n	8002898 <_free_r+0x8c>
 8002814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002818:	1f0c      	subs	r4, r1, #4
 800281a:	2b00      	cmp	r3, #0
 800281c:	bfb8      	it	lt
 800281e:	18e4      	addlt	r4, r4, r3
 8002820:	f000 f8e0 	bl	80029e4 <__malloc_lock>
 8002824:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <_free_r+0x90>)
 8002826:	6813      	ldr	r3, [r2, #0]
 8002828:	b933      	cbnz	r3, 8002838 <_free_r+0x2c>
 800282a:	6063      	str	r3, [r4, #4]
 800282c:	6014      	str	r4, [r2, #0]
 800282e:	4628      	mov	r0, r5
 8002830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002834:	f000 b8dc 	b.w	80029f0 <__malloc_unlock>
 8002838:	42a3      	cmp	r3, r4
 800283a:	d908      	bls.n	800284e <_free_r+0x42>
 800283c:	6820      	ldr	r0, [r4, #0]
 800283e:	1821      	adds	r1, r4, r0
 8002840:	428b      	cmp	r3, r1
 8002842:	bf01      	itttt	eq
 8002844:	6819      	ldreq	r1, [r3, #0]
 8002846:	685b      	ldreq	r3, [r3, #4]
 8002848:	1809      	addeq	r1, r1, r0
 800284a:	6021      	streq	r1, [r4, #0]
 800284c:	e7ed      	b.n	800282a <_free_r+0x1e>
 800284e:	461a      	mov	r2, r3
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	b10b      	cbz	r3, 8002858 <_free_r+0x4c>
 8002854:	42a3      	cmp	r3, r4
 8002856:	d9fa      	bls.n	800284e <_free_r+0x42>
 8002858:	6811      	ldr	r1, [r2, #0]
 800285a:	1850      	adds	r0, r2, r1
 800285c:	42a0      	cmp	r0, r4
 800285e:	d10b      	bne.n	8002878 <_free_r+0x6c>
 8002860:	6820      	ldr	r0, [r4, #0]
 8002862:	4401      	add	r1, r0
 8002864:	1850      	adds	r0, r2, r1
 8002866:	4283      	cmp	r3, r0
 8002868:	6011      	str	r1, [r2, #0]
 800286a:	d1e0      	bne.n	800282e <_free_r+0x22>
 800286c:	6818      	ldr	r0, [r3, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	6053      	str	r3, [r2, #4]
 8002872:	4408      	add	r0, r1
 8002874:	6010      	str	r0, [r2, #0]
 8002876:	e7da      	b.n	800282e <_free_r+0x22>
 8002878:	d902      	bls.n	8002880 <_free_r+0x74>
 800287a:	230c      	movs	r3, #12
 800287c:	602b      	str	r3, [r5, #0]
 800287e:	e7d6      	b.n	800282e <_free_r+0x22>
 8002880:	6820      	ldr	r0, [r4, #0]
 8002882:	1821      	adds	r1, r4, r0
 8002884:	428b      	cmp	r3, r1
 8002886:	bf04      	itt	eq
 8002888:	6819      	ldreq	r1, [r3, #0]
 800288a:	685b      	ldreq	r3, [r3, #4]
 800288c:	6063      	str	r3, [r4, #4]
 800288e:	bf04      	itt	eq
 8002890:	1809      	addeq	r1, r1, r0
 8002892:	6021      	streq	r1, [r4, #0]
 8002894:	6054      	str	r4, [r2, #4]
 8002896:	e7ca      	b.n	800282e <_free_r+0x22>
 8002898:	bd38      	pop	{r3, r4, r5, pc}
 800289a:	bf00      	nop
 800289c:	2000021c 	.word	0x2000021c

080028a0 <sbrk_aligned>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	4e0f      	ldr	r6, [pc, #60]	@ (80028e0 <sbrk_aligned+0x40>)
 80028a4:	460c      	mov	r4, r1
 80028a6:	6831      	ldr	r1, [r6, #0]
 80028a8:	4605      	mov	r5, r0
 80028aa:	b911      	cbnz	r1, 80028b2 <sbrk_aligned+0x12>
 80028ac:	f000 fa1a 	bl	8002ce4 <_sbrk_r>
 80028b0:	6030      	str	r0, [r6, #0]
 80028b2:	4621      	mov	r1, r4
 80028b4:	4628      	mov	r0, r5
 80028b6:	f000 fa15 	bl	8002ce4 <_sbrk_r>
 80028ba:	1c43      	adds	r3, r0, #1
 80028bc:	d103      	bne.n	80028c6 <sbrk_aligned+0x26>
 80028be:	f04f 34ff 	mov.w	r4, #4294967295
 80028c2:	4620      	mov	r0, r4
 80028c4:	bd70      	pop	{r4, r5, r6, pc}
 80028c6:	1cc4      	adds	r4, r0, #3
 80028c8:	f024 0403 	bic.w	r4, r4, #3
 80028cc:	42a0      	cmp	r0, r4
 80028ce:	d0f8      	beq.n	80028c2 <sbrk_aligned+0x22>
 80028d0:	1a21      	subs	r1, r4, r0
 80028d2:	4628      	mov	r0, r5
 80028d4:	f000 fa06 	bl	8002ce4 <_sbrk_r>
 80028d8:	3001      	adds	r0, #1
 80028da:	d1f2      	bne.n	80028c2 <sbrk_aligned+0x22>
 80028dc:	e7ef      	b.n	80028be <sbrk_aligned+0x1e>
 80028de:	bf00      	nop
 80028e0:	20000218 	.word	0x20000218

080028e4 <_malloc_r>:
 80028e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028e8:	1ccd      	adds	r5, r1, #3
 80028ea:	f025 0503 	bic.w	r5, r5, #3
 80028ee:	3508      	adds	r5, #8
 80028f0:	2d0c      	cmp	r5, #12
 80028f2:	bf38      	it	cc
 80028f4:	250c      	movcc	r5, #12
 80028f6:	2d00      	cmp	r5, #0
 80028f8:	4606      	mov	r6, r0
 80028fa:	db01      	blt.n	8002900 <_malloc_r+0x1c>
 80028fc:	42a9      	cmp	r1, r5
 80028fe:	d904      	bls.n	800290a <_malloc_r+0x26>
 8002900:	230c      	movs	r3, #12
 8002902:	6033      	str	r3, [r6, #0]
 8002904:	2000      	movs	r0, #0
 8002906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80029e0 <_malloc_r+0xfc>
 800290e:	f000 f869 	bl	80029e4 <__malloc_lock>
 8002912:	f8d8 3000 	ldr.w	r3, [r8]
 8002916:	461c      	mov	r4, r3
 8002918:	bb44      	cbnz	r4, 800296c <_malloc_r+0x88>
 800291a:	4629      	mov	r1, r5
 800291c:	4630      	mov	r0, r6
 800291e:	f7ff ffbf 	bl	80028a0 <sbrk_aligned>
 8002922:	1c43      	adds	r3, r0, #1
 8002924:	4604      	mov	r4, r0
 8002926:	d158      	bne.n	80029da <_malloc_r+0xf6>
 8002928:	f8d8 4000 	ldr.w	r4, [r8]
 800292c:	4627      	mov	r7, r4
 800292e:	2f00      	cmp	r7, #0
 8002930:	d143      	bne.n	80029ba <_malloc_r+0xd6>
 8002932:	2c00      	cmp	r4, #0
 8002934:	d04b      	beq.n	80029ce <_malloc_r+0xea>
 8002936:	6823      	ldr	r3, [r4, #0]
 8002938:	4639      	mov	r1, r7
 800293a:	4630      	mov	r0, r6
 800293c:	eb04 0903 	add.w	r9, r4, r3
 8002940:	f000 f9d0 	bl	8002ce4 <_sbrk_r>
 8002944:	4581      	cmp	r9, r0
 8002946:	d142      	bne.n	80029ce <_malloc_r+0xea>
 8002948:	6821      	ldr	r1, [r4, #0]
 800294a:	1a6d      	subs	r5, r5, r1
 800294c:	4629      	mov	r1, r5
 800294e:	4630      	mov	r0, r6
 8002950:	f7ff ffa6 	bl	80028a0 <sbrk_aligned>
 8002954:	3001      	adds	r0, #1
 8002956:	d03a      	beq.n	80029ce <_malloc_r+0xea>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	442b      	add	r3, r5
 800295c:	6023      	str	r3, [r4, #0]
 800295e:	f8d8 3000 	ldr.w	r3, [r8]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	bb62      	cbnz	r2, 80029c0 <_malloc_r+0xdc>
 8002966:	f8c8 7000 	str.w	r7, [r8]
 800296a:	e00f      	b.n	800298c <_malloc_r+0xa8>
 800296c:	6822      	ldr	r2, [r4, #0]
 800296e:	1b52      	subs	r2, r2, r5
 8002970:	d420      	bmi.n	80029b4 <_malloc_r+0xd0>
 8002972:	2a0b      	cmp	r2, #11
 8002974:	d917      	bls.n	80029a6 <_malloc_r+0xc2>
 8002976:	1961      	adds	r1, r4, r5
 8002978:	42a3      	cmp	r3, r4
 800297a:	6025      	str	r5, [r4, #0]
 800297c:	bf18      	it	ne
 800297e:	6059      	strne	r1, [r3, #4]
 8002980:	6863      	ldr	r3, [r4, #4]
 8002982:	bf08      	it	eq
 8002984:	f8c8 1000 	streq.w	r1, [r8]
 8002988:	5162      	str	r2, [r4, r5]
 800298a:	604b      	str	r3, [r1, #4]
 800298c:	4630      	mov	r0, r6
 800298e:	f000 f82f 	bl	80029f0 <__malloc_unlock>
 8002992:	f104 000b 	add.w	r0, r4, #11
 8002996:	1d23      	adds	r3, r4, #4
 8002998:	f020 0007 	bic.w	r0, r0, #7
 800299c:	1ac2      	subs	r2, r0, r3
 800299e:	bf1c      	itt	ne
 80029a0:	1a1b      	subne	r3, r3, r0
 80029a2:	50a3      	strne	r3, [r4, r2]
 80029a4:	e7af      	b.n	8002906 <_malloc_r+0x22>
 80029a6:	6862      	ldr	r2, [r4, #4]
 80029a8:	42a3      	cmp	r3, r4
 80029aa:	bf0c      	ite	eq
 80029ac:	f8c8 2000 	streq.w	r2, [r8]
 80029b0:	605a      	strne	r2, [r3, #4]
 80029b2:	e7eb      	b.n	800298c <_malloc_r+0xa8>
 80029b4:	4623      	mov	r3, r4
 80029b6:	6864      	ldr	r4, [r4, #4]
 80029b8:	e7ae      	b.n	8002918 <_malloc_r+0x34>
 80029ba:	463c      	mov	r4, r7
 80029bc:	687f      	ldr	r7, [r7, #4]
 80029be:	e7b6      	b.n	800292e <_malloc_r+0x4a>
 80029c0:	461a      	mov	r2, r3
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	42a3      	cmp	r3, r4
 80029c6:	d1fb      	bne.n	80029c0 <_malloc_r+0xdc>
 80029c8:	2300      	movs	r3, #0
 80029ca:	6053      	str	r3, [r2, #4]
 80029cc:	e7de      	b.n	800298c <_malloc_r+0xa8>
 80029ce:	230c      	movs	r3, #12
 80029d0:	6033      	str	r3, [r6, #0]
 80029d2:	4630      	mov	r0, r6
 80029d4:	f000 f80c 	bl	80029f0 <__malloc_unlock>
 80029d8:	e794      	b.n	8002904 <_malloc_r+0x20>
 80029da:	6005      	str	r5, [r0, #0]
 80029dc:	e7d6      	b.n	800298c <_malloc_r+0xa8>
 80029de:	bf00      	nop
 80029e0:	2000021c 	.word	0x2000021c

080029e4 <__malloc_lock>:
 80029e4:	4801      	ldr	r0, [pc, #4]	@ (80029ec <__malloc_lock+0x8>)
 80029e6:	f7ff bf0e 	b.w	8002806 <__retarget_lock_acquire_recursive>
 80029ea:	bf00      	nop
 80029ec:	20000214 	.word	0x20000214

080029f0 <__malloc_unlock>:
 80029f0:	4801      	ldr	r0, [pc, #4]	@ (80029f8 <__malloc_unlock+0x8>)
 80029f2:	f7ff bf09 	b.w	8002808 <__retarget_lock_release_recursive>
 80029f6:	bf00      	nop
 80029f8:	20000214 	.word	0x20000214

080029fc <__sflush_r>:
 80029fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a04:	0716      	lsls	r6, r2, #28
 8002a06:	4605      	mov	r5, r0
 8002a08:	460c      	mov	r4, r1
 8002a0a:	d454      	bmi.n	8002ab6 <__sflush_r+0xba>
 8002a0c:	684b      	ldr	r3, [r1, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	dc02      	bgt.n	8002a18 <__sflush_r+0x1c>
 8002a12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	dd48      	ble.n	8002aaa <__sflush_r+0xae>
 8002a18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a1a:	2e00      	cmp	r6, #0
 8002a1c:	d045      	beq.n	8002aaa <__sflush_r+0xae>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002a24:	682f      	ldr	r7, [r5, #0]
 8002a26:	6a21      	ldr	r1, [r4, #32]
 8002a28:	602b      	str	r3, [r5, #0]
 8002a2a:	d030      	beq.n	8002a8e <__sflush_r+0x92>
 8002a2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a2e:	89a3      	ldrh	r3, [r4, #12]
 8002a30:	0759      	lsls	r1, r3, #29
 8002a32:	d505      	bpl.n	8002a40 <__sflush_r+0x44>
 8002a34:	6863      	ldr	r3, [r4, #4]
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a3a:	b10b      	cbz	r3, 8002a40 <__sflush_r+0x44>
 8002a3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a3e:	1ad2      	subs	r2, r2, r3
 8002a40:	2300      	movs	r3, #0
 8002a42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002a44:	6a21      	ldr	r1, [r4, #32]
 8002a46:	4628      	mov	r0, r5
 8002a48:	47b0      	blx	r6
 8002a4a:	1c43      	adds	r3, r0, #1
 8002a4c:	89a3      	ldrh	r3, [r4, #12]
 8002a4e:	d106      	bne.n	8002a5e <__sflush_r+0x62>
 8002a50:	6829      	ldr	r1, [r5, #0]
 8002a52:	291d      	cmp	r1, #29
 8002a54:	d82b      	bhi.n	8002aae <__sflush_r+0xb2>
 8002a56:	4a2a      	ldr	r2, [pc, #168]	@ (8002b00 <__sflush_r+0x104>)
 8002a58:	410a      	asrs	r2, r1
 8002a5a:	07d6      	lsls	r6, r2, #31
 8002a5c:	d427      	bmi.n	8002aae <__sflush_r+0xb2>
 8002a5e:	2200      	movs	r2, #0
 8002a60:	6062      	str	r2, [r4, #4]
 8002a62:	04d9      	lsls	r1, r3, #19
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	6022      	str	r2, [r4, #0]
 8002a68:	d504      	bpl.n	8002a74 <__sflush_r+0x78>
 8002a6a:	1c42      	adds	r2, r0, #1
 8002a6c:	d101      	bne.n	8002a72 <__sflush_r+0x76>
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	b903      	cbnz	r3, 8002a74 <__sflush_r+0x78>
 8002a72:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a76:	602f      	str	r7, [r5, #0]
 8002a78:	b1b9      	cbz	r1, 8002aaa <__sflush_r+0xae>
 8002a7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002a7e:	4299      	cmp	r1, r3
 8002a80:	d002      	beq.n	8002a88 <__sflush_r+0x8c>
 8002a82:	4628      	mov	r0, r5
 8002a84:	f7ff fec2 	bl	800280c <_free_r>
 8002a88:	2300      	movs	r3, #0
 8002a8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a8c:	e00d      	b.n	8002aaa <__sflush_r+0xae>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	4628      	mov	r0, r5
 8002a92:	47b0      	blx	r6
 8002a94:	4602      	mov	r2, r0
 8002a96:	1c50      	adds	r0, r2, #1
 8002a98:	d1c9      	bne.n	8002a2e <__sflush_r+0x32>
 8002a9a:	682b      	ldr	r3, [r5, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0c6      	beq.n	8002a2e <__sflush_r+0x32>
 8002aa0:	2b1d      	cmp	r3, #29
 8002aa2:	d001      	beq.n	8002aa8 <__sflush_r+0xac>
 8002aa4:	2b16      	cmp	r3, #22
 8002aa6:	d11e      	bne.n	8002ae6 <__sflush_r+0xea>
 8002aa8:	602f      	str	r7, [r5, #0]
 8002aaa:	2000      	movs	r0, #0
 8002aac:	e022      	b.n	8002af4 <__sflush_r+0xf8>
 8002aae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ab2:	b21b      	sxth	r3, r3
 8002ab4:	e01b      	b.n	8002aee <__sflush_r+0xf2>
 8002ab6:	690f      	ldr	r7, [r1, #16]
 8002ab8:	2f00      	cmp	r7, #0
 8002aba:	d0f6      	beq.n	8002aaa <__sflush_r+0xae>
 8002abc:	0793      	lsls	r3, r2, #30
 8002abe:	680e      	ldr	r6, [r1, #0]
 8002ac0:	bf08      	it	eq
 8002ac2:	694b      	ldreq	r3, [r1, #20]
 8002ac4:	600f      	str	r7, [r1, #0]
 8002ac6:	bf18      	it	ne
 8002ac8:	2300      	movne	r3, #0
 8002aca:	eba6 0807 	sub.w	r8, r6, r7
 8002ace:	608b      	str	r3, [r1, #8]
 8002ad0:	f1b8 0f00 	cmp.w	r8, #0
 8002ad4:	dde9      	ble.n	8002aaa <__sflush_r+0xae>
 8002ad6:	6a21      	ldr	r1, [r4, #32]
 8002ad8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002ada:	4643      	mov	r3, r8
 8002adc:	463a      	mov	r2, r7
 8002ade:	4628      	mov	r0, r5
 8002ae0:	47b0      	blx	r6
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	dc08      	bgt.n	8002af8 <__sflush_r+0xfc>
 8002ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002aee:	81a3      	strh	r3, [r4, #12]
 8002af0:	f04f 30ff 	mov.w	r0, #4294967295
 8002af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002af8:	4407      	add	r7, r0
 8002afa:	eba8 0800 	sub.w	r8, r8, r0
 8002afe:	e7e7      	b.n	8002ad0 <__sflush_r+0xd4>
 8002b00:	dfbffffe 	.word	0xdfbffffe

08002b04 <_fflush_r>:
 8002b04:	b538      	push	{r3, r4, r5, lr}
 8002b06:	690b      	ldr	r3, [r1, #16]
 8002b08:	4605      	mov	r5, r0
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	b913      	cbnz	r3, 8002b14 <_fflush_r+0x10>
 8002b0e:	2500      	movs	r5, #0
 8002b10:	4628      	mov	r0, r5
 8002b12:	bd38      	pop	{r3, r4, r5, pc}
 8002b14:	b118      	cbz	r0, 8002b1e <_fflush_r+0x1a>
 8002b16:	6a03      	ldr	r3, [r0, #32]
 8002b18:	b90b      	cbnz	r3, 8002b1e <_fflush_r+0x1a>
 8002b1a:	f7ff fd79 	bl	8002610 <__sinit>
 8002b1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f3      	beq.n	8002b0e <_fflush_r+0xa>
 8002b26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b28:	07d0      	lsls	r0, r2, #31
 8002b2a:	d404      	bmi.n	8002b36 <_fflush_r+0x32>
 8002b2c:	0599      	lsls	r1, r3, #22
 8002b2e:	d402      	bmi.n	8002b36 <_fflush_r+0x32>
 8002b30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b32:	f7ff fe68 	bl	8002806 <__retarget_lock_acquire_recursive>
 8002b36:	4628      	mov	r0, r5
 8002b38:	4621      	mov	r1, r4
 8002b3a:	f7ff ff5f 	bl	80029fc <__sflush_r>
 8002b3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b40:	07da      	lsls	r2, r3, #31
 8002b42:	4605      	mov	r5, r0
 8002b44:	d4e4      	bmi.n	8002b10 <_fflush_r+0xc>
 8002b46:	89a3      	ldrh	r3, [r4, #12]
 8002b48:	059b      	lsls	r3, r3, #22
 8002b4a:	d4e1      	bmi.n	8002b10 <_fflush_r+0xc>
 8002b4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b4e:	f7ff fe5b 	bl	8002808 <__retarget_lock_release_recursive>
 8002b52:	e7dd      	b.n	8002b10 <_fflush_r+0xc>

08002b54 <_putc_r>:
 8002b54:	b570      	push	{r4, r5, r6, lr}
 8002b56:	460d      	mov	r5, r1
 8002b58:	4614      	mov	r4, r2
 8002b5a:	4606      	mov	r6, r0
 8002b5c:	b118      	cbz	r0, 8002b66 <_putc_r+0x12>
 8002b5e:	6a03      	ldr	r3, [r0, #32]
 8002b60:	b90b      	cbnz	r3, 8002b66 <_putc_r+0x12>
 8002b62:	f7ff fd55 	bl	8002610 <__sinit>
 8002b66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b68:	07d8      	lsls	r0, r3, #31
 8002b6a:	d405      	bmi.n	8002b78 <_putc_r+0x24>
 8002b6c:	89a3      	ldrh	r3, [r4, #12]
 8002b6e:	0599      	lsls	r1, r3, #22
 8002b70:	d402      	bmi.n	8002b78 <_putc_r+0x24>
 8002b72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b74:	f7ff fe47 	bl	8002806 <__retarget_lock_acquire_recursive>
 8002b78:	68a3      	ldr	r3, [r4, #8]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	60a3      	str	r3, [r4, #8]
 8002b80:	da05      	bge.n	8002b8e <_putc_r+0x3a>
 8002b82:	69a2      	ldr	r2, [r4, #24]
 8002b84:	4293      	cmp	r3, r2
 8002b86:	db12      	blt.n	8002bae <_putc_r+0x5a>
 8002b88:	b2eb      	uxtb	r3, r5
 8002b8a:	2b0a      	cmp	r3, #10
 8002b8c:	d00f      	beq.n	8002bae <_putc_r+0x5a>
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	6022      	str	r2, [r4, #0]
 8002b94:	701d      	strb	r5, [r3, #0]
 8002b96:	b2ed      	uxtb	r5, r5
 8002b98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b9a:	07da      	lsls	r2, r3, #31
 8002b9c:	d405      	bmi.n	8002baa <_putc_r+0x56>
 8002b9e:	89a3      	ldrh	r3, [r4, #12]
 8002ba0:	059b      	lsls	r3, r3, #22
 8002ba2:	d402      	bmi.n	8002baa <_putc_r+0x56>
 8002ba4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002ba6:	f7ff fe2f 	bl	8002808 <__retarget_lock_release_recursive>
 8002baa:	4628      	mov	r0, r5
 8002bac:	bd70      	pop	{r4, r5, r6, pc}
 8002bae:	4629      	mov	r1, r5
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	4630      	mov	r0, r6
 8002bb4:	f000 f802 	bl	8002bbc <__swbuf_r>
 8002bb8:	4605      	mov	r5, r0
 8002bba:	e7ed      	b.n	8002b98 <_putc_r+0x44>

08002bbc <__swbuf_r>:
 8002bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bbe:	460e      	mov	r6, r1
 8002bc0:	4614      	mov	r4, r2
 8002bc2:	4605      	mov	r5, r0
 8002bc4:	b118      	cbz	r0, 8002bce <__swbuf_r+0x12>
 8002bc6:	6a03      	ldr	r3, [r0, #32]
 8002bc8:	b90b      	cbnz	r3, 8002bce <__swbuf_r+0x12>
 8002bca:	f7ff fd21 	bl	8002610 <__sinit>
 8002bce:	69a3      	ldr	r3, [r4, #24]
 8002bd0:	60a3      	str	r3, [r4, #8]
 8002bd2:	89a3      	ldrh	r3, [r4, #12]
 8002bd4:	071a      	lsls	r2, r3, #28
 8002bd6:	d501      	bpl.n	8002bdc <__swbuf_r+0x20>
 8002bd8:	6923      	ldr	r3, [r4, #16]
 8002bda:	b943      	cbnz	r3, 8002bee <__swbuf_r+0x32>
 8002bdc:	4621      	mov	r1, r4
 8002bde:	4628      	mov	r0, r5
 8002be0:	f000 f82a 	bl	8002c38 <__swsetup_r>
 8002be4:	b118      	cbz	r0, 8002bee <__swbuf_r+0x32>
 8002be6:	f04f 37ff 	mov.w	r7, #4294967295
 8002bea:	4638      	mov	r0, r7
 8002bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002bee:	6823      	ldr	r3, [r4, #0]
 8002bf0:	6922      	ldr	r2, [r4, #16]
 8002bf2:	1a98      	subs	r0, r3, r2
 8002bf4:	6963      	ldr	r3, [r4, #20]
 8002bf6:	b2f6      	uxtb	r6, r6
 8002bf8:	4283      	cmp	r3, r0
 8002bfa:	4637      	mov	r7, r6
 8002bfc:	dc05      	bgt.n	8002c0a <__swbuf_r+0x4e>
 8002bfe:	4621      	mov	r1, r4
 8002c00:	4628      	mov	r0, r5
 8002c02:	f7ff ff7f 	bl	8002b04 <_fflush_r>
 8002c06:	2800      	cmp	r0, #0
 8002c08:	d1ed      	bne.n	8002be6 <__swbuf_r+0x2a>
 8002c0a:	68a3      	ldr	r3, [r4, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60a3      	str	r3, [r4, #8]
 8002c10:	6823      	ldr	r3, [r4, #0]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	6022      	str	r2, [r4, #0]
 8002c16:	701e      	strb	r6, [r3, #0]
 8002c18:	6962      	ldr	r2, [r4, #20]
 8002c1a:	1c43      	adds	r3, r0, #1
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d004      	beq.n	8002c2a <__swbuf_r+0x6e>
 8002c20:	89a3      	ldrh	r3, [r4, #12]
 8002c22:	07db      	lsls	r3, r3, #31
 8002c24:	d5e1      	bpl.n	8002bea <__swbuf_r+0x2e>
 8002c26:	2e0a      	cmp	r6, #10
 8002c28:	d1df      	bne.n	8002bea <__swbuf_r+0x2e>
 8002c2a:	4621      	mov	r1, r4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f7ff ff69 	bl	8002b04 <_fflush_r>
 8002c32:	2800      	cmp	r0, #0
 8002c34:	d0d9      	beq.n	8002bea <__swbuf_r+0x2e>
 8002c36:	e7d6      	b.n	8002be6 <__swbuf_r+0x2a>

08002c38 <__swsetup_r>:
 8002c38:	b538      	push	{r3, r4, r5, lr}
 8002c3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ce0 <__swsetup_r+0xa8>)
 8002c3c:	4605      	mov	r5, r0
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	460c      	mov	r4, r1
 8002c42:	b118      	cbz	r0, 8002c4c <__swsetup_r+0x14>
 8002c44:	6a03      	ldr	r3, [r0, #32]
 8002c46:	b90b      	cbnz	r3, 8002c4c <__swsetup_r+0x14>
 8002c48:	f7ff fce2 	bl	8002610 <__sinit>
 8002c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c50:	0719      	lsls	r1, r3, #28
 8002c52:	d422      	bmi.n	8002c9a <__swsetup_r+0x62>
 8002c54:	06da      	lsls	r2, r3, #27
 8002c56:	d407      	bmi.n	8002c68 <__swsetup_r+0x30>
 8002c58:	2209      	movs	r2, #9
 8002c5a:	602a      	str	r2, [r5, #0]
 8002c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	f04f 30ff 	mov.w	r0, #4294967295
 8002c66:	e033      	b.n	8002cd0 <__swsetup_r+0x98>
 8002c68:	0758      	lsls	r0, r3, #29
 8002c6a:	d512      	bpl.n	8002c92 <__swsetup_r+0x5a>
 8002c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c6e:	b141      	cbz	r1, 8002c82 <__swsetup_r+0x4a>
 8002c70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002c74:	4299      	cmp	r1, r3
 8002c76:	d002      	beq.n	8002c7e <__swsetup_r+0x46>
 8002c78:	4628      	mov	r0, r5
 8002c7a:	f7ff fdc7 	bl	800280c <_free_r>
 8002c7e:	2300      	movs	r3, #0
 8002c80:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c82:	89a3      	ldrh	r3, [r4, #12]
 8002c84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002c88:	81a3      	strh	r3, [r4, #12]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	6063      	str	r3, [r4, #4]
 8002c8e:	6923      	ldr	r3, [r4, #16]
 8002c90:	6023      	str	r3, [r4, #0]
 8002c92:	89a3      	ldrh	r3, [r4, #12]
 8002c94:	f043 0308 	orr.w	r3, r3, #8
 8002c98:	81a3      	strh	r3, [r4, #12]
 8002c9a:	6923      	ldr	r3, [r4, #16]
 8002c9c:	b94b      	cbnz	r3, 8002cb2 <__swsetup_r+0x7a>
 8002c9e:	89a3      	ldrh	r3, [r4, #12]
 8002ca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ca8:	d003      	beq.n	8002cb2 <__swsetup_r+0x7a>
 8002caa:	4621      	mov	r1, r4
 8002cac:	4628      	mov	r0, r5
 8002cae:	f000 f84f 	bl	8002d50 <__smakebuf_r>
 8002cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cb6:	f013 0201 	ands.w	r2, r3, #1
 8002cba:	d00a      	beq.n	8002cd2 <__swsetup_r+0x9a>
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	60a2      	str	r2, [r4, #8]
 8002cc0:	6962      	ldr	r2, [r4, #20]
 8002cc2:	4252      	negs	r2, r2
 8002cc4:	61a2      	str	r2, [r4, #24]
 8002cc6:	6922      	ldr	r2, [r4, #16]
 8002cc8:	b942      	cbnz	r2, 8002cdc <__swsetup_r+0xa4>
 8002cca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002cce:	d1c5      	bne.n	8002c5c <__swsetup_r+0x24>
 8002cd0:	bd38      	pop	{r3, r4, r5, pc}
 8002cd2:	0799      	lsls	r1, r3, #30
 8002cd4:	bf58      	it	pl
 8002cd6:	6962      	ldrpl	r2, [r4, #20]
 8002cd8:	60a2      	str	r2, [r4, #8]
 8002cda:	e7f4      	b.n	8002cc6 <__swsetup_r+0x8e>
 8002cdc:	2000      	movs	r0, #0
 8002cde:	e7f7      	b.n	8002cd0 <__swsetup_r+0x98>
 8002ce0:	20000018 	.word	0x20000018

08002ce4 <_sbrk_r>:
 8002ce4:	b538      	push	{r3, r4, r5, lr}
 8002ce6:	4d06      	ldr	r5, [pc, #24]	@ (8002d00 <_sbrk_r+0x1c>)
 8002ce8:	2300      	movs	r3, #0
 8002cea:	4604      	mov	r4, r0
 8002cec:	4608      	mov	r0, r1
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	f7fd ffa2 	bl	8000c38 <_sbrk>
 8002cf4:	1c43      	adds	r3, r0, #1
 8002cf6:	d102      	bne.n	8002cfe <_sbrk_r+0x1a>
 8002cf8:	682b      	ldr	r3, [r5, #0]
 8002cfa:	b103      	cbz	r3, 8002cfe <_sbrk_r+0x1a>
 8002cfc:	6023      	str	r3, [r4, #0]
 8002cfe:	bd38      	pop	{r3, r4, r5, pc}
 8002d00:	20000210 	.word	0x20000210

08002d04 <__swhatbuf_r>:
 8002d04:	b570      	push	{r4, r5, r6, lr}
 8002d06:	460c      	mov	r4, r1
 8002d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d0c:	2900      	cmp	r1, #0
 8002d0e:	b096      	sub	sp, #88	@ 0x58
 8002d10:	4615      	mov	r5, r2
 8002d12:	461e      	mov	r6, r3
 8002d14:	da0d      	bge.n	8002d32 <__swhatbuf_r+0x2e>
 8002d16:	89a3      	ldrh	r3, [r4, #12]
 8002d18:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2340      	movne	r3, #64	@ 0x40
 8002d24:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002d28:	2000      	movs	r0, #0
 8002d2a:	6031      	str	r1, [r6, #0]
 8002d2c:	602b      	str	r3, [r5, #0]
 8002d2e:	b016      	add	sp, #88	@ 0x58
 8002d30:	bd70      	pop	{r4, r5, r6, pc}
 8002d32:	466a      	mov	r2, sp
 8002d34:	f000 f848 	bl	8002dc8 <_fstat_r>
 8002d38:	2800      	cmp	r0, #0
 8002d3a:	dbec      	blt.n	8002d16 <__swhatbuf_r+0x12>
 8002d3c:	9901      	ldr	r1, [sp, #4]
 8002d3e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002d42:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002d46:	4259      	negs	r1, r3
 8002d48:	4159      	adcs	r1, r3
 8002d4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002d4e:	e7eb      	b.n	8002d28 <__swhatbuf_r+0x24>

08002d50 <__smakebuf_r>:
 8002d50:	898b      	ldrh	r3, [r1, #12]
 8002d52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d54:	079d      	lsls	r5, r3, #30
 8002d56:	4606      	mov	r6, r0
 8002d58:	460c      	mov	r4, r1
 8002d5a:	d507      	bpl.n	8002d6c <__smakebuf_r+0x1c>
 8002d5c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002d60:	6023      	str	r3, [r4, #0]
 8002d62:	6123      	str	r3, [r4, #16]
 8002d64:	2301      	movs	r3, #1
 8002d66:	6163      	str	r3, [r4, #20]
 8002d68:	b003      	add	sp, #12
 8002d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d6c:	ab01      	add	r3, sp, #4
 8002d6e:	466a      	mov	r2, sp
 8002d70:	f7ff ffc8 	bl	8002d04 <__swhatbuf_r>
 8002d74:	9f00      	ldr	r7, [sp, #0]
 8002d76:	4605      	mov	r5, r0
 8002d78:	4639      	mov	r1, r7
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7ff fdb2 	bl	80028e4 <_malloc_r>
 8002d80:	b948      	cbnz	r0, 8002d96 <__smakebuf_r+0x46>
 8002d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d86:	059a      	lsls	r2, r3, #22
 8002d88:	d4ee      	bmi.n	8002d68 <__smakebuf_r+0x18>
 8002d8a:	f023 0303 	bic.w	r3, r3, #3
 8002d8e:	f043 0302 	orr.w	r3, r3, #2
 8002d92:	81a3      	strh	r3, [r4, #12]
 8002d94:	e7e2      	b.n	8002d5c <__smakebuf_r+0xc>
 8002d96:	89a3      	ldrh	r3, [r4, #12]
 8002d98:	6020      	str	r0, [r4, #0]
 8002d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d9e:	81a3      	strh	r3, [r4, #12]
 8002da0:	9b01      	ldr	r3, [sp, #4]
 8002da2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002da6:	b15b      	cbz	r3, 8002dc0 <__smakebuf_r+0x70>
 8002da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002dac:	4630      	mov	r0, r6
 8002dae:	f000 f81d 	bl	8002dec <_isatty_r>
 8002db2:	b128      	cbz	r0, 8002dc0 <__smakebuf_r+0x70>
 8002db4:	89a3      	ldrh	r3, [r4, #12]
 8002db6:	f023 0303 	bic.w	r3, r3, #3
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	81a3      	strh	r3, [r4, #12]
 8002dc0:	89a3      	ldrh	r3, [r4, #12]
 8002dc2:	431d      	orrs	r5, r3
 8002dc4:	81a5      	strh	r5, [r4, #12]
 8002dc6:	e7cf      	b.n	8002d68 <__smakebuf_r+0x18>

08002dc8 <_fstat_r>:
 8002dc8:	b538      	push	{r3, r4, r5, lr}
 8002dca:	4d07      	ldr	r5, [pc, #28]	@ (8002de8 <_fstat_r+0x20>)
 8002dcc:	2300      	movs	r3, #0
 8002dce:	4604      	mov	r4, r0
 8002dd0:	4608      	mov	r0, r1
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	602b      	str	r3, [r5, #0]
 8002dd6:	f7fd ff07 	bl	8000be8 <_fstat>
 8002dda:	1c43      	adds	r3, r0, #1
 8002ddc:	d102      	bne.n	8002de4 <_fstat_r+0x1c>
 8002dde:	682b      	ldr	r3, [r5, #0]
 8002de0:	b103      	cbz	r3, 8002de4 <_fstat_r+0x1c>
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
 8002de6:	bf00      	nop
 8002de8:	20000210 	.word	0x20000210

08002dec <_isatty_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4d06      	ldr	r5, [pc, #24]	@ (8002e08 <_isatty_r+0x1c>)
 8002df0:	2300      	movs	r3, #0
 8002df2:	4604      	mov	r4, r0
 8002df4:	4608      	mov	r0, r1
 8002df6:	602b      	str	r3, [r5, #0]
 8002df8:	f7fd ff06 	bl	8000c08 <_isatty>
 8002dfc:	1c43      	adds	r3, r0, #1
 8002dfe:	d102      	bne.n	8002e06 <_isatty_r+0x1a>
 8002e00:	682b      	ldr	r3, [r5, #0]
 8002e02:	b103      	cbz	r3, 8002e06 <_isatty_r+0x1a>
 8002e04:	6023      	str	r3, [r4, #0]
 8002e06:	bd38      	pop	{r3, r4, r5, pc}
 8002e08:	20000210 	.word	0x20000210

08002e0c <_init>:
 8002e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0e:	bf00      	nop
 8002e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e12:	bc08      	pop	{r3}
 8002e14:	469e      	mov	lr, r3
 8002e16:	4770      	bx	lr

08002e18 <_fini>:
 8002e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e1a:	bf00      	nop
 8002e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e1e:	bc08      	pop	{r3}
 8002e20:	469e      	mov	lr, r3
 8002e22:	4770      	bx	lr
