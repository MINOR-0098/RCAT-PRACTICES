#include "stm32f4xx.h"

int main()
{
  __disable_irq();

  RCC->AHB1ENR |= (101<<0);
  GPIOA->MODER |= (1<<10)|(1<<14);

  GPIOC->MODER &= ~(11<<(2*13));
//  -------------------------------------------
  EXTI->IMR |= (1<<13); // unmask interrupt

  EXTI->FTSR |= (1<<13); // enabling rising edge trigger
  EXTI->RTSR &= ~(1<<13); // disabling rising edge trigger

  RCC->APB2ENR |= (1<<14); // enabling clock for syconfig controller

  SYSCFG->EXTICR[3] |= (1<<5); // enable interrupt source PC13

  NVIC_EnableIRQ(EXTI15_10_IRQn); // Enable Interrupt

//  NVIC_SetPriority(EXTI15_10_IRQn, 15); // Lower the value, higher the priority

  __enable_irq();

  while(1)
    {
      // only required in Polling Mode
    }
}

void delay(int n)
{
  while(n>0)
    {
      n--;
    }
}
void
fun()
{
	static int count = 0;
	count++;
	for (int var = 0; var < 2*count; var++)
	{
		GPIOA->ODR = 1<<5;
		for (int I = 0; I < 1800000; ++I);
	}
	for (int var = 0; var < 6*count; ++var)
	{
		GPIOA->ODR ^= 1<<7;
		for (int I = 0; I < 1800000; ++I);
	}
}

void EXTI15_10_IRQHandler(void)
{

  	if (EXTI->PR & (1 << 13)) // checks whether interrupt occured or not
  	{
  		fun();
  	  EXTI->PR |= (1<<13); // clearing pending register for bit 13
  	}

}
