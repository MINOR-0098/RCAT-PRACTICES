
ex6 reg level.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000324  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004e8  080004e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004e8  080004e8  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  080004e8  080004e8  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004e8  080004e8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004e8  080004e8  000014e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004ec  080004ec  000014ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  080004f0  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000004  080004f4  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000028  080004f4  00002028  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   000018cd  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000577  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001e0  00000000  00000000  00003e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000151  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  000041a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021fe  00000000  00000000  00023869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3243  00000000  00000000  00025a67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005b0  00000000  00000000  000e8cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000e92a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080004d0 	.word	0x080004d0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080004d0 	.word	0x080004d0

08000204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800020e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000212:	2b00      	cmp	r3, #0
 8000214:	db0b      	blt.n	800022e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	f003 021f 	and.w	r2, r3, #31
 800021c:	4907      	ldr	r1, [pc, #28]	@ (800023c <__NVIC_EnableIRQ+0x38>)
 800021e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000222:	095b      	lsrs	r3, r3, #5
 8000224:	2001      	movs	r0, #1
 8000226:	fa00 f202 	lsl.w	r2, r0, r2
 800022a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800022e:	bf00      	nop
 8000230:	370c      	adds	r7, #12
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	e000e100 	.word	0xe000e100

08000240 <gpio>:
#include"stm32f4xx.h"

void gpio()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 0x5;
 8000244:	4b09      	ldr	r3, [pc, #36]	@ (800026c <gpio+0x2c>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a08      	ldr	r2, [pc, #32]	@ (800026c <gpio+0x2c>)
 800024a:	f043 0305 	orr.w	r3, r3, #5
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER = 0x2000;
 8000250:	4b07      	ldr	r3, [pc, #28]	@ (8000270 <gpio+0x30>)
 8000252:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000256:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0]=0x2000000;
 8000258:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <gpio+0x30>)
 800025a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800025e:	621a      	str	r2, [r3, #32]
}
 8000260:	bf00      	nop
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	40023800 	.word	0x40023800
 8000270:	40020000 	.word	0x40020000

08000274 <tim>:
void tim()
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= 0x3;
 8000278:	4b21      	ldr	r3, [pc, #132]	@ (8000300 <tim+0x8c>)
 800027a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800027c:	4a20      	ldr	r2, [pc, #128]	@ (8000300 <tim+0x8c>)
 800027e:	f043 0303 	orr.w	r3, r3, #3
 8000282:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 16000-1;
 8000284:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000288:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800028c:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 3000-1;
 800028e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000292:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000296:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000298:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800029c:	2200      	movs	r2, #0
 800029e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->DIER |= 1<<0; //EN INT
 80002a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 |=1<<0; //TIM EN
 80002b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM2_IRQn);
 80002c0:	201c      	movs	r0, #28
 80002c2:	f7ff ff9f 	bl	8000204 <__NVIC_EnableIRQ>

	TIM3->PSC = 160-1;
 80002c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <tim+0x90>)
 80002c8:	229f      	movs	r2, #159	@ 0x9f
 80002ca:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR = 100-1;
 80002cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000304 <tim+0x90>)
 80002ce:	2263      	movs	r2, #99	@ 0x63
 80002d0:	62da      	str	r2, [r3, #44]	@ 0x2c
//	TIM3->CNT = 0 ;
	TIM3->CCMR1 |= 0X60;
 80002d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000304 <tim+0x90>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000304 <tim+0x90>)
 80002d8:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80002dc:	6193      	str	r3, [r2, #24]
	TIM3->CCMR1 |=0X8;
 80002de:	4b09      	ldr	r3, [pc, #36]	@ (8000304 <tim+0x90>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a08      	ldr	r2, [pc, #32]	@ (8000304 <tim+0x90>)
 80002e4:	f043 0308 	orr.w	r3, r3, #8
 80002e8:	6193      	str	r3, [r2, #24]
//	TIM3->CCER|=1;
//	TIM3->CR1 |=1<<7;
	TIM3->CCR1 = 50;
 80002ea:	4b06      	ldr	r3, [pc, #24]	@ (8000304 <tim+0x90>)
 80002ec:	2232      	movs	r2, #50	@ 0x32
 80002ee:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CR1 |=1;
 80002f0:	4b04      	ldr	r3, [pc, #16]	@ (8000304 <tim+0x90>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a03      	ldr	r2, [pc, #12]	@ (8000304 <tim+0x90>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6013      	str	r3, [r2, #0]
}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40023800 	.word	0x40023800
 8000304:	40000400 	.word	0x40000400

08000308 <TIM2_IRQHandler>:
int a,x=0;
void TIM2_IRQHandler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(1);
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	691b      	ldr	r3, [r3, #16]
 8000312:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000316:	f023 0301 	bic.w	r3, r3, #1
 800031a:	6113      	str	r3, [r2, #16]
		  switch (x)
 800031c:	4b0f      	ldr	r3, [pc, #60]	@ (800035c <TIM2_IRQHandler+0x54>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	2b00      	cmp	r3, #0
 8000322:	d002      	beq.n	800032a <TIM2_IRQHandler+0x22>
 8000324:	2b01      	cmp	r3, #1
 8000326:	d00a      	beq.n	800033e <TIM2_IRQHandler+0x36>
				TIM3->ARR = 50-1;
				TIM3->CCR1 = 25;
				x=0;
				break;
		  }
}
 8000328:	e013      	b.n	8000352 <TIM2_IRQHandler+0x4a>
				TIM3->ARR = 100-1;
 800032a:	4b0d      	ldr	r3, [pc, #52]	@ (8000360 <TIM2_IRQHandler+0x58>)
 800032c:	2263      	movs	r2, #99	@ 0x63
 800032e:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM3->CCR1 = 50;
 8000330:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <TIM2_IRQHandler+0x58>)
 8000332:	2232      	movs	r2, #50	@ 0x32
 8000334:	635a      	str	r2, [r3, #52]	@ 0x34
				x=1;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <TIM2_IRQHandler+0x54>)
 8000338:	2201      	movs	r2, #1
 800033a:	601a      	str	r2, [r3, #0]
				break;
 800033c:	e009      	b.n	8000352 <TIM2_IRQHandler+0x4a>
				TIM3->ARR = 50-1;
 800033e:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <TIM2_IRQHandler+0x58>)
 8000340:	2231      	movs	r2, #49	@ 0x31
 8000342:	62da      	str	r2, [r3, #44]	@ 0x2c
				TIM3->CCR1 = 25;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <TIM2_IRQHandler+0x58>)
 8000346:	2219      	movs	r2, #25
 8000348:	635a      	str	r2, [r3, #52]	@ 0x34
				x=0;
 800034a:	4b04      	ldr	r3, [pc, #16]	@ (800035c <TIM2_IRQHandler+0x54>)
 800034c:	2200      	movs	r2, #0
 800034e:	601a      	str	r2, [r3, #0]
				break;
 8000350:	bf00      	nop
}
 8000352:	bf00      	nop
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	20000020 	.word	0x20000020
 8000360:	40000400 	.word	0x40000400

08000364 <main>:
int main()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	gpio();
 800036a:	f7ff ff69 	bl	8000240 <gpio>
	tim();
 800036e:	f7ff ff81 	bl	8000274 <tim>
	while(1)
	{
//		a=GPIOC->IDR&1<<8;
		for (int i = 0; i < 500; ++i) {
 8000372:	2300      	movs	r3, #0
 8000374:	607b      	str	r3, [r7, #4]
 8000376:	e002      	b.n	800037e <main+0x1a>
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	3301      	adds	r3, #1
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000384:	dbf8      	blt.n	8000378 <main+0x14>
 8000386:	e7f4      	b.n	8000372 <main+0xe>

08000388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800038c:	bf00      	nop
 800038e:	e7fd      	b.n	800038c <NMI_Handler+0x4>

08000390 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000390:	b480      	push	{r7}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000394:	bf00      	nop
 8000396:	e7fd      	b.n	8000394 <HardFault_Handler+0x4>

08000398 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800039c:	bf00      	nop
 800039e:	e7fd      	b.n	800039c <MemManage_Handler+0x4>

080003a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a4:	bf00      	nop
 80003a6:	e7fd      	b.n	80003a4 <BusFault_Handler+0x4>

080003a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ac:	bf00      	nop
 80003ae:	e7fd      	b.n	80003ac <UsageFault_Handler+0x4>

080003b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003be:	b480      	push	{r7}
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c2:	bf00      	nop
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d8:	4770      	bx	lr

080003da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003da:	b580      	push	{r7, lr}
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003de:	f000 f83f 	bl	8000460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003e2:	bf00      	nop
 80003e4:	bd80      	pop	{r7, pc}
	...

080003e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003ec:	4b06      	ldr	r3, [pc, #24]	@ (8000408 <SystemInit+0x20>)
 80003ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80003f2:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <SystemInit+0x20>)
 80003f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80003f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 800040c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000444 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000410:	f7ff ffea 	bl	80003e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000414:	480c      	ldr	r0, [pc, #48]	@ (8000448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000416:	490d      	ldr	r1, [pc, #52]	@ (800044c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000418:	4a0d      	ldr	r2, [pc, #52]	@ (8000450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800041a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800041c:	e002      	b.n	8000424 <LoopCopyDataInit>

0800041e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800041e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000422:	3304      	adds	r3, #4

08000424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000428:	d3f9      	bcc.n	800041e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800042a:	4a0a      	ldr	r2, [pc, #40]	@ (8000454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800042c:	4c0a      	ldr	r4, [pc, #40]	@ (8000458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800042e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000430:	e001      	b.n	8000436 <LoopFillZerobss>

08000432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000434:	3204      	adds	r2, #4

08000436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000438:	d3fb      	bcc.n	8000432 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800043a:	f000 f825 	bl	8000488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800043e:	f7ff ff91 	bl	8000364 <main>
  bx  lr    
 8000442:	4770      	bx	lr
Reset_Handler:   ldr   sp, =_estack      /* set stack pointer */
 8000444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800044c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000450:	080004f0 	.word	0x080004f0
  ldr r2, =_sbss
 8000454:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000458:	20000028 	.word	0x20000028

0800045c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800045c:	e7fe      	b.n	800045c <ADC_IRQHandler>
	...

08000460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <HAL_IncTick+0x20>)
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	461a      	mov	r2, r3
 800046a:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <HAL_IncTick+0x24>)
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4413      	add	r3, r2
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <HAL_IncTick+0x24>)
 8000472:	6013      	str	r3, [r2, #0]
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000000 	.word	0x20000000
 8000484:	20000024 	.word	0x20000024

08000488 <__libc_init_array>:
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	4d0d      	ldr	r5, [pc, #52]	@ (80004c0 <__libc_init_array+0x38>)
 800048c:	4c0d      	ldr	r4, [pc, #52]	@ (80004c4 <__libc_init_array+0x3c>)
 800048e:	1b64      	subs	r4, r4, r5
 8000490:	10a4      	asrs	r4, r4, #2
 8000492:	2600      	movs	r6, #0
 8000494:	42a6      	cmp	r6, r4
 8000496:	d109      	bne.n	80004ac <__libc_init_array+0x24>
 8000498:	4d0b      	ldr	r5, [pc, #44]	@ (80004c8 <__libc_init_array+0x40>)
 800049a:	4c0c      	ldr	r4, [pc, #48]	@ (80004cc <__libc_init_array+0x44>)
 800049c:	f000 f818 	bl	80004d0 <_init>
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	10a4      	asrs	r4, r4, #2
 80004a4:	2600      	movs	r6, #0
 80004a6:	42a6      	cmp	r6, r4
 80004a8:	d105      	bne.n	80004b6 <__libc_init_array+0x2e>
 80004aa:	bd70      	pop	{r4, r5, r6, pc}
 80004ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80004b0:	4798      	blx	r3
 80004b2:	3601      	adds	r6, #1
 80004b4:	e7ee      	b.n	8000494 <__libc_init_array+0xc>
 80004b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ba:	4798      	blx	r3
 80004bc:	3601      	adds	r6, #1
 80004be:	e7f2      	b.n	80004a6 <__libc_init_array+0x1e>
 80004c0:	080004e8 	.word	0x080004e8
 80004c4:	080004e8 	.word	0x080004e8
 80004c8:	080004e8 	.word	0x080004e8
 80004cc:	080004ec 	.word	0x080004ec

080004d0 <_init>:
 80004d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004d2:	bf00      	nop
 80004d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004d6:	bc08      	pop	{r3}
 80004d8:	469e      	mov	lr, r3
 80004da:	4770      	bx	lr

080004dc <_fini>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	bf00      	nop
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr
