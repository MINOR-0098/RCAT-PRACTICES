
input capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  080049b0  080049b0  000059b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a00  08004a00  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a00  08004a00  00005a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a08  08004a08  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a08  08004a08  00005a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a0c  08004a0c  00005a0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004a10  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000005c  08004a6c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08004a6c  000062c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d728  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbb  00000000  00000000  000137b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  00015570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d8  00000000  00000000  00016200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021489  00000000  00000000  00016bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f142  00000000  00000000  00038061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf221  00000000  00000000  000471a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001163c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039c8  00000000  00000000  00116408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00119dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004998 	.word	0x08004998

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08004998 	.word	0x08004998

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <HAL_TIM_IC_CaptureCallback>:

/* Measure Frequency */
int frequency = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	7f1b      	ldrb	r3, [r3, #28]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d13b      	bne.n	8000628 <HAL_TIM_IC_CaptureCallback+0x88>
	{
		if (Is_First_Captured==0) // if the first rising edge is not captured
 80005b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x90>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d10a      	bne.n	80005ce <HAL_TIM_IC_CaptureCallback+0x2e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80005b8:	2100      	movs	r1, #0
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f002 fbac 	bl	8002d18 <HAL_TIM_ReadCapturedValue>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0x94>)
 80005c4:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80005c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x90>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	601a      	str	r2, [r3, #0]

			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
			Is_First_Captured = 0; // set it back to false
		}
	}
}
 80005cc:	e02c      	b.n	8000628 <HAL_TIM_IC_CaptureCallback+0x88>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 80005ce:	2100      	movs	r1, #0
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f002 fba1 	bl	8002d18 <HAL_TIM_ReadCapturedValue>
 80005d6:	4603      	mov	r3, r0
 80005d8:	4a17      	ldr	r2, [pc, #92]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0x98>)
 80005da:	6013      	str	r3, [r2, #0]
			if (IC_Val2 > IC_Val1)
 80005dc:	4b16      	ldr	r3, [pc, #88]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0x98>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0x94>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	429a      	cmp	r2, r3
 80005e6:	d906      	bls.n	80005f6 <HAL_TIM_IC_CaptureCallback+0x56>
				Difference = IC_Val2-IC_Val1;
 80005e8:	4b13      	ldr	r3, [pc, #76]	@ (8000638 <HAL_TIM_IC_CaptureCallback+0x98>)
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <HAL_TIM_IC_CaptureCallback+0x94>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	4a12      	ldr	r2, [pc, #72]	@ (800063c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80005f4:	6013      	str	r3, [r2, #0]
			float refClock = TIMCLOCK/(PRESCALAR);
 80005f6:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80005f8:	60fb      	str	r3, [r7, #12]
			frequency = refClock/Difference;
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	ee07 3a90 	vmov	s15, r3
 8000602:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000606:	edd7 6a03 	vldr	s13, [r7, #12]
 800060a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800060e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000612:	ee17 2a90 	vmov	r2, s15
 8000616:	4b0b      	ldr	r3, [pc, #44]	@ (8000644 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8000618:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	625a      	str	r2, [r3, #36]	@ 0x24
			Is_First_Captured = 0; // set it back to false
 8000622:	4b03      	ldr	r3, [pc, #12]	@ (8000630 <HAL_TIM_IC_CaptureCallback+0x90>)
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
}
 8000628:	bf00      	nop
 800062a:	3710      	adds	r7, #16
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000015c 	.word	0x2000015c
 8000634:	20000150 	.word	0x20000150
 8000638:	20000154 	.word	0x20000154
 800063c:	20000158 	.word	0x20000158
 8000640:	49742400 	.word	0x49742400
 8000644:	20000160 	.word	0x20000160

08000648 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064c:	f000 fc0c 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000650:	f000 f830 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000654:	f000 f9da 	bl	8000a0c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000658:	f000 f9ae 	bl	80009b8 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800065c:	f000 f93c 	bl	80008d8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000660:	f000 f89a 	bl	8000798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 50;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <main+0x50>)
 8000666:	2232      	movs	r2, #50	@ 0x32
 8000668:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800066a:	2100      	movs	r1, #0
 800066c:	480b      	ldr	r0, [pc, #44]	@ (800069c <main+0x54>)
 800066e:	f001 fdf3 	bl	8002258 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000672:	2100      	movs	r1, #0
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <main+0x58>)
 8000676:	f001 ff11 	bl	800249c <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  sprintf(freq,"%d",frequency);
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <main+0x5c>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	4909      	ldr	r1, [pc, #36]	@ (80006a8 <main+0x60>)
 8000682:	480a      	ldr	r0, [pc, #40]	@ (80006ac <main+0x64>)
 8000684:	f003 fce8 	bl	8004058 <siprintf>
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart2, freq, 10, 20);
 8000688:	2314      	movs	r3, #20
 800068a:	220a      	movs	r2, #10
 800068c:	4907      	ldr	r1, [pc, #28]	@ (80006ac <main+0x64>)
 800068e:	4808      	ldr	r0, [pc, #32]	@ (80006b0 <main+0x68>)
 8000690:	f003 f926 	bl	80038e0 <HAL_UART_Transmit>
  {
 8000694:	bf00      	nop
 8000696:	e7f0      	b.n	800067a <main+0x32>
 8000698:	40010000 	.word	0x40010000
 800069c:	20000078 	.word	0x20000078
 80006a0:	200000c0 	.word	0x200000c0
 80006a4:	20000160 	.word	0x20000160
 80006a8:	080049b0 	.word	0x080049b0
 80006ac:	20000164 	.word	0x20000164
 80006b0:	20000108 	.word	0x20000108

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 031c 	add.w	r3, r7, #28
 80006be:	2234      	movs	r2, #52	@ 0x34
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fce8 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 0308 	add.w	r3, r7, #8
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	607b      	str	r3, [r7, #4]
 80006dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000790 <SystemClock_Config+0xdc>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000790 <SystemClock_Config+0xdc>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b29      	ldr	r3, [pc, #164]	@ (8000790 <SystemClock_Config+0xdc>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	603b      	str	r3, [r7, #0]
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a25      	ldr	r2, [pc, #148]	@ (8000794 <SystemClock_Config+0xe0>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b23      	ldr	r3, [pc, #140]	@ (8000794 <SystemClock_Config+0xe0>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000728:	23b4      	movs	r3, #180	@ 0xb4
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072c:	2302      	movs	r3, #2
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000730:	2302      	movs	r3, #2
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000734:	2302      	movs	r3, #2
 8000736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 031c 	add.w	r3, r7, #28
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fa45 	bl	8001bcc <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000748:	f000 f9cc 	bl	8000ae4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800074c:	f000 fea4 	bl	8001498 <HAL_PWREx_EnableOverDrive>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000756:	f000 f9c5 	bl	8000ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075a:	230f      	movs	r3, #15
 800075c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075e:	2302      	movs	r3, #2
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000766:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800076a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000770:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2105      	movs	r1, #5
 8000778:	4618      	mov	r0, r3
 800077a:	f000 fedd 	bl	8001538 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000784:	f000 f9ae 	bl	8000ae4 <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b096      	sub	sp, #88	@ 0x58
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800079e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
 80007c4:	611a      	str	r2, [r3, #16]
 80007c6:	615a      	str	r2, [r3, #20]
 80007c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007ca:	1d3b      	adds	r3, r7, #4
 80007cc:	2220      	movs	r2, #32
 80007ce:	2100      	movs	r1, #0
 80007d0:	4618      	mov	r0, r3
 80007d2:	f003 fc61 	bl	8004098 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d6:	4b3e      	ldr	r3, [pc, #248]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007d8:	4a3e      	ldr	r2, [pc, #248]	@ (80008d4 <MX_TIM1_Init+0x13c>)
 80007da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1800-1;
 80007dc:	4b3c      	ldr	r3, [pc, #240]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007de:	f240 7207 	movw	r2, #1799	@ 0x707
 80007e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e4:	4b3a      	ldr	r3, [pc, #232]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 80007ea:	4b39      	ldr	r3, [pc, #228]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007ec:	2263      	movs	r2, #99	@ 0x63
 80007ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b37      	ldr	r3, [pc, #220]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f6:	4b36      	ldr	r3, [pc, #216]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b34      	ldr	r3, [pc, #208]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000802:	4833      	ldr	r0, [pc, #204]	@ (80008d0 <MX_TIM1_Init+0x138>)
 8000804:	f001 fc80 	bl	8002108 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800080e:	f000 f969 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000816:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800081c:	4619      	mov	r1, r3
 800081e:	482c      	ldr	r0, [pc, #176]	@ (80008d0 <MX_TIM1_Init+0x138>)
 8000820:	f002 f9b2 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800082a:	f000 f95b 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800082e:	4828      	ldr	r0, [pc, #160]	@ (80008d0 <MX_TIM1_Init+0x138>)
 8000830:	f001 fcb9 	bl	80021a6 <HAL_TIM_PWM_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800083a:	f000 f953 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000842:	2300      	movs	r3, #0
 8000844:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000846:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800084a:	4619      	mov	r1, r3
 800084c:	4820      	ldr	r0, [pc, #128]	@ (80008d0 <MX_TIM1_Init+0x138>)
 800084e:	f002 ff15 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000858:	f000 f944 	bl	8000ae4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800085c:	2360      	movs	r3, #96	@ 0x60
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000864:	2300      	movs	r3, #0
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000868:	2300      	movs	r3, #0
 800086a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000870:	2300      	movs	r3, #0
 8000872:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000874:	2300      	movs	r3, #0
 8000876:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	2200      	movs	r2, #0
 800087e:	4619      	mov	r1, r3
 8000880:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <MX_TIM1_Init+0x138>)
 8000882:	f002 f8bf 	bl	8002a04 <HAL_TIM_PWM_ConfigChannel>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 800088c:	f000 f92a 	bl	8000ae4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	4619      	mov	r1, r3
 80008b2:	4807      	ldr	r0, [pc, #28]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80008b4:	f002 ff5e 	bl	8003774 <HAL_TIMEx_ConfigBreakDeadTime>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80008be:	f000 f911 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <MX_TIM1_Init+0x138>)
 80008c4:	f000 f9a2 	bl	8000c0c <HAL_TIM_MspPostInit>

}
 80008c8:	bf00      	nop
 80008ca:	3758      	adds	r7, #88	@ 0x58
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000078 	.word	0x20000078
 80008d4:	40010000 	.word	0x40010000

080008d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	@ 0x28
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008f6:	463b      	mov	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000902:	4b2b      	ldr	r3, [pc, #172]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000904:	4a2b      	ldr	r2, [pc, #172]	@ (80009b4 <MX_TIM3_Init+0xdc>)
 8000906:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 90-1;
 8000908:	4b29      	ldr	r3, [pc, #164]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 800090a:	2259      	movs	r2, #89	@ 0x59
 800090c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b28      	ldr	r3, [pc, #160]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xffff;
 8000914:	4b26      	ldr	r3, [pc, #152]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000916:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800091a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091c:	4b24      	ldr	r3, [pc, #144]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000922:	4b23      	ldr	r3, [pc, #140]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000928:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 800092a:	f001 fbed 	bl	8002108 <HAL_TIM_Base_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000934:	f000 f8d6 	bl	8000ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000938:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800093c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093e:	f107 0318 	add.w	r3, r7, #24
 8000942:	4619      	mov	r1, r3
 8000944:	481a      	ldr	r0, [pc, #104]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000946:	f002 f91f 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000950:	f000 f8c8 	bl	8000ae4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000954:	4816      	ldr	r0, [pc, #88]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000956:	f001 fd47 	bl	80023e8 <HAL_TIM_IC_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000960:	f000 f8c0 	bl	8000ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4619      	mov	r1, r3
 8000972:	480f      	ldr	r0, [pc, #60]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 8000974:	f002 fe82 	bl	800367c <HAL_TIMEx_MasterConfigSynchronization>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 800097e:	f000 f8b1 	bl	8000ae4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000986:	2301      	movs	r3, #1
 8000988:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000992:	463b      	mov	r3, r7
 8000994:	2200      	movs	r2, #0
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_TIM3_Init+0xd8>)
 800099a:	f001 ff97 	bl	80028cc <HAL_TIM_IC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80009a4:	f000 f89e 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	@ 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200000c0 	.word	0x200000c0
 80009b4:	40000400 	.word	0x40000400

080009b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009bc:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009be:	4a12      	ldr	r2, [pc, #72]	@ (8000a08 <MX_USART2_UART_Init+0x50>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009c2:	4b10      	ldr	r3, [pc, #64]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b08      	ldr	r3, [pc, #32]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b06      	ldr	r3, [pc, #24]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ee:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <MX_USART2_UART_Init+0x4c>)
 80009f0:	f002 ff26 	bl	8003840 <HAL_UART_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009fa:	f000 f873 	bl	8000ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fe:	bf00      	nop
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000108 	.word	0x20000108
 8000a08:	40004400 	.word	0x40004400

08000a0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	@ 0x28
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	4a24      	ldr	r2, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
 8000a74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7e:	4a16      	ldr	r2, [pc, #88]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a80:	f043 0302 	orr.w	r3, r3, #2
 8000a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_GPIO_Init+0xcc>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	607b      	str	r3, [r7, #4]
 8000a90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a98:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480c      	ldr	r0, [pc, #48]	@ (8000adc <MX_GPIO_Init+0xd0>)
 8000aaa:	f000 fb61 	bl	8001170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000aae:	2320      	movs	r3, #32
 8000ab0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	2300      	movs	r3, #0
 8000abc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_GPIO_Init+0xd4>)
 8000aca:	f000 fb51 	bl	8001170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023800 	.word	0x40023800
 8000adc:	40020800 	.word	0x40020800
 8000ae0:	40020000 	.word	0x40020000

08000ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae8:	b672      	cpsid	i
}
 8000aea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <Error_Handler+0x8>

08000af0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	607b      	str	r3, [r7, #4]
 8000afa:	4b10      	ldr	r3, [pc, #64]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b06:	4b0d      	ldr	r3, [pc, #52]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b20:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b22:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b2a:	603b      	str	r3, [r7, #0]
 8000b2c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b2e:	2007      	movs	r0, #7
 8000b30:	f000 fadc 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800

08000b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	@ 0x28
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <HAL_TIM_Base_MspInit+0xbc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d10e      	bne.n	8000b80 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b26      	ldr	r3, [pc, #152]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6a:	4a25      	ldr	r2, [pc, #148]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b72:	4b23      	ldr	r3, [pc, #140]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b7e:	e038      	b.n	8000bf2 <HAL_TIM_Base_MspInit+0xb2>
  else if(htim_base->Instance==TIM3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <HAL_TIM_Base_MspInit+0xc4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d133      	bne.n	8000bf2 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b92:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b94:	f043 0302 	orr.w	r3, r3, #2
 8000b98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9e:	f003 0302 	and.w	r3, r3, #2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b12      	ldr	r3, [pc, #72]	@ (8000c00 <HAL_TIM_Base_MspInit+0xc0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000bc2:	2340      	movs	r3, #64	@ 0x40
 8000bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480a      	ldr	r0, [pc, #40]	@ (8000c08 <HAL_TIM_Base_MspInit+0xc8>)
 8000bde:	f000 fac7 	bl	8001170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2100      	movs	r1, #0
 8000be6:	201d      	movs	r0, #29
 8000be8:	f000 fa8b 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bec:	201d      	movs	r0, #29
 8000bee:	f000 faa4 	bl	800113a <HAL_NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	@ 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40010000 	.word	0x40010000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40000400 	.word	0x40000400
 8000c08:	40020000 	.word	0x40020000

08000c0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b088      	sub	sp, #32
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <HAL_TIM_MspPostInit+0x68>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d11e      	bne.n	8000c6c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	@ (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_TIM_MspPostInit+0x6c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 030c 	add.w	r3, r7, #12
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <HAL_TIM_MspPostInit+0x70>)
 8000c68:	f000 fa82 	bl	8001170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3720      	adds	r7, #32
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40010000 	.word	0x40010000
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	@ 0x28
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a19      	ldr	r2, [pc, #100]	@ (8000d04 <HAL_UART_MspInit+0x84>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d12b      	bne.n	8000cfa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]
 8000ca6:	4b18      	ldr	r3, [pc, #96]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	4a17      	ldr	r2, [pc, #92]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cb2:	4b15      	ldr	r3, [pc, #84]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	60fb      	str	r3, [r7, #12]
 8000cc2:	4b11      	ldr	r3, [pc, #68]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	4a10      	ldr	r2, [pc, #64]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cce:	4b0e      	ldr	r3, [pc, #56]	@ (8000d08 <HAL_UART_MspInit+0x88>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cda:	230c      	movs	r3, #12
 8000cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cea:	2307      	movs	r3, #7
 8000cec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 0314 	add.w	r3, r7, #20
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	4805      	ldr	r0, [pc, #20]	@ (8000d0c <HAL_UART_MspInit+0x8c>)
 8000cf6:	f000 fa3b 	bl	8001170 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cfa:	bf00      	nop
 8000cfc:	3728      	adds	r7, #40	@ 0x28
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	40004400 	.word	0x40004400
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000

08000d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d14:	bf00      	nop
 8000d16:	e7fd      	b.n	8000d14 <NMI_Handler+0x4>

08000d18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d1c:	bf00      	nop
 8000d1e:	e7fd      	b.n	8000d1c <HardFault_Handler+0x4>

08000d20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <MemManage_Handler+0x4>

08000d28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <BusFault_Handler+0x4>

08000d30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <UsageFault_Handler+0x4>

08000d38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d3c:	bf00      	nop
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr

08000d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr

08000d62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d66:	f000 f8d1 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d74:	4802      	ldr	r0, [pc, #8]	@ (8000d80 <TIM3_IRQHandler+0x10>)
 8000d76:	f001 fcb9 	bl	80026ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200000c0 	.word	0x200000c0

08000d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d8c:	4a14      	ldr	r2, [pc, #80]	@ (8000de0 <_sbrk+0x5c>)
 8000d8e:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <_sbrk+0x60>)
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d98:	4b13      	ldr	r3, [pc, #76]	@ (8000de8 <_sbrk+0x64>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d102      	bne.n	8000da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da0:	4b11      	ldr	r3, [pc, #68]	@ (8000de8 <_sbrk+0x64>)
 8000da2:	4a12      	ldr	r2, [pc, #72]	@ (8000dec <_sbrk+0x68>)
 8000da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d207      	bcs.n	8000dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db4:	f003 f978 	bl	80040a8 <__errno>
 8000db8:	4603      	mov	r3, r0
 8000dba:	220c      	movs	r2, #12
 8000dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc2:	e009      	b.n	8000dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc4:	4b08      	ldr	r3, [pc, #32]	@ (8000de8 <_sbrk+0x64>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dca:	4b07      	ldr	r3, [pc, #28]	@ (8000de8 <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <_sbrk+0x64>)
 8000dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20020000 	.word	0x20020000
 8000de4:	00000400 	.word	0x00000400
 8000de8:	20000170 	.word	0x20000170
 8000dec:	200002c0 	.word	0x200002c0

08000df0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000df4:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <SystemInit+0x20>)
 8000df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dfa:	4a05      	ldr	r2, [pc, #20]	@ (8000e10 <SystemInit+0x20>)
 8000dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e4c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e18:	f7ff ffea 	bl	8000df0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e1c:	480c      	ldr	r0, [pc, #48]	@ (8000e50 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e1e:	490d      	ldr	r1, [pc, #52]	@ (8000e54 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e20:	4a0d      	ldr	r2, [pc, #52]	@ (8000e58 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e24:	e002      	b.n	8000e2c <LoopCopyDataInit>

08000e26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e2a:	3304      	adds	r3, #4

08000e2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e30:	d3f9      	bcc.n	8000e26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	@ (8000e5c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e34:	4c0a      	ldr	r4, [pc, #40]	@ (8000e60 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e38:	e001      	b.n	8000e3e <LoopFillZerobss>

08000e3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e3c:	3204      	adds	r2, #4

08000e3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e40:	d3fb      	bcc.n	8000e3a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e42:	f003 f937 	bl	80040b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e46:	f7ff fbff 	bl	8000648 <main>
  bx  lr    
 8000e4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e54:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e58:	08004a10 	.word	0x08004a10
  ldr r2, =_sbss
 8000e5c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e60:	200002c0 	.word	0x200002c0

08000e64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <HAL_Init+0x40>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea8 <HAL_Init+0x40>)
 8000e72:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e78:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea8 <HAL_Init+0x40>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea8 <HAL_Init+0x40>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_Init+0x40>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_Init+0x40>)
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 f92b 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	2000      	movs	r0, #0
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fe28 	bl	8000af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f943 	bl	8001156 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 f90b 	bl	8001102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b06      	ldr	r3, [pc, #24]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a04      	ldr	r2, [pc, #16]	@ (8000f30 <HAL_IncTick+0x24>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000174 	.word	0x20000174

08000f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return uwTick;
 8000f38:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <HAL_GetTick+0x14>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000174 	.word	0x20000174

08000f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f7e:	4a04      	ldr	r2, [pc, #16]	@ (8000f90 <__NVIC_SetPriorityGrouping+0x44>)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	60d3      	str	r3, [r2, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	e000ed00 	.word	0xe000ed00

08000f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f98:	4b04      	ldr	r3, [pc, #16]	@ (8000fac <__NVIC_GetPriorityGrouping+0x18>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	0a1b      	lsrs	r3, r3, #8
 8000f9e:	f003 0307 	and.w	r3, r3, #7
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	db0b      	blt.n	8000fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	f003 021f 	and.w	r2, r3, #31
 8000fc8:	4907      	ldr	r1, [pc, #28]	@ (8000fe8 <__NVIC_EnableIRQ+0x38>)
 8000fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fce:	095b      	lsrs	r3, r3, #5
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000e100 	.word	0xe000e100

08000fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	6039      	str	r1, [r7, #0]
 8000ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	db0a      	blt.n	8001016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	b2da      	uxtb	r2, r3
 8001004:	490c      	ldr	r1, [pc, #48]	@ (8001038 <__NVIC_SetPriority+0x4c>)
 8001006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100a:	0112      	lsls	r2, r2, #4
 800100c:	b2d2      	uxtb	r2, r2
 800100e:	440b      	add	r3, r1
 8001010:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001014:	e00a      	b.n	800102c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	b2da      	uxtb	r2, r3
 800101a:	4908      	ldr	r1, [pc, #32]	@ (800103c <__NVIC_SetPriority+0x50>)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	f003 030f 	and.w	r3, r3, #15
 8001022:	3b04      	subs	r3, #4
 8001024:	0112      	lsls	r2, r2, #4
 8001026:	b2d2      	uxtb	r2, r2
 8001028:	440b      	add	r3, r1
 800102a:	761a      	strb	r2, [r3, #24]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000e100 	.word	0xe000e100
 800103c:	e000ed00 	.word	0xe000ed00

08001040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f003 0307 	and.w	r3, r3, #7
 8001052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	f1c3 0307 	rsb	r3, r3, #7
 800105a:	2b04      	cmp	r3, #4
 800105c:	bf28      	it	cs
 800105e:	2304      	movcs	r3, #4
 8001060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3304      	adds	r3, #4
 8001066:	2b06      	cmp	r3, #6
 8001068:	d902      	bls.n	8001070 <NVIC_EncodePriority+0x30>
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	3b03      	subs	r3, #3
 800106e:	e000      	b.n	8001072 <NVIC_EncodePriority+0x32>
 8001070:	2300      	movs	r3, #0
 8001072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43da      	mvns	r2, r3
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	401a      	ands	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001088:	f04f 31ff 	mov.w	r1, #4294967295
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa01 f303 	lsl.w	r3, r1, r3
 8001092:	43d9      	mvns	r1, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	4313      	orrs	r3, r2
         );
}
 800109a:	4618      	mov	r0, r3
 800109c:	3724      	adds	r7, #36	@ 0x24
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	@ (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff8e 	bl	8000fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	@ (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff29 	bl	8000f4c <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001114:	f7ff ff3e 	bl	8000f94 <__NVIC_GetPriorityGrouping>
 8001118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	68b9      	ldr	r1, [r7, #8]
 800111e:	6978      	ldr	r0, [r7, #20]
 8001120:	f7ff ff8e 	bl	8001040 <NVIC_EncodePriority>
 8001124:	4602      	mov	r2, r0
 8001126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff5d 	bl	8000fec <__NVIC_SetPriority>
}
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	4603      	mov	r3, r0
 8001142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff31 	bl	8000fb0 <__NVIC_EnableIRQ>
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff ffa2 	bl	80010a8 <SysTick_Config>
 8001164:	4603      	mov	r3, r0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
 800118a:	e165      	b.n	8001458 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800118c:	2201      	movs	r2, #1
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	697a      	ldr	r2, [r7, #20]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	f040 8154 	bne.w	8001452 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	2b01      	cmp	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d130      	bne.n	8001224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	4013      	ands	r3, r2
 80011d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011f8:	2201      	movs	r2, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	091b      	lsrs	r3, r3, #4
 800120e:	f003 0201 	and.w	r2, r3, #1
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4313      	orrs	r3, r2
 800121c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b03      	cmp	r3, #3
 800122e:	d017      	beq.n	8001260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	4013      	ands	r3, r2
 8001246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69ba      	ldr	r2, [r7, #24]
 800125e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d123      	bne.n	80012b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	f003 0307 	and.w	r3, r3, #7
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	220f      	movs	r2, #15
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	43db      	mvns	r3, r3
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4013      	ands	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691a      	ldr	r2, [r3, #16]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	4313      	orrs	r3, r2
 80012a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	69b9      	ldr	r1, [r7, #24]
 80012b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	2203      	movs	r2, #3
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0203 	and.w	r2, r3, #3
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 80ae 	beq.w	8001452 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001470 <HAL_GPIO_Init+0x300>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001470 <HAL_GPIO_Init+0x300>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b5a      	ldr	r3, [pc, #360]	@ (8001470 <HAL_GPIO_Init+0x300>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001312:	4a58      	ldr	r2, [pc, #352]	@ (8001474 <HAL_GPIO_Init+0x304>)
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	089b      	lsrs	r3, r3, #2
 8001318:	3302      	adds	r3, #2
 800131a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f003 0303 	and.w	r3, r3, #3
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4013      	ands	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	@ (8001478 <HAL_GPIO_Init+0x308>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d025      	beq.n	800138a <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	@ (800147c <HAL_GPIO_Init+0x30c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d01f      	beq.n	8001386 <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	@ (8001480 <HAL_GPIO_Init+0x310>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d019      	beq.n	8001382 <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <HAL_GPIO_Init+0x314>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d013      	beq.n	800137e <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	@ (8001488 <HAL_GPIO_Init+0x318>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d00d      	beq.n	800137a <HAL_GPIO_Init+0x20a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4a      	ldr	r2, [pc, #296]	@ (800148c <HAL_GPIO_Init+0x31c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d007      	beq.n	8001376 <HAL_GPIO_Init+0x206>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a49      	ldr	r2, [pc, #292]	@ (8001490 <HAL_GPIO_Init+0x320>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d101      	bne.n	8001372 <HAL_GPIO_Init+0x202>
 800136e:	2306      	movs	r3, #6
 8001370:	e00c      	b.n	800138c <HAL_GPIO_Init+0x21c>
 8001372:	2307      	movs	r3, #7
 8001374:	e00a      	b.n	800138c <HAL_GPIO_Init+0x21c>
 8001376:	2305      	movs	r3, #5
 8001378:	e008      	b.n	800138c <HAL_GPIO_Init+0x21c>
 800137a:	2304      	movs	r3, #4
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x21c>
 800137e:	2303      	movs	r3, #3
 8001380:	e004      	b.n	800138c <HAL_GPIO_Init+0x21c>
 8001382:	2302      	movs	r3, #2
 8001384:	e002      	b.n	800138c <HAL_GPIO_Init+0x21c>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <HAL_GPIO_Init+0x21c>
 800138a:	2300      	movs	r3, #0
 800138c:	69fa      	ldr	r2, [r7, #28]
 800138e:	f002 0203 	and.w	r2, r2, #3
 8001392:	0092      	lsls	r2, r2, #2
 8001394:	4093      	lsls	r3, r2
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800139c:	4935      	ldr	r1, [pc, #212]	@ (8001474 <HAL_GPIO_Init+0x304>)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	089b      	lsrs	r3, r3, #2
 80013a2:	3302      	adds	r3, #2
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001494 <HAL_GPIO_Init+0x324>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4013      	ands	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ce:	4a31      	ldr	r2, [pc, #196]	@ (8001494 <HAL_GPIO_Init+0x324>)
 80013d0:	69bb      	ldr	r3, [r7, #24]
 80013d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_GPIO_Init+0x324>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	43db      	mvns	r3, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d003      	beq.n	80013f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013f8:	4a26      	ldr	r2, [pc, #152]	@ (8001494 <HAL_GPIO_Init+0x324>)
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013fe:	4b25      	ldr	r3, [pc, #148]	@ (8001494 <HAL_GPIO_Init+0x324>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d003      	beq.n	8001422 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001422:	4a1c      	ldr	r2, [pc, #112]	@ (8001494 <HAL_GPIO_Init+0x324>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_GPIO_Init+0x324>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	43db      	mvns	r3, r3
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	4013      	ands	r3, r2
 8001436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800144c:	4a11      	ldr	r2, [pc, #68]	@ (8001494 <HAL_GPIO_Init+0x324>)
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	f67f ae96 	bls.w	800118c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3724      	adds	r7, #36	@ 0x24
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40023800 	.word	0x40023800
 8001474:	40013800 	.word	0x40013800
 8001478:	40020000 	.word	0x40020000
 800147c:	40020400 	.word	0x40020400
 8001480:	40020800 	.word	0x40020800
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40021000 	.word	0x40021000
 800148c:	40021400 	.word	0x40021400
 8001490:	40021800 	.word	0x40021800
 8001494:	40013c00 	.word	0x40013c00

08001498 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b20      	ldr	r3, [pc, #128]	@ (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001528 <HAL_PWREx_EnableOverDrive+0x90>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80014be:	4b1b      	ldr	r3, [pc, #108]	@ (800152c <HAL_PWREx_EnableOverDrive+0x94>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014c4:	f7ff fd36 	bl	8000f34 <HAL_GetTick>
 80014c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014ca:	e009      	b.n	80014e0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014cc:	f7ff fd32 	bl	8000f34 <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014da:	d901      	bls.n	80014e0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e01f      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <HAL_PWREx_EnableOverDrive+0x98>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014ec:	d1ee      	bne.n	80014cc <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_PWREx_EnableOverDrive+0x9c>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff fd1e 	bl	8000f34 <HAL_GetTick>
 80014f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80014fa:	e009      	b.n	8001510 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80014fc:	f7ff fd1a 	bl	8000f34 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800150a:	d901      	bls.n	8001510 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e007      	b.n	8001520 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001510:	4b07      	ldr	r3, [pc, #28]	@ (8001530 <HAL_PWREx_EnableOverDrive+0x98>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001518:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800151c:	d1ee      	bne.n	80014fc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40023800 	.word	0x40023800
 800152c:	420e0040 	.word	0x420e0040
 8001530:	40007000 	.word	0x40007000
 8001534:	420e0044 	.word	0x420e0044

08001538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e0cc      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800154c:	4b68      	ldr	r3, [pc, #416]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 030f 	and.w	r3, r3, #15
 8001554:	683a      	ldr	r2, [r7, #0]
 8001556:	429a      	cmp	r2, r3
 8001558:	d90c      	bls.n	8001574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800155a:	4b65      	ldr	r3, [pc, #404]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800155c:	683a      	ldr	r2, [r7, #0]
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001562:	4b63      	ldr	r3, [pc, #396]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	429a      	cmp	r2, r3
 800156e:	d001      	beq.n	8001574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0b8      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d020      	beq.n	80015c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f003 0304 	and.w	r3, r3, #4
 8001588:	2b00      	cmp	r3, #0
 800158a:	d005      	beq.n	8001598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800158c:	4b59      	ldr	r3, [pc, #356]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4a58      	ldr	r2, [pc, #352]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001592:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001596:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d005      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015a4:	4b53      	ldr	r3, [pc, #332]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015b0:	4b50      	ldr	r3, [pc, #320]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	494d      	ldr	r1, [pc, #308]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d044      	beq.n	8001658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d107      	bne.n	80015e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d6:	4b47      	ldr	r3, [pc, #284]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d119      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e07f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d003      	beq.n	80015f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d107      	bne.n	8001606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f6:	4b3f      	ldr	r3, [pc, #252]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e06f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001606:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e067      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001616:	4b37      	ldr	r3, [pc, #220]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f023 0203 	bic.w	r2, r3, #3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4934      	ldr	r1, [pc, #208]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001624:	4313      	orrs	r3, r2
 8001626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001628:	f7ff fc84 	bl	8000f34 <HAL_GetTick>
 800162c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162e:	e00a      	b.n	8001646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001630:	f7ff fc80 	bl	8000f34 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e04f      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001646:	4b2b      	ldr	r3, [pc, #172]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 020c 	and.w	r2, r3, #12
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	429a      	cmp	r2, r3
 8001656:	d1eb      	bne.n	8001630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001658:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 030f 	and.w	r3, r3, #15
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	429a      	cmp	r2, r3
 8001664:	d20c      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	b2d2      	uxtb	r2, r2
 800166c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	683a      	ldr	r2, [r7, #0]
 8001678:	429a      	cmp	r2, r3
 800167a:	d001      	beq.n	8001680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e032      	b.n	80016e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800168c:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	4916      	ldr	r1, [pc, #88]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d009      	beq.n	80016be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	490e      	ldr	r1, [pc, #56]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016be:	f000 f855 	bl	800176c <HAL_RCC_GetSysClockFreq>
 80016c2:	4602      	mov	r2, r0
 80016c4:	4b0b      	ldr	r3, [pc, #44]	@ (80016f4 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	490a      	ldr	r1, [pc, #40]	@ (80016f8 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	5ccb      	ldrb	r3, [r1, r3]
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a09      	ldr	r2, [pc, #36]	@ (80016fc <HAL_RCC_ClockConfig+0x1c4>)
 80016d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_RCC_ClockConfig+0x1c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fbe4 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40023c00 	.word	0x40023c00
 80016f4:	40023800 	.word	0x40023800
 80016f8:	080049b4 	.word	0x080049b4
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <HAL_RCC_GetHCLKFreq+0x14>)
 800170a:	681b      	ldr	r3, [r3, #0]
}
 800170c:	4618      	mov	r0, r3
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	20000000 	.word	0x20000000

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001720:	f7ff fff0 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 8001724:	4602      	mov	r2, r0
 8001726:	4b05      	ldr	r3, [pc, #20]	@ (800173c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0a9b      	lsrs	r3, r3, #10
 800172c:	f003 0307 	and.w	r3, r3, #7
 8001730:	4903      	ldr	r1, [pc, #12]	@ (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001732:	5ccb      	ldrb	r3, [r1, r3]
 8001734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001738:	4618      	mov	r0, r3
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	080049c4 	.word	0x080049c4

08001744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001748:	f7ff ffdc 	bl	8001704 <HAL_RCC_GetHCLKFreq>
 800174c:	4602      	mov	r2, r0
 800174e:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	0b5b      	lsrs	r3, r3, #13
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	4903      	ldr	r1, [pc, #12]	@ (8001768 <HAL_RCC_GetPCLK2Freq+0x24>)
 800175a:	5ccb      	ldrb	r3, [r1, r3]
 800175c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001760:	4618      	mov	r0, r3
 8001762:	bd80      	pop	{r7, pc}
 8001764:	40023800 	.word	0x40023800
 8001768:	080049c4 	.word	0x080049c4

0800176c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800176c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001770:	b0ae      	sub	sp, #184	@ 0xb8
 8001772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001774:	2300      	movs	r3, #0
 8001776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800178c:	2300      	movs	r3, #0
 800178e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001792:	4bcb      	ldr	r3, [pc, #812]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b0c      	cmp	r3, #12
 800179c:	f200 8206 	bhi.w	8001bac <HAL_RCC_GetSysClockFreq+0x440>
 80017a0:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80017a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a6:	bf00      	nop
 80017a8:	080017dd 	.word	0x080017dd
 80017ac:	08001bad 	.word	0x08001bad
 80017b0:	08001bad 	.word	0x08001bad
 80017b4:	08001bad 	.word	0x08001bad
 80017b8:	080017e5 	.word	0x080017e5
 80017bc:	08001bad 	.word	0x08001bad
 80017c0:	08001bad 	.word	0x08001bad
 80017c4:	08001bad 	.word	0x08001bad
 80017c8:	080017ed 	.word	0x080017ed
 80017cc:	08001bad 	.word	0x08001bad
 80017d0:	08001bad 	.word	0x08001bad
 80017d4:	08001bad 	.word	0x08001bad
 80017d8:	080019dd 	.word	0x080019dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017dc:	4bb9      	ldr	r3, [pc, #740]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x358>)
 80017de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017e2:	e1e7      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e4:	4bb8      	ldr	r3, [pc, #736]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x35c>)
 80017e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80017ea:	e1e3      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4bb4      	ldr	r3, [pc, #720]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f8:	4bb1      	ldr	r3, [pc, #708]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001800:	2b00      	cmp	r3, #0
 8001802:	d071      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001804:	4bae      	ldr	r3, [pc, #696]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	099b      	lsrs	r3, r3, #6
 800180a:	2200      	movs	r2, #0
 800180c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001810:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001818:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800181c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800182a:	4622      	mov	r2, r4
 800182c:	462b      	mov	r3, r5
 800182e:	f04f 0000 	mov.w	r0, #0
 8001832:	f04f 0100 	mov.w	r1, #0
 8001836:	0159      	lsls	r1, r3, #5
 8001838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800183c:	0150      	lsls	r0, r2, #5
 800183e:	4602      	mov	r2, r0
 8001840:	460b      	mov	r3, r1
 8001842:	4621      	mov	r1, r4
 8001844:	1a51      	subs	r1, r2, r1
 8001846:	6439      	str	r1, [r7, #64]	@ 0x40
 8001848:	4629      	mov	r1, r5
 800184a:	eb63 0301 	sbc.w	r3, r3, r1
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800185c:	4649      	mov	r1, r9
 800185e:	018b      	lsls	r3, r1, #6
 8001860:	4641      	mov	r1, r8
 8001862:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001866:	4641      	mov	r1, r8
 8001868:	018a      	lsls	r2, r1, #6
 800186a:	4641      	mov	r1, r8
 800186c:	1a51      	subs	r1, r2, r1
 800186e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001870:	4649      	mov	r1, r9
 8001872:	eb63 0301 	sbc.w	r3, r3, r1
 8001876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	f04f 0300 	mov.w	r3, #0
 8001880:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001884:	4649      	mov	r1, r9
 8001886:	00cb      	lsls	r3, r1, #3
 8001888:	4641      	mov	r1, r8
 800188a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800188e:	4641      	mov	r1, r8
 8001890:	00ca      	lsls	r2, r1, #3
 8001892:	4610      	mov	r0, r2
 8001894:	4619      	mov	r1, r3
 8001896:	4603      	mov	r3, r0
 8001898:	4622      	mov	r2, r4
 800189a:	189b      	adds	r3, r3, r2
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
 800189e:	462b      	mov	r3, r5
 80018a0:	460a      	mov	r2, r1
 80018a2:	eb42 0303 	adc.w	r3, r2, r3
 80018a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80018a8:	f04f 0200 	mov.w	r2, #0
 80018ac:	f04f 0300 	mov.w	r3, #0
 80018b0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80018b4:	4629      	mov	r1, r5
 80018b6:	024b      	lsls	r3, r1, #9
 80018b8:	4621      	mov	r1, r4
 80018ba:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018be:	4621      	mov	r1, r4
 80018c0:	024a      	lsls	r2, r1, #9
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80018d0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80018d4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80018d8:	f7fe fcea 	bl	80002b0 <__aeabi_uldivmod>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	4613      	mov	r3, r2
 80018e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80018e6:	e067      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e8:	4b75      	ldr	r3, [pc, #468]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	2200      	movs	r2, #0
 80018f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018f4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80018f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80018fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001900:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001902:	2300      	movs	r3, #0
 8001904:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001906:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800190a:	4622      	mov	r2, r4
 800190c:	462b      	mov	r3, r5
 800190e:	f04f 0000 	mov.w	r0, #0
 8001912:	f04f 0100 	mov.w	r1, #0
 8001916:	0159      	lsls	r1, r3, #5
 8001918:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800191c:	0150      	lsls	r0, r2, #5
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	4621      	mov	r1, r4
 8001924:	1a51      	subs	r1, r2, r1
 8001926:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001928:	4629      	mov	r1, r5
 800192a:	eb63 0301 	sbc.w	r3, r3, r1
 800192e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800193c:	4649      	mov	r1, r9
 800193e:	018b      	lsls	r3, r1, #6
 8001940:	4641      	mov	r1, r8
 8001942:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001946:	4641      	mov	r1, r8
 8001948:	018a      	lsls	r2, r1, #6
 800194a:	4641      	mov	r1, r8
 800194c:	ebb2 0a01 	subs.w	sl, r2, r1
 8001950:	4649      	mov	r1, r9
 8001952:	eb63 0b01 	sbc.w	fp, r3, r1
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001962:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001966:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800196a:	4692      	mov	sl, r2
 800196c:	469b      	mov	fp, r3
 800196e:	4623      	mov	r3, r4
 8001970:	eb1a 0303 	adds.w	r3, sl, r3
 8001974:	623b      	str	r3, [r7, #32]
 8001976:	462b      	mov	r3, r5
 8001978:	eb4b 0303 	adc.w	r3, fp, r3
 800197c:	627b      	str	r3, [r7, #36]	@ 0x24
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800198a:	4629      	mov	r1, r5
 800198c:	028b      	lsls	r3, r1, #10
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001994:	4621      	mov	r1, r4
 8001996:	028a      	lsls	r2, r1, #10
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80019a0:	2200      	movs	r2, #0
 80019a2:	673b      	str	r3, [r7, #112]	@ 0x70
 80019a4:	677a      	str	r2, [r7, #116]	@ 0x74
 80019a6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80019aa:	f7fe fc81 	bl	80002b0 <__aeabi_uldivmod>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4613      	mov	r3, r2
 80019b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019b8:	4b41      	ldr	r3, [pc, #260]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	0c1b      	lsrs	r3, r3, #16
 80019be:	f003 0303 	and.w	r3, r3, #3
 80019c2:	3301      	adds	r3, #1
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80019ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80019ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80019d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019da:	e0eb      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019e4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e8:	4b35      	ldr	r3, [pc, #212]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d06b      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019f4:	4b32      	ldr	r3, [pc, #200]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x354>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	099b      	lsrs	r3, r3, #6
 80019fa:	2200      	movs	r2, #0
 80019fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80019fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a06:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a08:	2300      	movs	r3, #0
 8001a0a:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a0c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a10:	4622      	mov	r2, r4
 8001a12:	462b      	mov	r3, r5
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	f04f 0100 	mov.w	r1, #0
 8001a1c:	0159      	lsls	r1, r3, #5
 8001a1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a22:	0150      	lsls	r0, r2, #5
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4621      	mov	r1, r4
 8001a2a:	1a51      	subs	r1, r2, r1
 8001a2c:	61b9      	str	r1, [r7, #24]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	eb63 0301 	sbc.w	r3, r3, r1
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001a42:	4659      	mov	r1, fp
 8001a44:	018b      	lsls	r3, r1, #6
 8001a46:	4651      	mov	r1, sl
 8001a48:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	018a      	lsls	r2, r1, #6
 8001a50:	4651      	mov	r1, sl
 8001a52:	ebb2 0801 	subs.w	r8, r2, r1
 8001a56:	4659      	mov	r1, fp
 8001a58:	eb63 0901 	sbc.w	r9, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a68:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a6c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a70:	4690      	mov	r8, r2
 8001a72:	4699      	mov	r9, r3
 8001a74:	4623      	mov	r3, r4
 8001a76:	eb18 0303 	adds.w	r3, r8, r3
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	eb49 0303 	adc.w	r3, r9, r3
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001a90:	4629      	mov	r1, r5
 8001a92:	024b      	lsls	r3, r1, #9
 8001a94:	4621      	mov	r1, r4
 8001a96:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	024a      	lsls	r2, r1, #9
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001aaa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001aac:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ab0:	f7fe fbfe 	bl	80002b0 <__aeabi_uldivmod>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4613      	mov	r3, r2
 8001aba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001abe:	e065      	b.n	8001b8c <HAL_RCC_GetSysClockFreq+0x420>
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	00f42400 	.word	0x00f42400
 8001ac8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001acc:	4b3d      	ldr	r3, [pc, #244]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	099b      	lsrs	r3, r3, #6
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001adc:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ade:	2300      	movs	r3, #0
 8001ae0:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ae2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001ae6:	4642      	mov	r2, r8
 8001ae8:	464b      	mov	r3, r9
 8001aea:	f04f 0000 	mov.w	r0, #0
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	0159      	lsls	r1, r3, #5
 8001af4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001af8:	0150      	lsls	r0, r2, #5
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4641      	mov	r1, r8
 8001b00:	1a51      	subs	r1, r2, r1
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	4649      	mov	r1, r9
 8001b06:	eb63 0301 	sbc.w	r3, r3, r1
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001b18:	4659      	mov	r1, fp
 8001b1a:	018b      	lsls	r3, r1, #6
 8001b1c:	4651      	mov	r1, sl
 8001b1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b22:	4651      	mov	r1, sl
 8001b24:	018a      	lsls	r2, r1, #6
 8001b26:	4651      	mov	r1, sl
 8001b28:	1a54      	subs	r4, r2, r1
 8001b2a:	4659      	mov	r1, fp
 8001b2c:	eb63 0501 	sbc.w	r5, r3, r1
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00eb      	lsls	r3, r5, #3
 8001b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b3e:	00e2      	lsls	r2, r4, #3
 8001b40:	4614      	mov	r4, r2
 8001b42:	461d      	mov	r5, r3
 8001b44:	4643      	mov	r3, r8
 8001b46:	18e3      	adds	r3, r4, r3
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	eb45 0303 	adc.w	r3, r5, r3
 8001b50:	607b      	str	r3, [r7, #4]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f04f 0300 	mov.w	r3, #0
 8001b5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	028b      	lsls	r3, r1, #10
 8001b62:	4621      	mov	r1, r4
 8001b64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b68:	4621      	mov	r1, r4
 8001b6a:	028a      	lsls	r2, r1, #10
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b74:	2200      	movs	r2, #0
 8001b76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001b78:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001b7a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001b7e:	f7fe fb97 	bl	80002b0 <__aeabi_uldivmod>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4613      	mov	r3, r2
 8001b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <HAL_RCC_GetSysClockFreq+0x458>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	0f1b      	lsrs	r3, r3, #28
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001b9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001ba2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001baa:	e003      	b.n	8001bb4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bac:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001bae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bb2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	37b8      	adds	r7, #184	@ 0xb8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	00f42400 	.word	0x00f42400

08001bcc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e28d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	f000 8083 	beq.w	8001cf2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001bec:	4b94      	ldr	r3, [pc, #592]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 030c 	and.w	r3, r3, #12
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d019      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001bf8:	4b91      	ldr	r3, [pc, #580]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
        || \
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d106      	bne.n	8001c12 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c04:	4b8e      	ldr	r3, [pc, #568]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c10:	d00c      	beq.n	8001c2c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c12:	4b8b      	ldr	r3, [pc, #556]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001c1a:	2b0c      	cmp	r3, #12
 8001c1c:	d112      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b88      	ldr	r3, [pc, #544]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c2c:	4b84      	ldr	r3, [pc, #528]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d05b      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x124>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d157      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e25a      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c4c:	d106      	bne.n	8001c5c <HAL_RCC_OscConfig+0x90>
 8001c4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7b      	ldr	r2, [pc, #492]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	e01d      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c64:	d10c      	bne.n	8001c80 <HAL_RCC_OscConfig+0xb4>
 8001c66:	4b76      	ldr	r3, [pc, #472]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b73      	ldr	r3, [pc, #460]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a72      	ldr	r2, [pc, #456]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	e00b      	b.n	8001c98 <HAL_RCC_OscConfig+0xcc>
 8001c80:	4b6f      	ldr	r3, [pc, #444]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a6e      	ldr	r2, [pc, #440]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	4b6c      	ldr	r3, [pc, #432]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a6b      	ldr	r2, [pc, #428]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001c92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d013      	beq.n	8001cc8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f948 	bl	8000f34 <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff f944 	bl	8000f34 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	@ 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e21f      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	4b61      	ldr	r3, [pc, #388]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0xdc>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff f934 	bl	8000f34 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff f930 	bl	8000f34 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	@ 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e20b      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	4b57      	ldr	r3, [pc, #348]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x104>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d06f      	beq.n	8001dde <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001cfe:	4b50      	ldr	r3, [pc, #320]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	f003 030c 	and.w	r3, r3, #12
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d017      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d0a:	4b4d      	ldr	r3, [pc, #308]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d12:	2b08      	cmp	r3, #8
 8001d14:	d105      	bne.n	8001d22 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d16:	4b4a      	ldr	r3, [pc, #296]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b47      	ldr	r3, [pc, #284]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d11c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2e:	4b44      	ldr	r3, [pc, #272]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d116      	bne.n	8001d68 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d3a:	4b41      	ldr	r3, [pc, #260]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d005      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d001      	beq.n	8001d52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e1d3      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d52:	4b3b      	ldr	r3, [pc, #236]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4937      	ldr	r1, [pc, #220]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	e03a      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d020      	beq.n	8001db2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d70:	4b34      	ldr	r3, [pc, #208]	@ (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f8dd 	bl	8000f34 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7ff f8d9 	bl	8000f34 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e1b4      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d90:	4b2b      	ldr	r3, [pc, #172]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b28      	ldr	r3, [pc, #160]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	00db      	lsls	r3, r3, #3
 8001daa:	4925      	ldr	r1, [pc, #148]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	600b      	str	r3, [r1, #0]
 8001db0:	e015      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b24      	ldr	r3, [pc, #144]	@ (8001e44 <HAL_RCC_OscConfig+0x278>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db8:	f7ff f8bc 	bl	8000f34 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f8b8 	bl	8000f34 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e193      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1f0      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0308 	and.w	r3, r3, #8
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d036      	beq.n	8001e58 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d016      	beq.n	8001e20 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df2:	4b15      	ldr	r3, [pc, #84]	@ (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff f89c 	bl	8000f34 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7ff f898 	bl	8000f34 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e173      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e12:	4b0b      	ldr	r3, [pc, #44]	@ (8001e40 <HAL_RCC_OscConfig+0x274>)
 8001e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0f0      	beq.n	8001e00 <HAL_RCC_OscConfig+0x234>
 8001e1e:	e01b      	b.n	8001e58 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e20:	4b09      	ldr	r3, [pc, #36]	@ (8001e48 <HAL_RCC_OscConfig+0x27c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff f885 	bl	8000f34 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2c:	e00e      	b.n	8001e4c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2e:	f7ff f881 	bl	8000f34 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d907      	bls.n	8001e4c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e15c      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8001e40:	40023800 	.word	0x40023800
 8001e44:	42470000 	.word	0x42470000
 8001e48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e4c:	4b8a      	ldr	r3, [pc, #552]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1ea      	bne.n	8001e2e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 8097 	beq.w	8001f94 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6a:	4b83      	ldr	r3, [pc, #524]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	4a7e      	ldr	r2, [pc, #504]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e86:	4b7c      	ldr	r3, [pc, #496]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b79      	ldr	r3, [pc, #484]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b76      	ldr	r3, [pc, #472]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a75      	ldr	r2, [pc, #468]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff f841 	bl	8000f34 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff f83d 	bl	8000f34 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e118      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b6c      	ldr	r3, [pc, #432]	@ (800207c <HAL_RCC_OscConfig+0x4b0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x31e>
 8001edc:	4b66      	ldr	r3, [pc, #408]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee0:	4a65      	ldr	r2, [pc, #404]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee8:	e01c      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x340>
 8001ef2:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	4a60      	ldr	r2, [pc, #384]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efe:	4b5e      	ldr	r3, [pc, #376]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f02:	4a5d      	ldr	r2, [pc, #372]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0x358>
 8001f0c:	4b5a      	ldr	r3, [pc, #360]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4a59      	ldr	r2, [pc, #356]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f12:	f023 0301 	bic.w	r3, r3, #1
 8001f16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f18:	4b57      	ldr	r3, [pc, #348]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1c:	4a56      	ldr	r2, [pc, #344]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f1e:	f023 0304 	bic.w	r3, r3, #4
 8001f22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d015      	beq.n	8001f58 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2c:	f7ff f802 	bl	8000f34 <HAL_GetTick>
 8001f30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f34:	f7fe fffe 	bl	8000f34 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e0d7      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ee      	beq.n	8001f34 <HAL_RCC_OscConfig+0x368>
 8001f56:	e014      	b.n	8001f82 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe ffec 	bl	8000f34 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe ffe8 	bl	8000f34 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e0c1      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	4b40      	ldr	r3, [pc, #256]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1ee      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d105      	bne.n	8001f94 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f88:	4b3b      	ldr	r3, [pc, #236]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001f8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80ad 	beq.w	80020f8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d060      	beq.n	800206c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d145      	bne.n	800203e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb2:	4b33      	ldr	r3, [pc, #204]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb8:	f7fe ffbc 	bl	8000f34 <HAL_GetTick>
 8001fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fbe:	e008      	b.n	8001fd2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc0:	f7fe ffb8 	bl	8000f34 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	2b02      	cmp	r3, #2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e093      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fd2:	4b29      	ldr	r3, [pc, #164]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d1f0      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69da      	ldr	r2, [r3, #28]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	431a      	orrs	r2, r3
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	019b      	lsls	r3, r3, #6
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	085b      	lsrs	r3, r3, #1
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	041b      	lsls	r3, r3, #16
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	431a      	orrs	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	071b      	lsls	r3, r3, #28
 800200a:	491b      	ldr	r1, [pc, #108]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	4b1b      	ldr	r3, [pc, #108]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002012:	2201      	movs	r2, #1
 8002014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7fe ff8d 	bl	8000f34 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7fe ff89 	bl	8000f34 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e064      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002030:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0f0      	beq.n	800201e <HAL_RCC_OscConfig+0x452>
 800203c:	e05c      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203e:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <HAL_RCC_OscConfig+0x4b4>)
 8002040:	2200      	movs	r2, #0
 8002042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002044:	f7fe ff76 	bl	8000f34 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800204c:	f7fe ff72 	bl	8000f34 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b02      	cmp	r3, #2
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e04d      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <HAL_RCC_OscConfig+0x4ac>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0x480>
 800206a:	e045      	b.n	80020f8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d107      	bne.n	8002084 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e040      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
 8002078:	40023800 	.word	0x40023800
 800207c:	40007000 	.word	0x40007000
 8002080:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002084:	4b1f      	ldr	r3, [pc, #124]	@ (8002104 <HAL_RCC_OscConfig+0x538>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d030      	beq.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800209c:	429a      	cmp	r2, r3
 800209e:	d129      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d122      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020b4:	4013      	ands	r3, r2
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020bc:	4293      	cmp	r3, r2
 80020be:	d119      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10f      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d107      	bne.n	80020f4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40023800 	.word	0x40023800

08002108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e041      	b.n	800219e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002120:	b2db      	uxtb	r3, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d106      	bne.n	8002134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7fe fd06 	bl	8000b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2202      	movs	r2, #2
 8002138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 fe52 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2201      	movs	r2, #1
 8002150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2201      	movs	r2, #1
 8002170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2201      	movs	r2, #1
 8002178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2201      	movs	r2, #1
 8002188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2201      	movs	r2, #1
 8002190:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e041      	b.n	800223c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d106      	bne.n	80021d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f839 	bl	8002244 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2202      	movs	r2, #2
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	4619      	mov	r1, r3
 80021e4:	4610      	mov	r0, r2
 80021e6:	f000 fe03 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2201      	movs	r2, #1
 80021ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2201      	movs	r2, #1
 8002206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2201      	movs	r2, #1
 8002226:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d109      	bne.n	800227c <HAL_TIM_PWM_Start+0x24>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b01      	cmp	r3, #1
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e022      	b.n	80022c2 <HAL_TIM_PWM_Start+0x6a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	2b04      	cmp	r3, #4
 8002280:	d109      	bne.n	8002296 <HAL_TIM_PWM_Start+0x3e>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b01      	cmp	r3, #1
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e015      	b.n	80022c2 <HAL_TIM_PWM_Start+0x6a>
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d109      	bne.n	80022b0 <HAL_TIM_PWM_Start+0x58>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	e008      	b.n	80022c2 <HAL_TIM_PWM_Start+0x6a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	bf14      	ite	ne
 80022bc:	2301      	movne	r3, #1
 80022be:	2300      	moveq	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e07c      	b.n	80023c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <HAL_TIM_PWM_Start+0x82>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2202      	movs	r2, #2
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022d8:	e013      	b.n	8002302 <HAL_TIM_PWM_Start+0xaa>
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d104      	bne.n	80022ea <HAL_TIM_PWM_Start+0x92>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022e8:	e00b      	b.n	8002302 <HAL_TIM_PWM_Start+0xaa>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	2b08      	cmp	r3, #8
 80022ee:	d104      	bne.n	80022fa <HAL_TIM_PWM_Start+0xa2>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2202      	movs	r2, #2
 80022f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f8:	e003      	b.n	8002302 <HAL_TIM_PWM_Start+0xaa>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2202      	movs	r2, #2
 80022fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2201      	movs	r2, #1
 8002308:	6839      	ldr	r1, [r7, #0]
 800230a:	4618      	mov	r0, r3
 800230c:	f001 f990 	bl	8003630 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a2d      	ldr	r2, [pc, #180]	@ (80023cc <HAL_TIM_PWM_Start+0x174>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d004      	beq.n	8002324 <HAL_TIM_PWM_Start+0xcc>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a2c      	ldr	r2, [pc, #176]	@ (80023d0 <HAL_TIM_PWM_Start+0x178>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d101      	bne.n	8002328 <HAL_TIM_PWM_Start+0xd0>
 8002324:	2301      	movs	r3, #1
 8002326:	e000      	b.n	800232a <HAL_TIM_PWM_Start+0xd2>
 8002328:	2300      	movs	r3, #0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d007      	beq.n	800233e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800233c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a22      	ldr	r2, [pc, #136]	@ (80023cc <HAL_TIM_PWM_Start+0x174>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d022      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002350:	d01d      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1f      	ldr	r2, [pc, #124]	@ (80023d4 <HAL_TIM_PWM_Start+0x17c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d018      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_TIM_PWM_Start+0x180>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d013      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <HAL_TIM_PWM_Start+0x184>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d00e      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a16      	ldr	r2, [pc, #88]	@ (80023d0 <HAL_TIM_PWM_Start+0x178>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d009      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <HAL_TIM_PWM_Start+0x188>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIM_PWM_Start+0x136>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a16      	ldr	r2, [pc, #88]	@ (80023e4 <HAL_TIM_PWM_Start+0x18c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d111      	bne.n	80023b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b06      	cmp	r3, #6
 800239e:	d010      	beq.n	80023c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023b0:	e007      	b.n	80023c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f042 0201 	orr.w	r2, r2, #1
 80023c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40010400 	.word	0x40010400
 80023d4:	40000400 	.word	0x40000400
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40000c00 	.word	0x40000c00
 80023e0:	40014000 	.word	0x40014000
 80023e4:	40001800 	.word	0x40001800

080023e8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e041      	b.n	800247e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f839 	bl	8002486 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3304      	adds	r3, #4
 8002424:	4619      	mov	r1, r3
 8002426:	4610      	mov	r0, r2
 8002428:	f000 fce2 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2201      	movs	r2, #1
 8002470:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d104      	bne.n	80024ba <HAL_TIM_IC_Start_IT+0x1e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	e013      	b.n	80024e2 <HAL_TIM_IC_Start_IT+0x46>
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d104      	bne.n	80024ca <HAL_TIM_IC_Start_IT+0x2e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	e00b      	b.n	80024e2 <HAL_TIM_IC_Start_IT+0x46>
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	2b08      	cmp	r3, #8
 80024ce:	d104      	bne.n	80024da <HAL_TIM_IC_Start_IT+0x3e>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	e003      	b.n	80024e2 <HAL_TIM_IC_Start_IT+0x46>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d104      	bne.n	80024f4 <HAL_TIM_IC_Start_IT+0x58>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e013      	b.n	800251c <HAL_TIM_IC_Start_IT+0x80>
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	2b04      	cmp	r3, #4
 80024f8:	d104      	bne.n	8002504 <HAL_TIM_IC_Start_IT+0x68>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002500:	b2db      	uxtb	r3, r3
 8002502:	e00b      	b.n	800251c <HAL_TIM_IC_Start_IT+0x80>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b08      	cmp	r3, #8
 8002508:	d104      	bne.n	8002514 <HAL_TIM_IC_Start_IT+0x78>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e003      	b.n	800251c <HAL_TIM_IC_Start_IT+0x80>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800251a:	b2db      	uxtb	r3, r3
 800251c:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d102      	bne.n	800252a <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002524:	7b7b      	ldrb	r3, [r7, #13]
 8002526:	2b01      	cmp	r3, #1
 8002528:	d001      	beq.n	800252e <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e0cc      	b.n	80026c8 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d104      	bne.n	800253e <HAL_TIM_IC_Start_IT+0xa2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2202      	movs	r2, #2
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800253c:	e013      	b.n	8002566 <HAL_TIM_IC_Start_IT+0xca>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b04      	cmp	r3, #4
 8002542:	d104      	bne.n	800254e <HAL_TIM_IC_Start_IT+0xb2>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2202      	movs	r2, #2
 8002548:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800254c:	e00b      	b.n	8002566 <HAL_TIM_IC_Start_IT+0xca>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d104      	bne.n	800255e <HAL_TIM_IC_Start_IT+0xc2>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2202      	movs	r2, #2
 8002558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800255c:	e003      	b.n	8002566 <HAL_TIM_IC_Start_IT+0xca>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2202      	movs	r2, #2
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <HAL_TIM_IC_Start_IT+0xda>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2202      	movs	r2, #2
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002574:	e013      	b.n	800259e <HAL_TIM_IC_Start_IT+0x102>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b04      	cmp	r3, #4
 800257a:	d104      	bne.n	8002586 <HAL_TIM_IC_Start_IT+0xea>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2202      	movs	r2, #2
 8002580:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002584:	e00b      	b.n	800259e <HAL_TIM_IC_Start_IT+0x102>
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d104      	bne.n	8002596 <HAL_TIM_IC_Start_IT+0xfa>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002594:	e003      	b.n	800259e <HAL_TIM_IC_Start_IT+0x102>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2202      	movs	r2, #2
 800259a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b0c      	cmp	r3, #12
 80025a2:	d841      	bhi.n	8002628 <HAL_TIM_IC_Start_IT+0x18c>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <HAL_TIM_IC_Start_IT+0x110>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025e1 	.word	0x080025e1
 80025b0:	08002629 	.word	0x08002629
 80025b4:	08002629 	.word	0x08002629
 80025b8:	08002629 	.word	0x08002629
 80025bc:	080025f3 	.word	0x080025f3
 80025c0:	08002629 	.word	0x08002629
 80025c4:	08002629 	.word	0x08002629
 80025c8:	08002629 	.word	0x08002629
 80025cc:	08002605 	.word	0x08002605
 80025d0:	08002629 	.word	0x08002629
 80025d4:	08002629 	.word	0x08002629
 80025d8:	08002629 	.word	0x08002629
 80025dc:	08002617 	.word	0x08002617
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0202 	orr.w	r2, r2, #2
 80025ee:	60da      	str	r2, [r3, #12]
      break;
 80025f0:	e01d      	b.n	800262e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0204 	orr.w	r2, r2, #4
 8002600:	60da      	str	r2, [r3, #12]
      break;
 8002602:	e014      	b.n	800262e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	60da      	str	r2, [r3, #12]
      break;
 8002614:	e00b      	b.n	800262e <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0210 	orr.w	r2, r2, #16
 8002624:	60da      	str	r2, [r3, #12]
      break;
 8002626:	e002      	b.n	800262e <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	73fb      	strb	r3, [r7, #15]
      break;
 800262c:	bf00      	nop
  }

  if (status == HAL_OK)
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d148      	bne.n	80026c6 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2201      	movs	r2, #1
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fff7 	bl	8003630 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a22      	ldr	r2, [pc, #136]	@ (80026d0 <HAL_TIM_IC_Start_IT+0x234>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d022      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002654:	d01d      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a1e      	ldr	r2, [pc, #120]	@ (80026d4 <HAL_TIM_IC_Start_IT+0x238>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d018      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <HAL_TIM_IC_Start_IT+0x23c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d013      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a1b      	ldr	r2, [pc, #108]	@ (80026dc <HAL_TIM_IC_Start_IT+0x240>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d00e      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a19      	ldr	r2, [pc, #100]	@ (80026e0 <HAL_TIM_IC_Start_IT+0x244>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d009      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a18      	ldr	r2, [pc, #96]	@ (80026e4 <HAL_TIM_IC_Start_IT+0x248>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d004      	beq.n	8002692 <HAL_TIM_IC_Start_IT+0x1f6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a16      	ldr	r2, [pc, #88]	@ (80026e8 <HAL_TIM_IC_Start_IT+0x24c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d111      	bne.n	80026b6 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f003 0307 	and.w	r3, r3, #7
 800269c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b06      	cmp	r3, #6
 80026a2:	d010      	beq.n	80026c6 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b4:	e007      	b.n	80026c6 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0201 	orr.w	r2, r2, #1
 80026c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40010000 	.word	0x40010000
 80026d4:	40000400 	.word	0x40000400
 80026d8:	40000800 	.word	0x40000800
 80026dc:	40000c00 	.word	0x40000c00
 80026e0:	40010400 	.word	0x40010400
 80026e4:	40014000 	.word	0x40014000
 80026e8:	40001800 	.word	0x40001800

080026ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b084      	sub	sp, #16
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d020      	beq.n	8002750 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d01b      	beq.n	8002750 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0202 	mvn.w	r2, #2
 8002720:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fd ff32 	bl	80005a0 <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fb38 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 fb3f 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	f003 0304 	and.w	r3, r3, #4
 8002756:	2b00      	cmp	r3, #0
 8002758:	d020      	beq.n	800279c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01b      	beq.n	800279c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f06f 0204 	mvn.w	r2, #4
 800276c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2202      	movs	r2, #2
 8002772:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7fd ff0c 	bl	80005a0 <HAL_TIM_IC_CaptureCallback>
 8002788:	e005      	b.n	8002796 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 fb12 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fb19 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d020      	beq.n	80027e8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d01b      	beq.n	80027e8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f06f 0208 	mvn.w	r2, #8
 80027b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2204      	movs	r2, #4
 80027be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f7fd fee6 	bl	80005a0 <HAL_TIM_IC_CaptureCallback>
 80027d4:	e005      	b.n	80027e2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 faec 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 faf3 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d020      	beq.n	8002834 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d01b      	beq.n	8002834 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f06f 0210 	mvn.w	r2, #16
 8002804:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2208      	movs	r2, #8
 800280a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002816:	2b00      	cmp	r3, #0
 8002818:	d003      	beq.n	8002822 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fd fec0 	bl	80005a0 <HAL_TIM_IC_CaptureCallback>
 8002820:	e005      	b.n	800282e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f000 fac6 	bl	8002db4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 facd 	bl	8002dc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d00c      	beq.n	8002858 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0201 	mvn.w	r2, #1
 8002850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 faa4 	bl	8002da0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00c      	beq.n	800287c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002868:	2b00      	cmp	r3, #0
 800286a:	d007      	beq.n	800287c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 ffd8 	bl	800382c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fa9e 	bl	8002ddc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0320 	and.w	r3, r3, #32
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00c      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d007      	beq.n	80028c4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0220 	mvn.w	r2, #32
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 ffaa 	bl	8003818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028c4:	bf00      	nop
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b086      	sub	sp, #24
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60f8      	str	r0, [r7, #12]
 80028d4:	60b9      	str	r1, [r7, #8]
 80028d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_IC_ConfigChannel+0x1e>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e088      	b.n	80029fc <HAL_TIM_IC_ConfigChannel+0x130>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d11b      	bne.n	8002930 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002908:	f000 fcce 	bl	80032a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699a      	ldr	r2, [r3, #24]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 020c 	bic.w	r2, r2, #12
 800291a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	6999      	ldr	r1, [r3, #24]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	430a      	orrs	r2, r1
 800292c:	619a      	str	r2, [r3, #24]
 800292e:	e060      	b.n	80029f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b04      	cmp	r3, #4
 8002934:	d11c      	bne.n	8002970 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002946:	f000 fd52 	bl	80033ee <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699a      	ldr	r2, [r3, #24]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002958:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6999      	ldr	r1, [r3, #24]
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	021a      	lsls	r2, r3, #8
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	619a      	str	r2, [r3, #24]
 800296e:	e040      	b.n	80029f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d11b      	bne.n	80029ae <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002986:	f000 fd9f 	bl	80034c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	69da      	ldr	r2, [r3, #28]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 020c 	bic.w	r2, r2, #12
 8002998:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	69d9      	ldr	r1, [r3, #28]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	61da      	str	r2, [r3, #28]
 80029ac:	e021      	b.n	80029f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b0c      	cmp	r3, #12
 80029b2:	d11c      	bne.n	80029ee <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80029c4:	f000 fdbc 	bl	8003540 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69da      	ldr	r2, [r3, #28]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80029d6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69d9      	ldr	r1, [r3, #28]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	021a      	lsls	r2, r3, #8
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	61da      	str	r2, [r3, #28]
 80029ec:	e001      	b.n	80029f2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0ae      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f200 809f 	bhi.w	8002b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a32:	a201      	add	r2, pc, #4	@ (adr r2, 8002a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002b71 	.word	0x08002b71
 8002a40:	08002b71 	.word	0x08002b71
 8002a44:	08002b71 	.word	0x08002b71
 8002a48:	08002aad 	.word	0x08002aad
 8002a4c:	08002b71 	.word	0x08002b71
 8002a50:	08002b71 	.word	0x08002b71
 8002a54:	08002b71 	.word	0x08002b71
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002b71 	.word	0x08002b71
 8002a60:	08002b71 	.word	0x08002b71
 8002a64:	08002b71 	.word	0x08002b71
 8002a68:	08002b2f 	.word	0x08002b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 fa68 	bl	8002f48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	619a      	str	r2, [r3, #24]
      break;
 8002aaa:	e064      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fab8 	bl	8003028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
      break;
 8002aec:	e043      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fb0d 	bl	8003114 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0208 	orr.w	r2, r2, #8
 8002b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
      break;
 8002b2c:	e023      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fb61 	bl	80031fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0b4      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xd4>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x172>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b70      	cmp	r3, #112	@ 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xa6>
 8002bf8:	2b70      	cmp	r3, #112	@ 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c00:	2b60      	cmp	r3, #96	@ 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b50      	cmp	r3, #80	@ 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2b50      	cmp	r3, #80	@ 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b40      	cmp	r3, #64	@ 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c10:	2b40      	cmp	r3, #64	@ 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b30      	cmp	r3, #48	@ 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b30      	cmp	r3, #48	@ 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	f000 fcd7 	bl	80035f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	f000 fcc0 	bl	80035f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fb7e 	bl	8003390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	@ 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 fc8d 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 fbda 	bl	8003468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	@ 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fc7d 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 fb5e 	bl	8003390 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	@ 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fc6d 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 fc64 	bl	80035ba <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b0c      	cmp	r3, #12
 8002d2a:	d831      	bhi.n	8002d90 <HAL_TIM_ReadCapturedValue+0x78>
 8002d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d34 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d32:	bf00      	nop
 8002d34:	08002d69 	.word	0x08002d69
 8002d38:	08002d91 	.word	0x08002d91
 8002d3c:	08002d91 	.word	0x08002d91
 8002d40:	08002d91 	.word	0x08002d91
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d91 	.word	0x08002d91
 8002d4c:	08002d91 	.word	0x08002d91
 8002d50:	08002d91 	.word	0x08002d91
 8002d54:	08002d7d 	.word	0x08002d7d
 8002d58:	08002d91 	.word	0x08002d91
 8002d5c:	08002d91 	.word	0x08002d91
 8002d60:	08002d91 	.word	0x08002d91
 8002d64:	08002d87 	.word	0x08002d87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d6e:	60fb      	str	r3, [r7, #12]

      break;
 8002d70:	e00f      	b.n	8002d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d78:	60fb      	str	r3, [r7, #12]

      break;
 8002d7a:	e00a      	b.n	8002d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d82:	60fb      	str	r3, [r7, #12]

      break;
 8002d84:	e005      	b.n	8002d92 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	60fb      	str	r3, [r7, #12]

      break;
 8002d8e:	e000      	b.n	8002d92 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002d90:	bf00      	nop
  }

  return tmpreg;
 8002d92:	68fb      	ldr	r3, [r7, #12]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a46      	ldr	r2, [pc, #280]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d013      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e0e:	d00f      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a43      	ldr	r2, [pc, #268]	@ (8002f20 <TIM_Base_SetConfig+0x130>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00b      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a42      	ldr	r2, [pc, #264]	@ (8002f24 <TIM_Base_SetConfig+0x134>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a41      	ldr	r2, [pc, #260]	@ (8002f28 <TIM_Base_SetConfig+0x138>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x40>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a40      	ldr	r2, [pc, #256]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a35      	ldr	r2, [pc, #212]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d02b      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e50:	d027      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <TIM_Base_SetConfig+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d023      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a31      	ldr	r2, [pc, #196]	@ (8002f24 <TIM_Base_SetConfig+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d01f      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a30      	ldr	r2, [pc, #192]	@ (8002f28 <TIM_Base_SetConfig+0x138>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d01b      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a2f      	ldr	r2, [pc, #188]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d017      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a2e      	ldr	r2, [pc, #184]	@ (8002f30 <TIM_Base_SetConfig+0x140>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d013      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8002f34 <TIM_Base_SetConfig+0x144>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00f      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <TIM_Base_SetConfig+0x148>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00b      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f3c <TIM_Base_SetConfig+0x14c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d007      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a2a      	ldr	r2, [pc, #168]	@ (8002f40 <TIM_Base_SetConfig+0x150>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d003      	beq.n	8002ea2 <TIM_Base_SetConfig+0xb2>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a29      	ldr	r2, [pc, #164]	@ (8002f44 <TIM_Base_SetConfig+0x154>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d108      	bne.n	8002eb4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ea8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a10      	ldr	r2, [pc, #64]	@ (8002f1c <TIM_Base_SetConfig+0x12c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_Base_SetConfig+0xf8>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a12      	ldr	r2, [pc, #72]	@ (8002f2c <TIM_Base_SetConfig+0x13c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d103      	bne.n	8002ef0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d105      	bne.n	8002f0e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f023 0201 	bic.w	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	611a      	str	r2, [r3, #16]
  }
}
 8002f0e:	bf00      	nop
 8002f10:	3714      	adds	r7, #20
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	40010000 	.word	0x40010000
 8002f20:	40000400 	.word	0x40000400
 8002f24:	40000800 	.word	0x40000800
 8002f28:	40000c00 	.word	0x40000c00
 8002f2c:	40010400 	.word	0x40010400
 8002f30:	40014000 	.word	0x40014000
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800
 8002f3c:	40001800 	.word	0x40001800
 8002f40:	40001c00 	.word	0x40001c00
 8002f44:	40002000 	.word	0x40002000

08002f48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b087      	sub	sp, #28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
 8002f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	f023 0201 	bic.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0303 	bic.w	r3, r3, #3
 8002f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
 8002f90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a20      	ldr	r2, [pc, #128]	@ (8003020 <TIM_OC1_SetConfig+0xd8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d003      	beq.n	8002fac <TIM_OC1_SetConfig+0x64>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8003024 <TIM_OC1_SetConfig+0xdc>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d10c      	bne.n	8002fc6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f023 0308 	bic.w	r3, r3, #8
 8002fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	f023 0304 	bic.w	r3, r3, #4
 8002fc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a15      	ldr	r2, [pc, #84]	@ (8003020 <TIM_OC1_SetConfig+0xd8>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_OC1_SetConfig+0x8e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a14      	ldr	r2, [pc, #80]	@ (8003024 <TIM_OC1_SetConfig+0xdc>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d111      	bne.n	8002ffa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fdc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002fe4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010000 	.word	0x40010000
 8003024:	40010400 	.word	0x40010400

08003028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	f023 0210 	bic.w	r2, r3, #16
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0320 	bic.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a22      	ldr	r2, [pc, #136]	@ (800310c <TIM_OC2_SetConfig+0xe4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_OC2_SetConfig+0x68>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a21      	ldr	r2, [pc, #132]	@ (8003110 <TIM_OC2_SetConfig+0xe8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d10d      	bne.n	80030ac <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a17      	ldr	r2, [pc, #92]	@ (800310c <TIM_OC2_SetConfig+0xe4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d003      	beq.n	80030bc <TIM_OC2_SetConfig+0x94>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a16      	ldr	r2, [pc, #88]	@ (8003110 <TIM_OC2_SetConfig+0xe8>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d113      	bne.n	80030e4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	693a      	ldr	r2, [r7, #16]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685a      	ldr	r2, [r3, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	621a      	str	r2, [r3, #32]
}
 80030fe:	bf00      	nop
 8003100:	371c      	adds	r7, #28
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40010000 	.word	0x40010000
 8003110:	40010400 	.word	0x40010400

08003114 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003114:	b480      	push	{r7}
 8003116:	b087      	sub	sp, #28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a1b      	ldr	r3, [r3, #32]
 8003122:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800315c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	4313      	orrs	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a21      	ldr	r2, [pc, #132]	@ (80031f4 <TIM_OC3_SetConfig+0xe0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d003      	beq.n	800317a <TIM_OC3_SetConfig+0x66>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a20      	ldr	r2, [pc, #128]	@ (80031f8 <TIM_OC3_SetConfig+0xe4>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d10d      	bne.n	8003196 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003180:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	4313      	orrs	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a16      	ldr	r2, [pc, #88]	@ (80031f4 <TIM_OC3_SetConfig+0xe0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d003      	beq.n	80031a6 <TIM_OC3_SetConfig+0x92>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a15      	ldr	r2, [pc, #84]	@ (80031f8 <TIM_OC3_SetConfig+0xe4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d113      	bne.n	80031ce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80031ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80031b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	621a      	str	r2, [r3, #32]
}
 80031e8:	bf00      	nop
 80031ea:	371c      	adds	r7, #28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	40010000 	.word	0x40010000
 80031f8:	40010400 	.word	0x40010400

080031fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800322a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	021b      	lsls	r3, r3, #8
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003246:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	4313      	orrs	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a12      	ldr	r2, [pc, #72]	@ (80032a0 <TIM_OC4_SetConfig+0xa4>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d003      	beq.n	8003264 <TIM_OC4_SetConfig+0x68>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a11      	ldr	r2, [pc, #68]	@ (80032a4 <TIM_OC4_SetConfig+0xa8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d109      	bne.n	8003278 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800326a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	019b      	lsls	r3, r3, #6
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685a      	ldr	r2, [r3, #4]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	621a      	str	r2, [r3, #32]
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	40010000 	.word	0x40010000
 80032a4:	40010400 	.word	0x40010400

080032a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b087      	sub	sp, #28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6a1b      	ldr	r3, [r3, #32]
 80032ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 0201 	bic.w	r2, r3, #1
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a28      	ldr	r2, [pc, #160]	@ (8003374 <TIM_TI1_SetConfig+0xcc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01b      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032dc:	d017      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4a25      	ldr	r2, [pc, #148]	@ (8003378 <TIM_TI1_SetConfig+0xd0>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a24      	ldr	r2, [pc, #144]	@ (800337c <TIM_TI1_SetConfig+0xd4>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00f      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4a23      	ldr	r2, [pc, #140]	@ (8003380 <TIM_TI1_SetConfig+0xd8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00b      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <TIM_TI1_SetConfig+0xdc>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d007      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4a21      	ldr	r2, [pc, #132]	@ (8003388 <TIM_TI1_SetConfig+0xe0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d003      	beq.n	800330e <TIM_TI1_SetConfig+0x66>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	4a20      	ldr	r2, [pc, #128]	@ (800338c <TIM_TI1_SetConfig+0xe4>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d101      	bne.n	8003312 <TIM_TI1_SetConfig+0x6a>
 800330e:	2301      	movs	r3, #1
 8003310:	e000      	b.n	8003314 <TIM_TI1_SetConfig+0x6c>
 8003312:	2300      	movs	r3, #0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d008      	beq.n	800332a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f023 0303 	bic.w	r3, r3, #3
 800331e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e003      	b.n	8003332 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f043 0301 	orr.w	r3, r3, #1
 8003330:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	b2db      	uxtb	r3, r3
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	f023 030a 	bic.w	r3, r3, #10
 800334c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	f003 030a 	and.w	r3, r3, #10
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	4313      	orrs	r3, r2
 8003358:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	697a      	ldr	r2, [r7, #20]
 800335e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	621a      	str	r2, [r3, #32]
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	40010000 	.word	0x40010000
 8003378:	40000400 	.word	0x40000400
 800337c:	40000800 	.word	0x40000800
 8003380:	40000c00 	.word	0x40000c00
 8003384:	40010400 	.word	0x40010400
 8003388:	40014000 	.word	0x40014000
 800338c:	40001800 	.word	0x40001800

08003390 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b087      	sub	sp, #28
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a1b      	ldr	r3, [r3, #32]
 80033a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a1b      	ldr	r3, [r3, #32]
 80033a6:	f023 0201 	bic.w	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f023 030a 	bic.w	r3, r3, #10
 80033cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	621a      	str	r2, [r3, #32]
}
 80033e2:	bf00      	nop
 80033e4:	371c      	adds	r7, #28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b087      	sub	sp, #28
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	607a      	str	r2, [r7, #4]
 80033fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	f023 0210 	bic.w	r2, r3, #16
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800341a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800342c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	031b      	lsls	r3, r3, #12
 8003432:	b29b      	uxth	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003440:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	4313      	orrs	r3, r2
 800344e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	621a      	str	r2, [r3, #32]
}
 800345c:	bf00      	nop
 800345e:	371c      	adds	r7, #28
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003468:	b480      	push	{r7}
 800346a:	b087      	sub	sp, #28
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a1b      	ldr	r3, [r3, #32]
 8003478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0210 	bic.w	r2, r3, #16
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	031b      	lsls	r3, r3, #12
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4313      	orrs	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	69db      	ldr	r3, [r3, #28]
 80034ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f023 0303 	bic.w	r3, r3, #3
 80034f4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003504:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	b2db      	uxtb	r3, r3
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8003518:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	021b      	lsls	r3, r3, #8
 800351e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	621a      	str	r2, [r3, #32]
}
 8003534:	bf00      	nop
 8003536:	371c      	adds	r7, #28
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a1b      	ldr	r3, [r3, #32]
 8003558:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	69db      	ldr	r3, [r3, #28]
 8003564:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800356c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	021b      	lsls	r3, r3, #8
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800357e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	031b      	lsls	r3, r3, #12
 8003584:	b29b      	uxth	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8003592:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	031b      	lsls	r3, r3, #12
 8003598:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4313      	orrs	r3, r2
 80035a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	697a      	ldr	r2, [r7, #20]
 80035ac:	621a      	str	r2, [r3, #32]
}
 80035ae:	bf00      	nop
 80035b0:	371c      	adds	r7, #28
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b085      	sub	sp, #20
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f043 0307 	orr.w	r3, r3, #7
 80035dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68fa      	ldr	r2, [r7, #12]
 80035e2:	609a      	str	r2, [r3, #8]
}
 80035e4:	bf00      	nop
 80035e6:	3714      	adds	r7, #20
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b087      	sub	sp, #28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800360a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	431a      	orrs	r2, r3
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	4313      	orrs	r3, r2
 8003618:	697a      	ldr	r2, [r7, #20]
 800361a:	4313      	orrs	r3, r2
 800361c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	609a      	str	r2, [r3, #8]
}
 8003624:	bf00      	nop
 8003626:	371c      	adds	r7, #28
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	f003 031f 	and.w	r3, r3, #31
 8003642:	2201      	movs	r2, #1
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6a1a      	ldr	r2, [r3, #32]
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	431a      	orrs	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
}
 800366e:	bf00      	nop
 8003670:	371c      	adds	r7, #28
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
	...

0800367c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800368c:	2b01      	cmp	r3, #1
 800368e:	d101      	bne.n	8003694 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003690:	2302      	movs	r3, #2
 8003692:	e05a      	b.n	800374a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d022      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e0:	d01d      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	@ (800375c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d018      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d013      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00e      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d009      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a17      	ldr	r2, [pc, #92]	@ (800376c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d004      	beq.n	800371e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a15      	ldr	r2, [pc, #84]	@ (8003770 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d10c      	bne.n	8003738 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003724:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	4313      	orrs	r3, r2
 800372e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68ba      	ldr	r2, [r7, #8]
 8003736:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003748:	2300      	movs	r3, #0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3714      	adds	r7, #20
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop
 8003758:	40010000 	.word	0x40010000
 800375c:	40000400 	.word	0x40000400
 8003760:	40000800 	.word	0x40000800
 8003764:	40000c00 	.word	0x40000c00
 8003768:	40010400 	.word	0x40010400
 800376c:	40014000 	.word	0x40014000
 8003770:	40001800 	.word	0x40001800

08003774 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800378c:	2302      	movs	r3, #2
 800378e:	e03d      	b.n	800380c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	4313      	orrs	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	695b      	ldr	r3, [r3, #20]
 80037e8:	4313      	orrs	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e042      	b.n	80038d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd fa0a 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	@ 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 f973 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	@ 0x28
 80038e4:	af02      	add	r7, sp, #8
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	603b      	str	r3, [r7, #0]
 80038ec:	4613      	mov	r3, r2
 80038ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d175      	bne.n	80039ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <HAL_UART_Transmit+0x2c>
 8003906:	88fb      	ldrh	r3, [r7, #6]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e06e      	b.n	80039ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	@ 0x21
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800391e:	f7fd fb09 	bl	8000f34 <HAL_GetTick>
 8003922:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	88fa      	ldrh	r2, [r7, #6]
 8003928:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003938:	d108      	bne.n	800394c <HAL_UART_Transmit+0x6c>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d104      	bne.n	800394c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	61bb      	str	r3, [r7, #24]
 800394a:	e003      	b.n	8003954 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003954:	e02e      	b.n	80039b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2200      	movs	r2, #0
 800395e:	2180      	movs	r1, #128	@ 0x80
 8003960:	68f8      	ldr	r0, [r7, #12]
 8003962:	f000 f848 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d005      	beq.n	8003978 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e03a      	b.n	80039ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	881b      	ldrh	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800398c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	3302      	adds	r3, #2
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	e007      	b.n	80039a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	781a      	ldrb	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	3b01      	subs	r3, #1
 80039ae:	b29a      	uxth	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1cb      	bne.n	8003956 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2140      	movs	r1, #64	@ 0x40
 80039c8:	68f8      	ldr	r0, [r7, #12]
 80039ca:	f000 f814 	bl	80039f6 <UART_WaitOnFlagUntilTimeout>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d005      	beq.n	80039e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e006      	b.n	80039ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	e000      	b.n	80039ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80039ec:	2302      	movs	r3, #2
  }
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b086      	sub	sp, #24
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a06:	e03b      	b.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d037      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a10:	f7fd fa90 	bl	8000f34 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e03a      	b.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d023      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	2b80      	cmp	r3, #128	@ 0x80
 8003a3c:	d020      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	2b40      	cmp	r3, #64	@ 0x40
 8003a42:	d01d      	beq.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b08      	cmp	r3, #8
 8003a50:	d116      	bne.n	8003a80 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 f81d 	bl	8003aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2208      	movs	r2, #8
 8003a72:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e00f      	b.n	8003aa0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	4013      	ands	r3, r2
 8003a8a:	68ba      	ldr	r2, [r7, #8]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	79fb      	ldrb	r3, [r7, #7]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d0b4      	beq.n	8003a08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}

08003aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b095      	sub	sp, #84	@ 0x54
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aba:	e853 3f00 	ldrex	r3, [r3]
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	330c      	adds	r3, #12
 8003ace:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ad0:	643a      	str	r2, [r7, #64]	@ 0x40
 8003ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ad8:	e841 2300 	strex	r3, r2, [r1]
 8003adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e5      	bne.n	8003ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	3314      	adds	r3, #20
 8003aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	e853 3f00 	ldrex	r3, [r3]
 8003af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3314      	adds	r3, #20
 8003b02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b06:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b0c:	e841 2300 	strex	r3, r2, [r1]
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e5      	bne.n	8003ae4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d119      	bne.n	8003b54 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	330c      	adds	r3, #12
 8003b26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
 8003b2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f023 0310 	bic.w	r3, r3, #16
 8003b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b40:	61ba      	str	r2, [r7, #24]
 8003b42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b44:	6979      	ldr	r1, [r7, #20]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	e841 2300 	strex	r3, r2, [r1]
 8003b4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d1e5      	bne.n	8003b20 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003b62:	bf00      	nop
 8003b64:	3754      	adds	r7, #84	@ 0x54
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
	...

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b74:	b0c0      	sub	sp, #256	@ 0x100
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b8c:	68d9      	ldr	r1, [r3, #12]
 8003b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	ea40 0301 	orr.w	r3, r0, r1
 8003b98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	431a      	orrs	r2, r3
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003bc8:	f021 010c 	bic.w	r1, r1, #12
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bea:	6999      	ldr	r1, [r3, #24]
 8003bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	ea40 0301 	orr.w	r3, r0, r1
 8003bf6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	4b8f      	ldr	r3, [pc, #572]	@ (8003e3c <UART_SetConfig+0x2cc>)
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d005      	beq.n	8003c10 <UART_SetConfig+0xa0>
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	4b8d      	ldr	r3, [pc, #564]	@ (8003e40 <UART_SetConfig+0x2d0>)
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d104      	bne.n	8003c1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c10:	f7fd fd98 	bl	8001744 <HAL_RCC_GetPCLK2Freq>
 8003c14:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003c18:	e003      	b.n	8003c22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c1a:	f7fd fd7f 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 8003c1e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c2c:	f040 810c 	bne.w	8003e48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c34:	2200      	movs	r2, #0
 8003c36:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003c3a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003c3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003c42:	4622      	mov	r2, r4
 8003c44:	462b      	mov	r3, r5
 8003c46:	1891      	adds	r1, r2, r2
 8003c48:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003c4a:	415b      	adcs	r3, r3
 8003c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003c52:	4621      	mov	r1, r4
 8003c54:	eb12 0801 	adds.w	r8, r2, r1
 8003c58:	4629      	mov	r1, r5
 8003c5a:	eb43 0901 	adc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c80:	462b      	mov	r3, r5
 8003c82:	eb49 0303 	adc.w	r3, r9, r3
 8003c86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c96:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003c9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	18db      	adds	r3, r3, r3
 8003ca2:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	eb42 0303 	adc.w	r3, r2, r3
 8003caa:	657b      	str	r3, [r7, #84]	@ 0x54
 8003cac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003cb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003cb4:	f7fc fafc 	bl	80002b0 <__aeabi_uldivmod>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4b61      	ldr	r3, [pc, #388]	@ (8003e44 <UART_SetConfig+0x2d4>)
 8003cbe:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	011c      	lsls	r4, r3, #4
 8003cc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cd0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003cd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ce4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ce8:	4641      	mov	r1, r8
 8003cea:	eb12 0a01 	adds.w	sl, r2, r1
 8003cee:	4649      	mov	r1, r9
 8003cf0:	eb43 0b01 	adc.w	fp, r3, r1
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d00:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d04:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d08:	4692      	mov	sl, r2
 8003d0a:	469b      	mov	fp, r3
 8003d0c:	4643      	mov	r3, r8
 8003d0e:	eb1a 0303 	adds.w	r3, sl, r3
 8003d12:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d16:	464b      	mov	r3, r9
 8003d18:	eb4b 0303 	adc.w	r3, fp, r3
 8003d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d2c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003d30:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d34:	460b      	mov	r3, r1
 8003d36:	18db      	adds	r3, r3, r3
 8003d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	eb42 0303 	adc.w	r3, r2, r3
 8003d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003d46:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003d4a:	f7fc fab1 	bl	80002b0 <__aeabi_uldivmod>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	460b      	mov	r3, r1
 8003d52:	4611      	mov	r1, r2
 8003d54:	4b3b      	ldr	r3, [pc, #236]	@ (8003e44 <UART_SetConfig+0x2d4>)
 8003d56:	fba3 2301 	umull	r2, r3, r3, r1
 8003d5a:	095b      	lsrs	r3, r3, #5
 8003d5c:	2264      	movs	r2, #100	@ 0x64
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	1acb      	subs	r3, r1, r3
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003d6a:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <UART_SetConfig+0x2d4>)
 8003d6c:	fba3 2302 	umull	r2, r3, r3, r2
 8003d70:	095b      	lsrs	r3, r3, #5
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003d78:	441c      	add	r4, r3
 8003d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d84:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003d88:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003d8c:	4642      	mov	r2, r8
 8003d8e:	464b      	mov	r3, r9
 8003d90:	1891      	adds	r1, r2, r2
 8003d92:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003d94:	415b      	adcs	r3, r3
 8003d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	1851      	adds	r1, r2, r1
 8003da0:	6339      	str	r1, [r7, #48]	@ 0x30
 8003da2:	4649      	mov	r1, r9
 8003da4:	414b      	adcs	r3, r1
 8003da6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003db4:	4659      	mov	r1, fp
 8003db6:	00cb      	lsls	r3, r1, #3
 8003db8:	4651      	mov	r1, sl
 8003dba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dbe:	4651      	mov	r1, sl
 8003dc0:	00ca      	lsls	r2, r1, #3
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4642      	mov	r2, r8
 8003dca:	189b      	adds	r3, r3, r2
 8003dcc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003de8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003dec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003df0:	460b      	mov	r3, r1
 8003df2:	18db      	adds	r3, r3, r3
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003df6:	4613      	mov	r3, r2
 8003df8:	eb42 0303 	adc.w	r3, r2, r3
 8003dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003e06:	f7fc fa53 	bl	80002b0 <__aeabi_uldivmod>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <UART_SetConfig+0x2d4>)
 8003e10:	fba3 1302 	umull	r1, r3, r3, r2
 8003e14:	095b      	lsrs	r3, r3, #5
 8003e16:	2164      	movs	r1, #100	@ 0x64
 8003e18:	fb01 f303 	mul.w	r3, r1, r3
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	3332      	adds	r3, #50	@ 0x32
 8003e22:	4a08      	ldr	r2, [pc, #32]	@ (8003e44 <UART_SetConfig+0x2d4>)
 8003e24:	fba2 2303 	umull	r2, r3, r2, r3
 8003e28:	095b      	lsrs	r3, r3, #5
 8003e2a:	f003 0207 	and.w	r2, r3, #7
 8003e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4422      	add	r2, r4
 8003e36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e38:	e106      	b.n	8004048 <UART_SetConfig+0x4d8>
 8003e3a:	bf00      	nop
 8003e3c:	40011000 	.word	0x40011000
 8003e40:	40011400 	.word	0x40011400
 8003e44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003e56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003e5a:	4642      	mov	r2, r8
 8003e5c:	464b      	mov	r3, r9
 8003e5e:	1891      	adds	r1, r2, r2
 8003e60:	6239      	str	r1, [r7, #32]
 8003e62:	415b      	adcs	r3, r3
 8003e64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e6a:	4641      	mov	r1, r8
 8003e6c:	1854      	adds	r4, r2, r1
 8003e6e:	4649      	mov	r1, r9
 8003e70:	eb43 0501 	adc.w	r5, r3, r1
 8003e74:	f04f 0200 	mov.w	r2, #0
 8003e78:	f04f 0300 	mov.w	r3, #0
 8003e7c:	00eb      	lsls	r3, r5, #3
 8003e7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e82:	00e2      	lsls	r2, r4, #3
 8003e84:	4614      	mov	r4, r2
 8003e86:	461d      	mov	r5, r3
 8003e88:	4643      	mov	r3, r8
 8003e8a:	18e3      	adds	r3, r4, r3
 8003e8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e90:	464b      	mov	r3, r9
 8003e92:	eb45 0303 	adc.w	r3, r5, r3
 8003e96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ea6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003eaa:	f04f 0200 	mov.w	r2, #0
 8003eae:	f04f 0300 	mov.w	r3, #0
 8003eb2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003eb6:	4629      	mov	r1, r5
 8003eb8:	008b      	lsls	r3, r1, #2
 8003eba:	4621      	mov	r1, r4
 8003ebc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	008a      	lsls	r2, r1, #2
 8003ec4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ec8:	f7fc f9f2 	bl	80002b0 <__aeabi_uldivmod>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4b60      	ldr	r3, [pc, #384]	@ (8004054 <UART_SetConfig+0x4e4>)
 8003ed2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ed6:	095b      	lsrs	r3, r3, #5
 8003ed8:	011c      	lsls	r4, r3, #4
 8003eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ee4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ee8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003eec:	4642      	mov	r2, r8
 8003eee:	464b      	mov	r3, r9
 8003ef0:	1891      	adds	r1, r2, r2
 8003ef2:	61b9      	str	r1, [r7, #24]
 8003ef4:	415b      	adcs	r3, r3
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	4641      	mov	r1, r8
 8003efe:	1851      	adds	r1, r2, r1
 8003f00:	6139      	str	r1, [r7, #16]
 8003f02:	4649      	mov	r1, r9
 8003f04:	414b      	adcs	r3, r1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f14:	4659      	mov	r1, fp
 8003f16:	00cb      	lsls	r3, r1, #3
 8003f18:	4651      	mov	r1, sl
 8003f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f1e:	4651      	mov	r1, sl
 8003f20:	00ca      	lsls	r2, r1, #3
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	4642      	mov	r2, r8
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f30:	464b      	mov	r3, r9
 8003f32:	460a      	mov	r2, r1
 8003f34:	eb42 0303 	adc.w	r3, r2, r3
 8003f38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003f46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003f48:	f04f 0200 	mov.w	r2, #0
 8003f4c:	f04f 0300 	mov.w	r3, #0
 8003f50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003f54:	4649      	mov	r1, r9
 8003f56:	008b      	lsls	r3, r1, #2
 8003f58:	4641      	mov	r1, r8
 8003f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f5e:	4641      	mov	r1, r8
 8003f60:	008a      	lsls	r2, r1, #2
 8003f62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003f66:	f7fc f9a3 	bl	80002b0 <__aeabi_uldivmod>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	4611      	mov	r1, r2
 8003f70:	4b38      	ldr	r3, [pc, #224]	@ (8004054 <UART_SetConfig+0x4e4>)
 8003f72:	fba3 2301 	umull	r2, r3, r3, r1
 8003f76:	095b      	lsrs	r3, r3, #5
 8003f78:	2264      	movs	r2, #100	@ 0x64
 8003f7a:	fb02 f303 	mul.w	r3, r2, r3
 8003f7e:	1acb      	subs	r3, r1, r3
 8003f80:	011b      	lsls	r3, r3, #4
 8003f82:	3332      	adds	r3, #50	@ 0x32
 8003f84:	4a33      	ldr	r2, [pc, #204]	@ (8004054 <UART_SetConfig+0x4e4>)
 8003f86:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f90:	441c      	add	r4, r3
 8003f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f96:	2200      	movs	r2, #0
 8003f98:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003fa0:	4642      	mov	r2, r8
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	1891      	adds	r1, r2, r2
 8003fa6:	60b9      	str	r1, [r7, #8]
 8003fa8:	415b      	adcs	r3, r3
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003fb0:	4641      	mov	r1, r8
 8003fb2:	1851      	adds	r1, r2, r1
 8003fb4:	6039      	str	r1, [r7, #0]
 8003fb6:	4649      	mov	r1, r9
 8003fb8:	414b      	adcs	r3, r1
 8003fba:	607b      	str	r3, [r7, #4]
 8003fbc:	f04f 0200 	mov.w	r2, #0
 8003fc0:	f04f 0300 	mov.w	r3, #0
 8003fc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003fc8:	4659      	mov	r1, fp
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	4651      	mov	r1, sl
 8003fce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fd2:	4651      	mov	r1, sl
 8003fd4:	00ca      	lsls	r2, r1, #3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4642      	mov	r2, r8
 8003fde:	189b      	adds	r3, r3, r2
 8003fe0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003fe2:	464b      	mov	r3, r9
 8003fe4:	460a      	mov	r2, r1
 8003fe6:	eb42 0303 	adc.w	r3, r2, r3
 8003fea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ff6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004004:	4649      	mov	r1, r9
 8004006:	008b      	lsls	r3, r1, #2
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800400e:	4641      	mov	r1, r8
 8004010:	008a      	lsls	r2, r1, #2
 8004012:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004016:	f7fc f94b 	bl	80002b0 <__aeabi_uldivmod>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4b0d      	ldr	r3, [pc, #52]	@ (8004054 <UART_SetConfig+0x4e4>)
 8004020:	fba3 1302 	umull	r1, r3, r3, r2
 8004024:	095b      	lsrs	r3, r3, #5
 8004026:	2164      	movs	r1, #100	@ 0x64
 8004028:	fb01 f303 	mul.w	r3, r1, r3
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	3332      	adds	r3, #50	@ 0x32
 8004032:	4a08      	ldr	r2, [pc, #32]	@ (8004054 <UART_SetConfig+0x4e4>)
 8004034:	fba2 2303 	umull	r2, r3, r2, r3
 8004038:	095b      	lsrs	r3, r3, #5
 800403a:	f003 020f 	and.w	r2, r3, #15
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4422      	add	r2, r4
 8004046:	609a      	str	r2, [r3, #8]
}
 8004048:	bf00      	nop
 800404a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800404e:	46bd      	mov	sp, r7
 8004050:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004054:	51eb851f 	.word	0x51eb851f

08004058 <siprintf>:
 8004058:	b40e      	push	{r1, r2, r3}
 800405a:	b500      	push	{lr}
 800405c:	b09c      	sub	sp, #112	@ 0x70
 800405e:	ab1d      	add	r3, sp, #116	@ 0x74
 8004060:	9002      	str	r0, [sp, #8]
 8004062:	9006      	str	r0, [sp, #24]
 8004064:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004068:	4809      	ldr	r0, [pc, #36]	@ (8004090 <siprintf+0x38>)
 800406a:	9107      	str	r1, [sp, #28]
 800406c:	9104      	str	r1, [sp, #16]
 800406e:	4909      	ldr	r1, [pc, #36]	@ (8004094 <siprintf+0x3c>)
 8004070:	f853 2b04 	ldr.w	r2, [r3], #4
 8004074:	9105      	str	r1, [sp, #20]
 8004076:	6800      	ldr	r0, [r0, #0]
 8004078:	9301      	str	r3, [sp, #4]
 800407a:	a902      	add	r1, sp, #8
 800407c:	f000 f994 	bl	80043a8 <_svfiprintf_r>
 8004080:	9b02      	ldr	r3, [sp, #8]
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
 8004086:	b01c      	add	sp, #112	@ 0x70
 8004088:	f85d eb04 	ldr.w	lr, [sp], #4
 800408c:	b003      	add	sp, #12
 800408e:	4770      	bx	lr
 8004090:	2000000c 	.word	0x2000000c
 8004094:	ffff0208 	.word	0xffff0208

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <__errno>:
 80040a8:	4b01      	ldr	r3, [pc, #4]	@ (80040b0 <__errno+0x8>)
 80040aa:	6818      	ldr	r0, [r3, #0]
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	2000000c 	.word	0x2000000c

080040b4 <__libc_init_array>:
 80040b4:	b570      	push	{r4, r5, r6, lr}
 80040b6:	4d0d      	ldr	r5, [pc, #52]	@ (80040ec <__libc_init_array+0x38>)
 80040b8:	4c0d      	ldr	r4, [pc, #52]	@ (80040f0 <__libc_init_array+0x3c>)
 80040ba:	1b64      	subs	r4, r4, r5
 80040bc:	10a4      	asrs	r4, r4, #2
 80040be:	2600      	movs	r6, #0
 80040c0:	42a6      	cmp	r6, r4
 80040c2:	d109      	bne.n	80040d8 <__libc_init_array+0x24>
 80040c4:	4d0b      	ldr	r5, [pc, #44]	@ (80040f4 <__libc_init_array+0x40>)
 80040c6:	4c0c      	ldr	r4, [pc, #48]	@ (80040f8 <__libc_init_array+0x44>)
 80040c8:	f000 fc66 	bl	8004998 <_init>
 80040cc:	1b64      	subs	r4, r4, r5
 80040ce:	10a4      	asrs	r4, r4, #2
 80040d0:	2600      	movs	r6, #0
 80040d2:	42a6      	cmp	r6, r4
 80040d4:	d105      	bne.n	80040e2 <__libc_init_array+0x2e>
 80040d6:	bd70      	pop	{r4, r5, r6, pc}
 80040d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80040dc:	4798      	blx	r3
 80040de:	3601      	adds	r6, #1
 80040e0:	e7ee      	b.n	80040c0 <__libc_init_array+0xc>
 80040e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80040e6:	4798      	blx	r3
 80040e8:	3601      	adds	r6, #1
 80040ea:	e7f2      	b.n	80040d2 <__libc_init_array+0x1e>
 80040ec:	08004a08 	.word	0x08004a08
 80040f0:	08004a08 	.word	0x08004a08
 80040f4:	08004a08 	.word	0x08004a08
 80040f8:	08004a0c 	.word	0x08004a0c

080040fc <__retarget_lock_acquire_recursive>:
 80040fc:	4770      	bx	lr

080040fe <__retarget_lock_release_recursive>:
 80040fe:	4770      	bx	lr

08004100 <_free_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	4605      	mov	r5, r0
 8004104:	2900      	cmp	r1, #0
 8004106:	d041      	beq.n	800418c <_free_r+0x8c>
 8004108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800410c:	1f0c      	subs	r4, r1, #4
 800410e:	2b00      	cmp	r3, #0
 8004110:	bfb8      	it	lt
 8004112:	18e4      	addlt	r4, r4, r3
 8004114:	f000 f8e0 	bl	80042d8 <__malloc_lock>
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <_free_r+0x90>)
 800411a:	6813      	ldr	r3, [r2, #0]
 800411c:	b933      	cbnz	r3, 800412c <_free_r+0x2c>
 800411e:	6063      	str	r3, [r4, #4]
 8004120:	6014      	str	r4, [r2, #0]
 8004122:	4628      	mov	r0, r5
 8004124:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004128:	f000 b8dc 	b.w	80042e4 <__malloc_unlock>
 800412c:	42a3      	cmp	r3, r4
 800412e:	d908      	bls.n	8004142 <_free_r+0x42>
 8004130:	6820      	ldr	r0, [r4, #0]
 8004132:	1821      	adds	r1, r4, r0
 8004134:	428b      	cmp	r3, r1
 8004136:	bf01      	itttt	eq
 8004138:	6819      	ldreq	r1, [r3, #0]
 800413a:	685b      	ldreq	r3, [r3, #4]
 800413c:	1809      	addeq	r1, r1, r0
 800413e:	6021      	streq	r1, [r4, #0]
 8004140:	e7ed      	b.n	800411e <_free_r+0x1e>
 8004142:	461a      	mov	r2, r3
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	b10b      	cbz	r3, 800414c <_free_r+0x4c>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d9fa      	bls.n	8004142 <_free_r+0x42>
 800414c:	6811      	ldr	r1, [r2, #0]
 800414e:	1850      	adds	r0, r2, r1
 8004150:	42a0      	cmp	r0, r4
 8004152:	d10b      	bne.n	800416c <_free_r+0x6c>
 8004154:	6820      	ldr	r0, [r4, #0]
 8004156:	4401      	add	r1, r0
 8004158:	1850      	adds	r0, r2, r1
 800415a:	4283      	cmp	r3, r0
 800415c:	6011      	str	r1, [r2, #0]
 800415e:	d1e0      	bne.n	8004122 <_free_r+0x22>
 8004160:	6818      	ldr	r0, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	6053      	str	r3, [r2, #4]
 8004166:	4408      	add	r0, r1
 8004168:	6010      	str	r0, [r2, #0]
 800416a:	e7da      	b.n	8004122 <_free_r+0x22>
 800416c:	d902      	bls.n	8004174 <_free_r+0x74>
 800416e:	230c      	movs	r3, #12
 8004170:	602b      	str	r3, [r5, #0]
 8004172:	e7d6      	b.n	8004122 <_free_r+0x22>
 8004174:	6820      	ldr	r0, [r4, #0]
 8004176:	1821      	adds	r1, r4, r0
 8004178:	428b      	cmp	r3, r1
 800417a:	bf04      	itt	eq
 800417c:	6819      	ldreq	r1, [r3, #0]
 800417e:	685b      	ldreq	r3, [r3, #4]
 8004180:	6063      	str	r3, [r4, #4]
 8004182:	bf04      	itt	eq
 8004184:	1809      	addeq	r1, r1, r0
 8004186:	6021      	streq	r1, [r4, #0]
 8004188:	6054      	str	r4, [r2, #4]
 800418a:	e7ca      	b.n	8004122 <_free_r+0x22>
 800418c:	bd38      	pop	{r3, r4, r5, pc}
 800418e:	bf00      	nop
 8004190:	200002bc 	.word	0x200002bc

08004194 <sbrk_aligned>:
 8004194:	b570      	push	{r4, r5, r6, lr}
 8004196:	4e0f      	ldr	r6, [pc, #60]	@ (80041d4 <sbrk_aligned+0x40>)
 8004198:	460c      	mov	r4, r1
 800419a:	6831      	ldr	r1, [r6, #0]
 800419c:	4605      	mov	r5, r0
 800419e:	b911      	cbnz	r1, 80041a6 <sbrk_aligned+0x12>
 80041a0:	f000 fba6 	bl	80048f0 <_sbrk_r>
 80041a4:	6030      	str	r0, [r6, #0]
 80041a6:	4621      	mov	r1, r4
 80041a8:	4628      	mov	r0, r5
 80041aa:	f000 fba1 	bl	80048f0 <_sbrk_r>
 80041ae:	1c43      	adds	r3, r0, #1
 80041b0:	d103      	bne.n	80041ba <sbrk_aligned+0x26>
 80041b2:	f04f 34ff 	mov.w	r4, #4294967295
 80041b6:	4620      	mov	r0, r4
 80041b8:	bd70      	pop	{r4, r5, r6, pc}
 80041ba:	1cc4      	adds	r4, r0, #3
 80041bc:	f024 0403 	bic.w	r4, r4, #3
 80041c0:	42a0      	cmp	r0, r4
 80041c2:	d0f8      	beq.n	80041b6 <sbrk_aligned+0x22>
 80041c4:	1a21      	subs	r1, r4, r0
 80041c6:	4628      	mov	r0, r5
 80041c8:	f000 fb92 	bl	80048f0 <_sbrk_r>
 80041cc:	3001      	adds	r0, #1
 80041ce:	d1f2      	bne.n	80041b6 <sbrk_aligned+0x22>
 80041d0:	e7ef      	b.n	80041b2 <sbrk_aligned+0x1e>
 80041d2:	bf00      	nop
 80041d4:	200002b8 	.word	0x200002b8

080041d8 <_malloc_r>:
 80041d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041dc:	1ccd      	adds	r5, r1, #3
 80041de:	f025 0503 	bic.w	r5, r5, #3
 80041e2:	3508      	adds	r5, #8
 80041e4:	2d0c      	cmp	r5, #12
 80041e6:	bf38      	it	cc
 80041e8:	250c      	movcc	r5, #12
 80041ea:	2d00      	cmp	r5, #0
 80041ec:	4606      	mov	r6, r0
 80041ee:	db01      	blt.n	80041f4 <_malloc_r+0x1c>
 80041f0:	42a9      	cmp	r1, r5
 80041f2:	d904      	bls.n	80041fe <_malloc_r+0x26>
 80041f4:	230c      	movs	r3, #12
 80041f6:	6033      	str	r3, [r6, #0]
 80041f8:	2000      	movs	r0, #0
 80041fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80042d4 <_malloc_r+0xfc>
 8004202:	f000 f869 	bl	80042d8 <__malloc_lock>
 8004206:	f8d8 3000 	ldr.w	r3, [r8]
 800420a:	461c      	mov	r4, r3
 800420c:	bb44      	cbnz	r4, 8004260 <_malloc_r+0x88>
 800420e:	4629      	mov	r1, r5
 8004210:	4630      	mov	r0, r6
 8004212:	f7ff ffbf 	bl	8004194 <sbrk_aligned>
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	4604      	mov	r4, r0
 800421a:	d158      	bne.n	80042ce <_malloc_r+0xf6>
 800421c:	f8d8 4000 	ldr.w	r4, [r8]
 8004220:	4627      	mov	r7, r4
 8004222:	2f00      	cmp	r7, #0
 8004224:	d143      	bne.n	80042ae <_malloc_r+0xd6>
 8004226:	2c00      	cmp	r4, #0
 8004228:	d04b      	beq.n	80042c2 <_malloc_r+0xea>
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	4639      	mov	r1, r7
 800422e:	4630      	mov	r0, r6
 8004230:	eb04 0903 	add.w	r9, r4, r3
 8004234:	f000 fb5c 	bl	80048f0 <_sbrk_r>
 8004238:	4581      	cmp	r9, r0
 800423a:	d142      	bne.n	80042c2 <_malloc_r+0xea>
 800423c:	6821      	ldr	r1, [r4, #0]
 800423e:	1a6d      	subs	r5, r5, r1
 8004240:	4629      	mov	r1, r5
 8004242:	4630      	mov	r0, r6
 8004244:	f7ff ffa6 	bl	8004194 <sbrk_aligned>
 8004248:	3001      	adds	r0, #1
 800424a:	d03a      	beq.n	80042c2 <_malloc_r+0xea>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	442b      	add	r3, r5
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	f8d8 3000 	ldr.w	r3, [r8]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	bb62      	cbnz	r2, 80042b4 <_malloc_r+0xdc>
 800425a:	f8c8 7000 	str.w	r7, [r8]
 800425e:	e00f      	b.n	8004280 <_malloc_r+0xa8>
 8004260:	6822      	ldr	r2, [r4, #0]
 8004262:	1b52      	subs	r2, r2, r5
 8004264:	d420      	bmi.n	80042a8 <_malloc_r+0xd0>
 8004266:	2a0b      	cmp	r2, #11
 8004268:	d917      	bls.n	800429a <_malloc_r+0xc2>
 800426a:	1961      	adds	r1, r4, r5
 800426c:	42a3      	cmp	r3, r4
 800426e:	6025      	str	r5, [r4, #0]
 8004270:	bf18      	it	ne
 8004272:	6059      	strne	r1, [r3, #4]
 8004274:	6863      	ldr	r3, [r4, #4]
 8004276:	bf08      	it	eq
 8004278:	f8c8 1000 	streq.w	r1, [r8]
 800427c:	5162      	str	r2, [r4, r5]
 800427e:	604b      	str	r3, [r1, #4]
 8004280:	4630      	mov	r0, r6
 8004282:	f000 f82f 	bl	80042e4 <__malloc_unlock>
 8004286:	f104 000b 	add.w	r0, r4, #11
 800428a:	1d23      	adds	r3, r4, #4
 800428c:	f020 0007 	bic.w	r0, r0, #7
 8004290:	1ac2      	subs	r2, r0, r3
 8004292:	bf1c      	itt	ne
 8004294:	1a1b      	subne	r3, r3, r0
 8004296:	50a3      	strne	r3, [r4, r2]
 8004298:	e7af      	b.n	80041fa <_malloc_r+0x22>
 800429a:	6862      	ldr	r2, [r4, #4]
 800429c:	42a3      	cmp	r3, r4
 800429e:	bf0c      	ite	eq
 80042a0:	f8c8 2000 	streq.w	r2, [r8]
 80042a4:	605a      	strne	r2, [r3, #4]
 80042a6:	e7eb      	b.n	8004280 <_malloc_r+0xa8>
 80042a8:	4623      	mov	r3, r4
 80042aa:	6864      	ldr	r4, [r4, #4]
 80042ac:	e7ae      	b.n	800420c <_malloc_r+0x34>
 80042ae:	463c      	mov	r4, r7
 80042b0:	687f      	ldr	r7, [r7, #4]
 80042b2:	e7b6      	b.n	8004222 <_malloc_r+0x4a>
 80042b4:	461a      	mov	r2, r3
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d1fb      	bne.n	80042b4 <_malloc_r+0xdc>
 80042bc:	2300      	movs	r3, #0
 80042be:	6053      	str	r3, [r2, #4]
 80042c0:	e7de      	b.n	8004280 <_malloc_r+0xa8>
 80042c2:	230c      	movs	r3, #12
 80042c4:	6033      	str	r3, [r6, #0]
 80042c6:	4630      	mov	r0, r6
 80042c8:	f000 f80c 	bl	80042e4 <__malloc_unlock>
 80042cc:	e794      	b.n	80041f8 <_malloc_r+0x20>
 80042ce:	6005      	str	r5, [r0, #0]
 80042d0:	e7d6      	b.n	8004280 <_malloc_r+0xa8>
 80042d2:	bf00      	nop
 80042d4:	200002bc 	.word	0x200002bc

080042d8 <__malloc_lock>:
 80042d8:	4801      	ldr	r0, [pc, #4]	@ (80042e0 <__malloc_lock+0x8>)
 80042da:	f7ff bf0f 	b.w	80040fc <__retarget_lock_acquire_recursive>
 80042de:	bf00      	nop
 80042e0:	200002b4 	.word	0x200002b4

080042e4 <__malloc_unlock>:
 80042e4:	4801      	ldr	r0, [pc, #4]	@ (80042ec <__malloc_unlock+0x8>)
 80042e6:	f7ff bf0a 	b.w	80040fe <__retarget_lock_release_recursive>
 80042ea:	bf00      	nop
 80042ec:	200002b4 	.word	0x200002b4

080042f0 <__ssputs_r>:
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	688e      	ldr	r6, [r1, #8]
 80042f6:	461f      	mov	r7, r3
 80042f8:	42be      	cmp	r6, r7
 80042fa:	680b      	ldr	r3, [r1, #0]
 80042fc:	4682      	mov	sl, r0
 80042fe:	460c      	mov	r4, r1
 8004300:	4690      	mov	r8, r2
 8004302:	d82d      	bhi.n	8004360 <__ssputs_r+0x70>
 8004304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004308:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800430c:	d026      	beq.n	800435c <__ssputs_r+0x6c>
 800430e:	6965      	ldr	r5, [r4, #20]
 8004310:	6909      	ldr	r1, [r1, #16]
 8004312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004316:	eba3 0901 	sub.w	r9, r3, r1
 800431a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800431e:	1c7b      	adds	r3, r7, #1
 8004320:	444b      	add	r3, r9
 8004322:	106d      	asrs	r5, r5, #1
 8004324:	429d      	cmp	r5, r3
 8004326:	bf38      	it	cc
 8004328:	461d      	movcc	r5, r3
 800432a:	0553      	lsls	r3, r2, #21
 800432c:	d527      	bpl.n	800437e <__ssputs_r+0x8e>
 800432e:	4629      	mov	r1, r5
 8004330:	f7ff ff52 	bl	80041d8 <_malloc_r>
 8004334:	4606      	mov	r6, r0
 8004336:	b360      	cbz	r0, 8004392 <__ssputs_r+0xa2>
 8004338:	6921      	ldr	r1, [r4, #16]
 800433a:	464a      	mov	r2, r9
 800433c:	f000 fae8 	bl	8004910 <memcpy>
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800434a:	81a3      	strh	r3, [r4, #12]
 800434c:	6126      	str	r6, [r4, #16]
 800434e:	6165      	str	r5, [r4, #20]
 8004350:	444e      	add	r6, r9
 8004352:	eba5 0509 	sub.w	r5, r5, r9
 8004356:	6026      	str	r6, [r4, #0]
 8004358:	60a5      	str	r5, [r4, #8]
 800435a:	463e      	mov	r6, r7
 800435c:	42be      	cmp	r6, r7
 800435e:	d900      	bls.n	8004362 <__ssputs_r+0x72>
 8004360:	463e      	mov	r6, r7
 8004362:	6820      	ldr	r0, [r4, #0]
 8004364:	4632      	mov	r2, r6
 8004366:	4641      	mov	r1, r8
 8004368:	f000 faa8 	bl	80048bc <memmove>
 800436c:	68a3      	ldr	r3, [r4, #8]
 800436e:	1b9b      	subs	r3, r3, r6
 8004370:	60a3      	str	r3, [r4, #8]
 8004372:	6823      	ldr	r3, [r4, #0]
 8004374:	4433      	add	r3, r6
 8004376:	6023      	str	r3, [r4, #0]
 8004378:	2000      	movs	r0, #0
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	462a      	mov	r2, r5
 8004380:	f000 fad4 	bl	800492c <_realloc_r>
 8004384:	4606      	mov	r6, r0
 8004386:	2800      	cmp	r0, #0
 8004388:	d1e0      	bne.n	800434c <__ssputs_r+0x5c>
 800438a:	6921      	ldr	r1, [r4, #16]
 800438c:	4650      	mov	r0, sl
 800438e:	f7ff feb7 	bl	8004100 <_free_r>
 8004392:	230c      	movs	r3, #12
 8004394:	f8ca 3000 	str.w	r3, [sl]
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800439e:	81a3      	strh	r3, [r4, #12]
 80043a0:	f04f 30ff 	mov.w	r0, #4294967295
 80043a4:	e7e9      	b.n	800437a <__ssputs_r+0x8a>
	...

080043a8 <_svfiprintf_r>:
 80043a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ac:	4698      	mov	r8, r3
 80043ae:	898b      	ldrh	r3, [r1, #12]
 80043b0:	061b      	lsls	r3, r3, #24
 80043b2:	b09d      	sub	sp, #116	@ 0x74
 80043b4:	4607      	mov	r7, r0
 80043b6:	460d      	mov	r5, r1
 80043b8:	4614      	mov	r4, r2
 80043ba:	d510      	bpl.n	80043de <_svfiprintf_r+0x36>
 80043bc:	690b      	ldr	r3, [r1, #16]
 80043be:	b973      	cbnz	r3, 80043de <_svfiprintf_r+0x36>
 80043c0:	2140      	movs	r1, #64	@ 0x40
 80043c2:	f7ff ff09 	bl	80041d8 <_malloc_r>
 80043c6:	6028      	str	r0, [r5, #0]
 80043c8:	6128      	str	r0, [r5, #16]
 80043ca:	b930      	cbnz	r0, 80043da <_svfiprintf_r+0x32>
 80043cc:	230c      	movs	r3, #12
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	f04f 30ff 	mov.w	r0, #4294967295
 80043d4:	b01d      	add	sp, #116	@ 0x74
 80043d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043da:	2340      	movs	r3, #64	@ 0x40
 80043dc:	616b      	str	r3, [r5, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e2:	2320      	movs	r3, #32
 80043e4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80043ec:	2330      	movs	r3, #48	@ 0x30
 80043ee:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800458c <_svfiprintf_r+0x1e4>
 80043f2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043f6:	f04f 0901 	mov.w	r9, #1
 80043fa:	4623      	mov	r3, r4
 80043fc:	469a      	mov	sl, r3
 80043fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004402:	b10a      	cbz	r2, 8004408 <_svfiprintf_r+0x60>
 8004404:	2a25      	cmp	r2, #37	@ 0x25
 8004406:	d1f9      	bne.n	80043fc <_svfiprintf_r+0x54>
 8004408:	ebba 0b04 	subs.w	fp, sl, r4
 800440c:	d00b      	beq.n	8004426 <_svfiprintf_r+0x7e>
 800440e:	465b      	mov	r3, fp
 8004410:	4622      	mov	r2, r4
 8004412:	4629      	mov	r1, r5
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff ff6b 	bl	80042f0 <__ssputs_r>
 800441a:	3001      	adds	r0, #1
 800441c:	f000 80a7 	beq.w	800456e <_svfiprintf_r+0x1c6>
 8004420:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004422:	445a      	add	r2, fp
 8004424:	9209      	str	r2, [sp, #36]	@ 0x24
 8004426:	f89a 3000 	ldrb.w	r3, [sl]
 800442a:	2b00      	cmp	r3, #0
 800442c:	f000 809f 	beq.w	800456e <_svfiprintf_r+0x1c6>
 8004430:	2300      	movs	r3, #0
 8004432:	f04f 32ff 	mov.w	r2, #4294967295
 8004436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800443a:	f10a 0a01 	add.w	sl, sl, #1
 800443e:	9304      	str	r3, [sp, #16]
 8004440:	9307      	str	r3, [sp, #28]
 8004442:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004446:	931a      	str	r3, [sp, #104]	@ 0x68
 8004448:	4654      	mov	r4, sl
 800444a:	2205      	movs	r2, #5
 800444c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004450:	484e      	ldr	r0, [pc, #312]	@ (800458c <_svfiprintf_r+0x1e4>)
 8004452:	f7fb fedd 	bl	8000210 <memchr>
 8004456:	9a04      	ldr	r2, [sp, #16]
 8004458:	b9d8      	cbnz	r0, 8004492 <_svfiprintf_r+0xea>
 800445a:	06d0      	lsls	r0, r2, #27
 800445c:	bf44      	itt	mi
 800445e:	2320      	movmi	r3, #32
 8004460:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004464:	0711      	lsls	r1, r2, #28
 8004466:	bf44      	itt	mi
 8004468:	232b      	movmi	r3, #43	@ 0x2b
 800446a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800446e:	f89a 3000 	ldrb.w	r3, [sl]
 8004472:	2b2a      	cmp	r3, #42	@ 0x2a
 8004474:	d015      	beq.n	80044a2 <_svfiprintf_r+0xfa>
 8004476:	9a07      	ldr	r2, [sp, #28]
 8004478:	4654      	mov	r4, sl
 800447a:	2000      	movs	r0, #0
 800447c:	f04f 0c0a 	mov.w	ip, #10
 8004480:	4621      	mov	r1, r4
 8004482:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004486:	3b30      	subs	r3, #48	@ 0x30
 8004488:	2b09      	cmp	r3, #9
 800448a:	d94b      	bls.n	8004524 <_svfiprintf_r+0x17c>
 800448c:	b1b0      	cbz	r0, 80044bc <_svfiprintf_r+0x114>
 800448e:	9207      	str	r2, [sp, #28]
 8004490:	e014      	b.n	80044bc <_svfiprintf_r+0x114>
 8004492:	eba0 0308 	sub.w	r3, r0, r8
 8004496:	fa09 f303 	lsl.w	r3, r9, r3
 800449a:	4313      	orrs	r3, r2
 800449c:	9304      	str	r3, [sp, #16]
 800449e:	46a2      	mov	sl, r4
 80044a0:	e7d2      	b.n	8004448 <_svfiprintf_r+0xa0>
 80044a2:	9b03      	ldr	r3, [sp, #12]
 80044a4:	1d19      	adds	r1, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	9103      	str	r1, [sp, #12]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	bfbb      	ittet	lt
 80044ae:	425b      	neglt	r3, r3
 80044b0:	f042 0202 	orrlt.w	r2, r2, #2
 80044b4:	9307      	strge	r3, [sp, #28]
 80044b6:	9307      	strlt	r3, [sp, #28]
 80044b8:	bfb8      	it	lt
 80044ba:	9204      	strlt	r2, [sp, #16]
 80044bc:	7823      	ldrb	r3, [r4, #0]
 80044be:	2b2e      	cmp	r3, #46	@ 0x2e
 80044c0:	d10a      	bne.n	80044d8 <_svfiprintf_r+0x130>
 80044c2:	7863      	ldrb	r3, [r4, #1]
 80044c4:	2b2a      	cmp	r3, #42	@ 0x2a
 80044c6:	d132      	bne.n	800452e <_svfiprintf_r+0x186>
 80044c8:	9b03      	ldr	r3, [sp, #12]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	9203      	str	r2, [sp, #12]
 80044d0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044d4:	3402      	adds	r4, #2
 80044d6:	9305      	str	r3, [sp, #20]
 80044d8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800459c <_svfiprintf_r+0x1f4>
 80044dc:	7821      	ldrb	r1, [r4, #0]
 80044de:	2203      	movs	r2, #3
 80044e0:	4650      	mov	r0, sl
 80044e2:	f7fb fe95 	bl	8000210 <memchr>
 80044e6:	b138      	cbz	r0, 80044f8 <_svfiprintf_r+0x150>
 80044e8:	9b04      	ldr	r3, [sp, #16]
 80044ea:	eba0 000a 	sub.w	r0, r0, sl
 80044ee:	2240      	movs	r2, #64	@ 0x40
 80044f0:	4082      	lsls	r2, r0
 80044f2:	4313      	orrs	r3, r2
 80044f4:	3401      	adds	r4, #1
 80044f6:	9304      	str	r3, [sp, #16]
 80044f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044fc:	4824      	ldr	r0, [pc, #144]	@ (8004590 <_svfiprintf_r+0x1e8>)
 80044fe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004502:	2206      	movs	r2, #6
 8004504:	f7fb fe84 	bl	8000210 <memchr>
 8004508:	2800      	cmp	r0, #0
 800450a:	d036      	beq.n	800457a <_svfiprintf_r+0x1d2>
 800450c:	4b21      	ldr	r3, [pc, #132]	@ (8004594 <_svfiprintf_r+0x1ec>)
 800450e:	bb1b      	cbnz	r3, 8004558 <_svfiprintf_r+0x1b0>
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	3307      	adds	r3, #7
 8004514:	f023 0307 	bic.w	r3, r3, #7
 8004518:	3308      	adds	r3, #8
 800451a:	9303      	str	r3, [sp, #12]
 800451c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800451e:	4433      	add	r3, r6
 8004520:	9309      	str	r3, [sp, #36]	@ 0x24
 8004522:	e76a      	b.n	80043fa <_svfiprintf_r+0x52>
 8004524:	fb0c 3202 	mla	r2, ip, r2, r3
 8004528:	460c      	mov	r4, r1
 800452a:	2001      	movs	r0, #1
 800452c:	e7a8      	b.n	8004480 <_svfiprintf_r+0xd8>
 800452e:	2300      	movs	r3, #0
 8004530:	3401      	adds	r4, #1
 8004532:	9305      	str	r3, [sp, #20]
 8004534:	4619      	mov	r1, r3
 8004536:	f04f 0c0a 	mov.w	ip, #10
 800453a:	4620      	mov	r0, r4
 800453c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004540:	3a30      	subs	r2, #48	@ 0x30
 8004542:	2a09      	cmp	r2, #9
 8004544:	d903      	bls.n	800454e <_svfiprintf_r+0x1a6>
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0c6      	beq.n	80044d8 <_svfiprintf_r+0x130>
 800454a:	9105      	str	r1, [sp, #20]
 800454c:	e7c4      	b.n	80044d8 <_svfiprintf_r+0x130>
 800454e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004552:	4604      	mov	r4, r0
 8004554:	2301      	movs	r3, #1
 8004556:	e7f0      	b.n	800453a <_svfiprintf_r+0x192>
 8004558:	ab03      	add	r3, sp, #12
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	462a      	mov	r2, r5
 800455e:	4b0e      	ldr	r3, [pc, #56]	@ (8004598 <_svfiprintf_r+0x1f0>)
 8004560:	a904      	add	r1, sp, #16
 8004562:	4638      	mov	r0, r7
 8004564:	f3af 8000 	nop.w
 8004568:	1c42      	adds	r2, r0, #1
 800456a:	4606      	mov	r6, r0
 800456c:	d1d6      	bne.n	800451c <_svfiprintf_r+0x174>
 800456e:	89ab      	ldrh	r3, [r5, #12]
 8004570:	065b      	lsls	r3, r3, #25
 8004572:	f53f af2d 	bmi.w	80043d0 <_svfiprintf_r+0x28>
 8004576:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004578:	e72c      	b.n	80043d4 <_svfiprintf_r+0x2c>
 800457a:	ab03      	add	r3, sp, #12
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	462a      	mov	r2, r5
 8004580:	4b05      	ldr	r3, [pc, #20]	@ (8004598 <_svfiprintf_r+0x1f0>)
 8004582:	a904      	add	r1, sp, #16
 8004584:	4638      	mov	r0, r7
 8004586:	f000 f879 	bl	800467c <_printf_i>
 800458a:	e7ed      	b.n	8004568 <_svfiprintf_r+0x1c0>
 800458c:	080049cc 	.word	0x080049cc
 8004590:	080049d6 	.word	0x080049d6
 8004594:	00000000 	.word	0x00000000
 8004598:	080042f1 	.word	0x080042f1
 800459c:	080049d2 	.word	0x080049d2

080045a0 <_printf_common>:
 80045a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045a4:	4616      	mov	r6, r2
 80045a6:	4698      	mov	r8, r3
 80045a8:	688a      	ldr	r2, [r1, #8]
 80045aa:	690b      	ldr	r3, [r1, #16]
 80045ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bfb8      	it	lt
 80045b4:	4613      	movlt	r3, r2
 80045b6:	6033      	str	r3, [r6, #0]
 80045b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045bc:	4607      	mov	r7, r0
 80045be:	460c      	mov	r4, r1
 80045c0:	b10a      	cbz	r2, 80045c6 <_printf_common+0x26>
 80045c2:	3301      	adds	r3, #1
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	0699      	lsls	r1, r3, #26
 80045ca:	bf42      	ittt	mi
 80045cc:	6833      	ldrmi	r3, [r6, #0]
 80045ce:	3302      	addmi	r3, #2
 80045d0:	6033      	strmi	r3, [r6, #0]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d106      	bne.n	80045e8 <_printf_common+0x48>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	6832      	ldr	r2, [r6, #0]
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	dc26      	bgt.n	8004636 <_printf_common+0x96>
 80045e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	3b00      	subs	r3, #0
 80045f0:	bf18      	it	ne
 80045f2:	2301      	movne	r3, #1
 80045f4:	0692      	lsls	r2, r2, #26
 80045f6:	d42b      	bmi.n	8004650 <_printf_common+0xb0>
 80045f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045fc:	4641      	mov	r1, r8
 80045fe:	4638      	mov	r0, r7
 8004600:	47c8      	blx	r9
 8004602:	3001      	adds	r0, #1
 8004604:	d01e      	beq.n	8004644 <_printf_common+0xa4>
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	6922      	ldr	r2, [r4, #16]
 800460a:	f003 0306 	and.w	r3, r3, #6
 800460e:	2b04      	cmp	r3, #4
 8004610:	bf02      	ittt	eq
 8004612:	68e5      	ldreq	r5, [r4, #12]
 8004614:	6833      	ldreq	r3, [r6, #0]
 8004616:	1aed      	subeq	r5, r5, r3
 8004618:	68a3      	ldr	r3, [r4, #8]
 800461a:	bf0c      	ite	eq
 800461c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004620:	2500      	movne	r5, #0
 8004622:	4293      	cmp	r3, r2
 8004624:	bfc4      	itt	gt
 8004626:	1a9b      	subgt	r3, r3, r2
 8004628:	18ed      	addgt	r5, r5, r3
 800462a:	2600      	movs	r6, #0
 800462c:	341a      	adds	r4, #26
 800462e:	42b5      	cmp	r5, r6
 8004630:	d11a      	bne.n	8004668 <_printf_common+0xc8>
 8004632:	2000      	movs	r0, #0
 8004634:	e008      	b.n	8004648 <_printf_common+0xa8>
 8004636:	2301      	movs	r3, #1
 8004638:	4652      	mov	r2, sl
 800463a:	4641      	mov	r1, r8
 800463c:	4638      	mov	r0, r7
 800463e:	47c8      	blx	r9
 8004640:	3001      	adds	r0, #1
 8004642:	d103      	bne.n	800464c <_printf_common+0xac>
 8004644:	f04f 30ff 	mov.w	r0, #4294967295
 8004648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464c:	3501      	adds	r5, #1
 800464e:	e7c6      	b.n	80045de <_printf_common+0x3e>
 8004650:	18e1      	adds	r1, r4, r3
 8004652:	1c5a      	adds	r2, r3, #1
 8004654:	2030      	movs	r0, #48	@ 0x30
 8004656:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800465a:	4422      	add	r2, r4
 800465c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004664:	3302      	adds	r3, #2
 8004666:	e7c7      	b.n	80045f8 <_printf_common+0x58>
 8004668:	2301      	movs	r3, #1
 800466a:	4622      	mov	r2, r4
 800466c:	4641      	mov	r1, r8
 800466e:	4638      	mov	r0, r7
 8004670:	47c8      	blx	r9
 8004672:	3001      	adds	r0, #1
 8004674:	d0e6      	beq.n	8004644 <_printf_common+0xa4>
 8004676:	3601      	adds	r6, #1
 8004678:	e7d9      	b.n	800462e <_printf_common+0x8e>
	...

0800467c <_printf_i>:
 800467c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004680:	7e0f      	ldrb	r7, [r1, #24]
 8004682:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004684:	2f78      	cmp	r7, #120	@ 0x78
 8004686:	4691      	mov	r9, r2
 8004688:	4680      	mov	r8, r0
 800468a:	460c      	mov	r4, r1
 800468c:	469a      	mov	sl, r3
 800468e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004692:	d807      	bhi.n	80046a4 <_printf_i+0x28>
 8004694:	2f62      	cmp	r7, #98	@ 0x62
 8004696:	d80a      	bhi.n	80046ae <_printf_i+0x32>
 8004698:	2f00      	cmp	r7, #0
 800469a:	f000 80d2 	beq.w	8004842 <_printf_i+0x1c6>
 800469e:	2f58      	cmp	r7, #88	@ 0x58
 80046a0:	f000 80b9 	beq.w	8004816 <_printf_i+0x19a>
 80046a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046ac:	e03a      	b.n	8004724 <_printf_i+0xa8>
 80046ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046b2:	2b15      	cmp	r3, #21
 80046b4:	d8f6      	bhi.n	80046a4 <_printf_i+0x28>
 80046b6:	a101      	add	r1, pc, #4	@ (adr r1, 80046bc <_printf_i+0x40>)
 80046b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004729 	.word	0x08004729
 80046c4:	080046a5 	.word	0x080046a5
 80046c8:	080046a5 	.word	0x080046a5
 80046cc:	080046a5 	.word	0x080046a5
 80046d0:	080046a5 	.word	0x080046a5
 80046d4:	08004729 	.word	0x08004729
 80046d8:	080046a5 	.word	0x080046a5
 80046dc:	080046a5 	.word	0x080046a5
 80046e0:	080046a5 	.word	0x080046a5
 80046e4:	080046a5 	.word	0x080046a5
 80046e8:	08004829 	.word	0x08004829
 80046ec:	08004753 	.word	0x08004753
 80046f0:	080047e3 	.word	0x080047e3
 80046f4:	080046a5 	.word	0x080046a5
 80046f8:	080046a5 	.word	0x080046a5
 80046fc:	0800484b 	.word	0x0800484b
 8004700:	080046a5 	.word	0x080046a5
 8004704:	08004753 	.word	0x08004753
 8004708:	080046a5 	.word	0x080046a5
 800470c:	080046a5 	.word	0x080046a5
 8004710:	080047eb 	.word	0x080047eb
 8004714:	6833      	ldr	r3, [r6, #0]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6032      	str	r2, [r6, #0]
 800471c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e09d      	b.n	8004864 <_printf_i+0x1e8>
 8004728:	6833      	ldr	r3, [r6, #0]
 800472a:	6820      	ldr	r0, [r4, #0]
 800472c:	1d19      	adds	r1, r3, #4
 800472e:	6031      	str	r1, [r6, #0]
 8004730:	0606      	lsls	r6, r0, #24
 8004732:	d501      	bpl.n	8004738 <_printf_i+0xbc>
 8004734:	681d      	ldr	r5, [r3, #0]
 8004736:	e003      	b.n	8004740 <_printf_i+0xc4>
 8004738:	0645      	lsls	r5, r0, #25
 800473a:	d5fb      	bpl.n	8004734 <_printf_i+0xb8>
 800473c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004740:	2d00      	cmp	r5, #0
 8004742:	da03      	bge.n	800474c <_printf_i+0xd0>
 8004744:	232d      	movs	r3, #45	@ 0x2d
 8004746:	426d      	negs	r5, r5
 8004748:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800474c:	4859      	ldr	r0, [pc, #356]	@ (80048b4 <_printf_i+0x238>)
 800474e:	230a      	movs	r3, #10
 8004750:	e011      	b.n	8004776 <_printf_i+0xfa>
 8004752:	6821      	ldr	r1, [r4, #0]
 8004754:	6833      	ldr	r3, [r6, #0]
 8004756:	0608      	lsls	r0, r1, #24
 8004758:	f853 5b04 	ldr.w	r5, [r3], #4
 800475c:	d402      	bmi.n	8004764 <_printf_i+0xe8>
 800475e:	0649      	lsls	r1, r1, #25
 8004760:	bf48      	it	mi
 8004762:	b2ad      	uxthmi	r5, r5
 8004764:	2f6f      	cmp	r7, #111	@ 0x6f
 8004766:	4853      	ldr	r0, [pc, #332]	@ (80048b4 <_printf_i+0x238>)
 8004768:	6033      	str	r3, [r6, #0]
 800476a:	bf14      	ite	ne
 800476c:	230a      	movne	r3, #10
 800476e:	2308      	moveq	r3, #8
 8004770:	2100      	movs	r1, #0
 8004772:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004776:	6866      	ldr	r6, [r4, #4]
 8004778:	60a6      	str	r6, [r4, #8]
 800477a:	2e00      	cmp	r6, #0
 800477c:	bfa2      	ittt	ge
 800477e:	6821      	ldrge	r1, [r4, #0]
 8004780:	f021 0104 	bicge.w	r1, r1, #4
 8004784:	6021      	strge	r1, [r4, #0]
 8004786:	b90d      	cbnz	r5, 800478c <_printf_i+0x110>
 8004788:	2e00      	cmp	r6, #0
 800478a:	d04b      	beq.n	8004824 <_printf_i+0x1a8>
 800478c:	4616      	mov	r6, r2
 800478e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004792:	fb03 5711 	mls	r7, r3, r1, r5
 8004796:	5dc7      	ldrb	r7, [r0, r7]
 8004798:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800479c:	462f      	mov	r7, r5
 800479e:	42bb      	cmp	r3, r7
 80047a0:	460d      	mov	r5, r1
 80047a2:	d9f4      	bls.n	800478e <_printf_i+0x112>
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d10b      	bne.n	80047c0 <_printf_i+0x144>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	07df      	lsls	r7, r3, #31
 80047ac:	d508      	bpl.n	80047c0 <_printf_i+0x144>
 80047ae:	6923      	ldr	r3, [r4, #16]
 80047b0:	6861      	ldr	r1, [r4, #4]
 80047b2:	4299      	cmp	r1, r3
 80047b4:	bfde      	ittt	le
 80047b6:	2330      	movle	r3, #48	@ 0x30
 80047b8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047bc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047c0:	1b92      	subs	r2, r2, r6
 80047c2:	6122      	str	r2, [r4, #16]
 80047c4:	f8cd a000 	str.w	sl, [sp]
 80047c8:	464b      	mov	r3, r9
 80047ca:	aa03      	add	r2, sp, #12
 80047cc:	4621      	mov	r1, r4
 80047ce:	4640      	mov	r0, r8
 80047d0:	f7ff fee6 	bl	80045a0 <_printf_common>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d14a      	bne.n	800486e <_printf_i+0x1f2>
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b004      	add	sp, #16
 80047de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	f043 0320 	orr.w	r3, r3, #32
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	4833      	ldr	r0, [pc, #204]	@ (80048b8 <_printf_i+0x23c>)
 80047ec:	2778      	movs	r7, #120	@ 0x78
 80047ee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047f2:	6823      	ldr	r3, [r4, #0]
 80047f4:	6831      	ldr	r1, [r6, #0]
 80047f6:	061f      	lsls	r7, r3, #24
 80047f8:	f851 5b04 	ldr.w	r5, [r1], #4
 80047fc:	d402      	bmi.n	8004804 <_printf_i+0x188>
 80047fe:	065f      	lsls	r7, r3, #25
 8004800:	bf48      	it	mi
 8004802:	b2ad      	uxthmi	r5, r5
 8004804:	6031      	str	r1, [r6, #0]
 8004806:	07d9      	lsls	r1, r3, #31
 8004808:	bf44      	itt	mi
 800480a:	f043 0320 	orrmi.w	r3, r3, #32
 800480e:	6023      	strmi	r3, [r4, #0]
 8004810:	b11d      	cbz	r5, 800481a <_printf_i+0x19e>
 8004812:	2310      	movs	r3, #16
 8004814:	e7ac      	b.n	8004770 <_printf_i+0xf4>
 8004816:	4827      	ldr	r0, [pc, #156]	@ (80048b4 <_printf_i+0x238>)
 8004818:	e7e9      	b.n	80047ee <_printf_i+0x172>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	f023 0320 	bic.w	r3, r3, #32
 8004820:	6023      	str	r3, [r4, #0]
 8004822:	e7f6      	b.n	8004812 <_printf_i+0x196>
 8004824:	4616      	mov	r6, r2
 8004826:	e7bd      	b.n	80047a4 <_printf_i+0x128>
 8004828:	6833      	ldr	r3, [r6, #0]
 800482a:	6825      	ldr	r5, [r4, #0]
 800482c:	6961      	ldr	r1, [r4, #20]
 800482e:	1d18      	adds	r0, r3, #4
 8004830:	6030      	str	r0, [r6, #0]
 8004832:	062e      	lsls	r6, r5, #24
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	d501      	bpl.n	800483c <_printf_i+0x1c0>
 8004838:	6019      	str	r1, [r3, #0]
 800483a:	e002      	b.n	8004842 <_printf_i+0x1c6>
 800483c:	0668      	lsls	r0, r5, #25
 800483e:	d5fb      	bpl.n	8004838 <_printf_i+0x1bc>
 8004840:	8019      	strh	r1, [r3, #0]
 8004842:	2300      	movs	r3, #0
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	4616      	mov	r6, r2
 8004848:	e7bc      	b.n	80047c4 <_printf_i+0x148>
 800484a:	6833      	ldr	r3, [r6, #0]
 800484c:	1d1a      	adds	r2, r3, #4
 800484e:	6032      	str	r2, [r6, #0]
 8004850:	681e      	ldr	r6, [r3, #0]
 8004852:	6862      	ldr	r2, [r4, #4]
 8004854:	2100      	movs	r1, #0
 8004856:	4630      	mov	r0, r6
 8004858:	f7fb fcda 	bl	8000210 <memchr>
 800485c:	b108      	cbz	r0, 8004862 <_printf_i+0x1e6>
 800485e:	1b80      	subs	r0, r0, r6
 8004860:	6060      	str	r0, [r4, #4]
 8004862:	6863      	ldr	r3, [r4, #4]
 8004864:	6123      	str	r3, [r4, #16]
 8004866:	2300      	movs	r3, #0
 8004868:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486c:	e7aa      	b.n	80047c4 <_printf_i+0x148>
 800486e:	6923      	ldr	r3, [r4, #16]
 8004870:	4632      	mov	r2, r6
 8004872:	4649      	mov	r1, r9
 8004874:	4640      	mov	r0, r8
 8004876:	47d0      	blx	sl
 8004878:	3001      	adds	r0, #1
 800487a:	d0ad      	beq.n	80047d8 <_printf_i+0x15c>
 800487c:	6823      	ldr	r3, [r4, #0]
 800487e:	079b      	lsls	r3, r3, #30
 8004880:	d413      	bmi.n	80048aa <_printf_i+0x22e>
 8004882:	68e0      	ldr	r0, [r4, #12]
 8004884:	9b03      	ldr	r3, [sp, #12]
 8004886:	4298      	cmp	r0, r3
 8004888:	bfb8      	it	lt
 800488a:	4618      	movlt	r0, r3
 800488c:	e7a6      	b.n	80047dc <_printf_i+0x160>
 800488e:	2301      	movs	r3, #1
 8004890:	4632      	mov	r2, r6
 8004892:	4649      	mov	r1, r9
 8004894:	4640      	mov	r0, r8
 8004896:	47d0      	blx	sl
 8004898:	3001      	adds	r0, #1
 800489a:	d09d      	beq.n	80047d8 <_printf_i+0x15c>
 800489c:	3501      	adds	r5, #1
 800489e:	68e3      	ldr	r3, [r4, #12]
 80048a0:	9903      	ldr	r1, [sp, #12]
 80048a2:	1a5b      	subs	r3, r3, r1
 80048a4:	42ab      	cmp	r3, r5
 80048a6:	dcf2      	bgt.n	800488e <_printf_i+0x212>
 80048a8:	e7eb      	b.n	8004882 <_printf_i+0x206>
 80048aa:	2500      	movs	r5, #0
 80048ac:	f104 0619 	add.w	r6, r4, #25
 80048b0:	e7f5      	b.n	800489e <_printf_i+0x222>
 80048b2:	bf00      	nop
 80048b4:	080049dd 	.word	0x080049dd
 80048b8:	080049ee 	.word	0x080049ee

080048bc <memmove>:
 80048bc:	4288      	cmp	r0, r1
 80048be:	b510      	push	{r4, lr}
 80048c0:	eb01 0402 	add.w	r4, r1, r2
 80048c4:	d902      	bls.n	80048cc <memmove+0x10>
 80048c6:	4284      	cmp	r4, r0
 80048c8:	4623      	mov	r3, r4
 80048ca:	d807      	bhi.n	80048dc <memmove+0x20>
 80048cc:	1e43      	subs	r3, r0, #1
 80048ce:	42a1      	cmp	r1, r4
 80048d0:	d008      	beq.n	80048e4 <memmove+0x28>
 80048d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80048d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80048da:	e7f8      	b.n	80048ce <memmove+0x12>
 80048dc:	4402      	add	r2, r0
 80048de:	4601      	mov	r1, r0
 80048e0:	428a      	cmp	r2, r1
 80048e2:	d100      	bne.n	80048e6 <memmove+0x2a>
 80048e4:	bd10      	pop	{r4, pc}
 80048e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80048ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048ee:	e7f7      	b.n	80048e0 <memmove+0x24>

080048f0 <_sbrk_r>:
 80048f0:	b538      	push	{r3, r4, r5, lr}
 80048f2:	4d06      	ldr	r5, [pc, #24]	@ (800490c <_sbrk_r+0x1c>)
 80048f4:	2300      	movs	r3, #0
 80048f6:	4604      	mov	r4, r0
 80048f8:	4608      	mov	r0, r1
 80048fa:	602b      	str	r3, [r5, #0]
 80048fc:	f7fc fa42 	bl	8000d84 <_sbrk>
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	d102      	bne.n	800490a <_sbrk_r+0x1a>
 8004904:	682b      	ldr	r3, [r5, #0]
 8004906:	b103      	cbz	r3, 800490a <_sbrk_r+0x1a>
 8004908:	6023      	str	r3, [r4, #0]
 800490a:	bd38      	pop	{r3, r4, r5, pc}
 800490c:	200002b0 	.word	0x200002b0

08004910 <memcpy>:
 8004910:	440a      	add	r2, r1
 8004912:	4291      	cmp	r1, r2
 8004914:	f100 33ff 	add.w	r3, r0, #4294967295
 8004918:	d100      	bne.n	800491c <memcpy+0xc>
 800491a:	4770      	bx	lr
 800491c:	b510      	push	{r4, lr}
 800491e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004922:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004926:	4291      	cmp	r1, r2
 8004928:	d1f9      	bne.n	800491e <memcpy+0xe>
 800492a:	bd10      	pop	{r4, pc}

0800492c <_realloc_r>:
 800492c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004930:	4680      	mov	r8, r0
 8004932:	4615      	mov	r5, r2
 8004934:	460c      	mov	r4, r1
 8004936:	b921      	cbnz	r1, 8004942 <_realloc_r+0x16>
 8004938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800493c:	4611      	mov	r1, r2
 800493e:	f7ff bc4b 	b.w	80041d8 <_malloc_r>
 8004942:	b92a      	cbnz	r2, 8004950 <_realloc_r+0x24>
 8004944:	f7ff fbdc 	bl	8004100 <_free_r>
 8004948:	2400      	movs	r4, #0
 800494a:	4620      	mov	r0, r4
 800494c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004950:	f000 f81a 	bl	8004988 <_malloc_usable_size_r>
 8004954:	4285      	cmp	r5, r0
 8004956:	4606      	mov	r6, r0
 8004958:	d802      	bhi.n	8004960 <_realloc_r+0x34>
 800495a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800495e:	d8f4      	bhi.n	800494a <_realloc_r+0x1e>
 8004960:	4629      	mov	r1, r5
 8004962:	4640      	mov	r0, r8
 8004964:	f7ff fc38 	bl	80041d8 <_malloc_r>
 8004968:	4607      	mov	r7, r0
 800496a:	2800      	cmp	r0, #0
 800496c:	d0ec      	beq.n	8004948 <_realloc_r+0x1c>
 800496e:	42b5      	cmp	r5, r6
 8004970:	462a      	mov	r2, r5
 8004972:	4621      	mov	r1, r4
 8004974:	bf28      	it	cs
 8004976:	4632      	movcs	r2, r6
 8004978:	f7ff ffca 	bl	8004910 <memcpy>
 800497c:	4621      	mov	r1, r4
 800497e:	4640      	mov	r0, r8
 8004980:	f7ff fbbe 	bl	8004100 <_free_r>
 8004984:	463c      	mov	r4, r7
 8004986:	e7e0      	b.n	800494a <_realloc_r+0x1e>

08004988 <_malloc_usable_size_r>:
 8004988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800498c:	1f18      	subs	r0, r3, #4
 800498e:	2b00      	cmp	r3, #0
 8004990:	bfbc      	itt	lt
 8004992:	580b      	ldrlt	r3, [r1, r0]
 8004994:	18c0      	addlt	r0, r0, r3
 8004996:	4770      	bx	lr

08004998 <_init>:
 8004998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499a:	bf00      	nop
 800499c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800499e:	bc08      	pop	{r3}
 80049a0:	469e      	mov	lr, r3
 80049a2:	4770      	bx	lr

080049a4 <_fini>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr
