
Q11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080031f0  080031f0  000041f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003264  08003264  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003264  08003264  00004264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800326c  0800326c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800326c  0800326c  0000426c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003270  08003270  00004270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003274  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000068  080032dc  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  080032dc  00005220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000802f  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001635  00000000  00000000  0000d0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d0  00000000  00000000  0000e700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000531  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021074  00000000  00000000  0000f301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009432  00000000  00000000  00030375  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c8507  00000000  00000000  000397a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101cae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022d0  00000000  00000000  00101cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00103fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080031d8 	.word	0x080031d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080031d8 	.word	0x080031d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 faa9 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f85d 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f8f3 	bl	80007e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000602:	f000 f8c7 	bl	8000794 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int x=0;
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
  int COUNT=0;
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
  printf("ABCD");
 800060e:	4825      	ldr	r0, [pc, #148]	@ (80006a4 <main+0xb4>)
 8000610:	f001 ff4c 	bl	80024ac <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))&&x==0)
 8000614:	2180      	movs	r1, #128	@ 0x80
 8000616:	4824      	ldr	r0, [pc, #144]	@ (80006a8 <main+0xb8>)
 8000618:	f000 fda8 	bl	800116c <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d01b      	beq.n	800065a <main+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d118      	bne.n	800065a <main+0x6a>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800062e:	481f      	ldr	r0, [pc, #124]	@ (80006ac <main+0xbc>)
 8000630:	f000 fdb4 	bl	800119c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, RESET);
 8000634:	2200      	movs	r2, #0
 8000636:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800063a:	481c      	ldr	r0, [pc, #112]	@ (80006ac <main+0xbc>)
 800063c:	f000 fdae 	bl	800119c <HAL_GPIO_WritePin>

			x=1;
 8000640:	2301      	movs	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
			COUNT++;
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	603b      	str	r3, [r7, #0]
			printf("COUNT IS %d \n ",COUNT);
 800064a:	6839      	ldr	r1, [r7, #0]
 800064c:	4818      	ldr	r0, [pc, #96]	@ (80006b0 <main+0xc0>)
 800064e:	f001 ff2d 	bl	80024ac <iprintf>
			HAL_Delay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f000 faeb 	bl	8000c30 <HAL_Delay>

		}
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))&&x==1)
 800065a:	2180      	movs	r1, #128	@ 0x80
 800065c:	4812      	ldr	r0, [pc, #72]	@ (80006a8 <main+0xb8>)
 800065e:	f000 fd85 	bl	800116c <HAL_GPIO_ReadPin>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d0d5      	beq.n	8000614 <main+0x24>
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d1d2      	bne.n	8000614 <main+0x24>
		{
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000674:	480d      	ldr	r0, [pc, #52]	@ (80006ac <main+0xbc>)
 8000676:	f000 fd91 	bl	800119c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, SET);
 800067a:	2201      	movs	r2, #1
 800067c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000680:	480a      	ldr	r0, [pc, #40]	@ (80006ac <main+0xbc>)
 8000682:	f000 fd8b 	bl	800119c <HAL_GPIO_WritePin>
			x=0;
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
			COUNT++;
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	603b      	str	r3, [r7, #0]
			printf("COUNT IS %d \n",COUNT);
 8000690:	6839      	ldr	r1, [r7, #0]
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <main+0xc4>)
 8000694:	f001 ff0a 	bl	80024ac <iprintf>
			HAL_Delay(500);
 8000698:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800069c:	f000 fac8 	bl	8000c30 <HAL_Delay>
		if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7))&&x==0)
 80006a0:	e7b8      	b.n	8000614 <main+0x24>
 80006a2:	bf00      	nop
 80006a4:	080031f0 	.word	0x080031f0
 80006a8:	40020400 	.word	0x40020400
 80006ac:	40020000 	.word	0x40020000
 80006b0:	080031f8 	.word	0x080031f8
 80006b4:	08003208 	.word	0x08003208

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	@ 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 ff45 	bl	8002556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <SystemClock_Config+0xd4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a29      	ldr	r2, [pc, #164]	@ (800078c <SystemClock_Config+0xd4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <SystemClock_Config+0xd4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <SystemClock_Config+0xd8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000704:	4a22      	ldr	r2, [pc, #136]	@ (8000790 <SystemClock_Config+0xd8>)
 8000706:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b20      	ldr	r3, [pc, #128]	@ (8000790 <SystemClock_Config+0xd8>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000724:	2302      	movs	r3, #2
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000728:	2300      	movs	r3, #0
 800072a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800072c:	2310      	movs	r3, #16
 800072e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000730:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000734:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000736:	2304      	movs	r3, #4
 8000738:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800073e:	2302      	movs	r3, #2
 8000740:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4618      	mov	r0, r3
 8000748:	f001 f88c 	bl	8001864 <HAL_RCC_OscConfig>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000752:	f000 f8e3 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000756:	230f      	movs	r3, #15
 8000758:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075a:	2302      	movs	r3, #2
 800075c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000762:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800076c:	f107 0308 	add.w	r3, r7, #8
 8000770:	2102      	movs	r1, #2
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fd2c 	bl	80011d0 <HAL_RCC_ClockConfig>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800077e:	f000 f8cd 	bl	800091c <Error_Handler>
  }
}
 8000782:	bf00      	nop
 8000784:	3750      	adds	r7, #80	@ 0x50
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800
 8000790:	40007000 	.word	0x40007000

08000794 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_USART2_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART2_UART_Init+0x4c>)
 80007cc:	f001 fae8 	bl	8001da0 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f000 f8a1 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000084 	.word	0x20000084
 80007e4:	40004400 	.word	0x40004400

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b08a      	sub	sp, #40	@ 0x28
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
 8000802:	4b34      	ldr	r3, [pc, #208]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a33      	ldr	r2, [pc, #204]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	4b2d      	ldr	r3, [pc, #180]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	4a2c      	ldr	r2, [pc, #176]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000824:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000828:	6313      	str	r3, [r2, #48]	@ 0x30
 800082a:	4b2a      	ldr	r3, [pc, #168]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000832:	60fb      	str	r3, [r7, #12]
 8000834:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a25      	ldr	r2, [pc, #148]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	60bb      	str	r3, [r7, #8]
 8000850:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	607b      	str	r3, [r7, #4]
 8000856:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a1e      	ldr	r2, [pc, #120]	@ (80008d4 <MX_GPIO_Init+0xec>)
 800085c:	f043 0302 	orr.w	r3, r3, #2
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <MX_GPIO_Init+0xec>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0302 	and.w	r3, r3, #2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000874:	4818      	ldr	r0, [pc, #96]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 8000876:	f000 fc91 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000880:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4812      	ldr	r0, [pc, #72]	@ (80008dc <MX_GPIO_Init+0xf4>)
 8000892:	f000 fad7 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8000896:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800089a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	@ (80008d8 <MX_GPIO_Init+0xf0>)
 80008b0:	f000 fac8 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008b4:	2380      	movs	r3, #128	@ 0x80
 80008b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008c0:	f107 0314 	add.w	r3, r7, #20
 80008c4:	4619      	mov	r1, r3
 80008c6:	4806      	ldr	r0, [pc, #24]	@ (80008e0 <MX_GPIO_Init+0xf8>)
 80008c8:	f000 fabc 	bl	8000e44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008cc:	bf00      	nop
 80008ce:	3728      	adds	r7, #40	@ 0x28
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020800 	.word	0x40020800
 80008e0:	40020400 	.word	0x40020400

080008e4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int le, char *ptr, int len)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
int DataIdx;
for(DataIdx = 0; DataIdx < len; DataIdx++)
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
 80008f4:	e009      	b.n	800090a <_write+0x26>
{
ITM_SendChar(*ptr++);
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	60ba      	str	r2, [r7, #8]
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fe4e 	bl	80005a0 <ITM_SendChar>
for(DataIdx = 0; DataIdx < len; DataIdx++)
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
 800090a:	697a      	ldr	r2, [r7, #20]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	429a      	cmp	r2, r3
 8000910:	dbf1      	blt.n	80008f6 <_write+0x12>
}
return len;
 8000912:	687b      	ldr	r3, [r7, #4]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000936:	4a0f      	ldr	r2, [pc, #60]	@ (8000974 <HAL_MspInit+0x4c>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800093c:	6453      	str	r3, [r2, #68]	@ 0x44
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <HAL_MspInit+0x4c>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b09      	ldr	r3, [pc, #36]	@ (8000974 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000952:	4a08      	ldr	r2, [pc, #32]	@ (8000974 <HAL_MspInit+0x4c>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	@ 0x40
 800095a:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_MspInit+0x4c>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000966:	2007      	movs	r0, #7
 8000968:	f000 fa38 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40023800 	.word	0x40023800

08000978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	@ 0x28
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000980:	f107 0314 	add.w	r3, r7, #20
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a19      	ldr	r2, [pc, #100]	@ (80009fc <HAL_UART_MspInit+0x84>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d12b      	bne.n	80009f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	4b18      	ldr	r3, [pc, #96]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a2:	4a17      	ldr	r2, [pc, #92]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009aa:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b2:	613b      	str	r3, [r7, #16]
 80009b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009be:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c0:	f043 0301 	orr.w	r3, r3, #1
 80009c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a00 <HAL_UART_MspInit+0x88>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	f003 0301 	and.w	r3, r3, #1
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d2:	230c      	movs	r3, #12
 80009d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d6:	2302      	movs	r3, #2
 80009d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e2:	2307      	movs	r3, #7
 80009e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <HAL_UART_MspInit+0x8c>)
 80009ee:	f000 fa29 	bl	8000e44 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	@ 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40004400 	.word	0x40004400
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020000 	.word	0x40020000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a5e:	f000 f8c7 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b086      	sub	sp, #24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a70:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <_sbrk+0x5c>)
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <_sbrk+0x60>)
 8000a74:	1ad3      	subs	r3, r2, r3
 8000a76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a7c:	4b13      	ldr	r3, [pc, #76]	@ (8000acc <_sbrk+0x64>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a84:	4b11      	ldr	r3, [pc, #68]	@ (8000acc <_sbrk+0x64>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	@ (8000ad0 <_sbrk+0x68>)
 8000a88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8a:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <_sbrk+0x64>)
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4413      	add	r3, r2
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d207      	bcs.n	8000aa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a98:	f001 fdac 	bl	80025f4 <__errno>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	220c      	movs	r2, #12
 8000aa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	e009      	b.n	8000abc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <_sbrk+0x64>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aae:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <_sbrk+0x64>)
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	4a05      	ldr	r2, [pc, #20]	@ (8000acc <_sbrk+0x64>)
 8000ab8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000aba:	68fb      	ldr	r3, [r7, #12]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20020000 	.word	0x20020000
 8000ac8:	00000400 	.word	0x00000400
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	20000220 	.word	0x20000220

08000ad4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ad8:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <SystemInit+0x20>)
 8000ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ade:	4a05      	ldr	r2, [pc, #20]	@ (8000af4 <SystemInit+0x20>)
 8000ae0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ae4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b30 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000afc:	f7ff ffea 	bl	8000ad4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b00:	480c      	ldr	r0, [pc, #48]	@ (8000b34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b04:	4a0d      	ldr	r2, [pc, #52]	@ (8000b3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b08:	e002      	b.n	8000b10 <LoopCopyDataInit>

08000b0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0e:	3304      	adds	r3, #4

08000b10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b14:	d3f9      	bcc.n	8000b0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b16:	4a0a      	ldr	r2, [pc, #40]	@ (8000b40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b18:	4c0a      	ldr	r4, [pc, #40]	@ (8000b44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b1c:	e001      	b.n	8000b22 <LoopFillZerobss>

08000b1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b20:	3204      	adds	r2, #4

08000b22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b24:	d3fb      	bcc.n	8000b1e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f001 fd6b 	bl	8002600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f7ff fd61 	bl	80005f0 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b3c:	08003274 	.word	0x08003274
  ldr r2, =_sbss
 8000b40:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b44:	20000220 	.word	0x20000220

08000b48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <ADC_IRQHandler>
	...

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	@ (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f931 	bl	8000ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fed2 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	@ (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f93b 	bl	8000e2a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f911 	bl	8000df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	@ (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	@ (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	200000d0 	.word	0x200000d0

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	@ (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	200000d0 	.word	0x200000d0

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff ffee 	bl	8000c18 <HAL_GetTick>
 8000c3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	4413      	add	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	bf00      	nop
 8000c58:	f7ff ffde 	bl	8000c18 <HAL_GetTick>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	bf00      	nop
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008

08000c78 <__NVIC_SetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f003 0307 	and.w	r3, r3, #7
 8000c86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c88:	4b0c      	ldr	r3, [pc, #48]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8e:	68ba      	ldr	r2, [r7, #8]
 8000c90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c94:	4013      	ands	r3, r2
 8000c96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000caa:	4a04      	ldr	r2, [pc, #16]	@ (8000cbc <__NVIC_SetPriorityGrouping+0x44>)
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	60d3      	str	r3, [r2, #12]
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_GetPriorityGrouping>:
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	0a1b      	lsrs	r3, r3, #8
 8000cca:	f003 0307 	and.w	r3, r3, #7
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <__NVIC_SetPriority>:
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	6039      	str	r1, [r7, #0]
 8000ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db0a      	blt.n	8000d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	490c      	ldr	r1, [pc, #48]	@ (8000d28 <__NVIC_SetPriority+0x4c>)
 8000cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfa:	0112      	lsls	r2, r2, #4
 8000cfc:	b2d2      	uxtb	r2, r2
 8000cfe:	440b      	add	r3, r1
 8000d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000d04:	e00a      	b.n	8000d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	b2da      	uxtb	r2, r3
 8000d0a:	4908      	ldr	r1, [pc, #32]	@ (8000d2c <__NVIC_SetPriority+0x50>)
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	f003 030f 	and.w	r3, r3, #15
 8000d12:	3b04      	subs	r3, #4
 8000d14:	0112      	lsls	r2, r2, #4
 8000d16:	b2d2      	uxtb	r2, r2
 8000d18:	440b      	add	r3, r1
 8000d1a:	761a      	strb	r2, [r3, #24]
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000e100 	.word	0xe000e100
 8000d2c:	e000ed00 	.word	0xe000ed00

08000d30 <NVIC_EncodePriority>:
{
 8000d30:	b480      	push	{r7}
 8000d32:	b089      	sub	sp, #36	@ 0x24
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60f8      	str	r0, [r7, #12]
 8000d38:	60b9      	str	r1, [r7, #8]
 8000d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f003 0307 	and.w	r3, r3, #7
 8000d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f1c3 0307 	rsb	r3, r3, #7
 8000d4a:	2b04      	cmp	r3, #4
 8000d4c:	bf28      	it	cs
 8000d4e:	2304      	movcs	r3, #4
 8000d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3304      	adds	r3, #4
 8000d56:	2b06      	cmp	r3, #6
 8000d58:	d902      	bls.n	8000d60 <NVIC_EncodePriority+0x30>
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	3b03      	subs	r3, #3
 8000d5e:	e000      	b.n	8000d62 <NVIC_EncodePriority+0x32>
 8000d60:	2300      	movs	r3, #0
 8000d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d64:	f04f 32ff 	mov.w	r2, #4294967295
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	43da      	mvns	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	401a      	ands	r2, r3
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d82:	43d9      	mvns	r1, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d88:	4313      	orrs	r3, r2
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3724      	adds	r7, #36	@ 0x24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
	...

08000d98 <SysTick_Config>:
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3b01      	subs	r3, #1
 8000da4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da8:	d301      	bcc.n	8000dae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000daa:	2301      	movs	r3, #1
 8000dac:	e00f      	b.n	8000dce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <SysTick_Config+0x40>)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db6:	210f      	movs	r1, #15
 8000db8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dbc:	f7ff ff8e 	bl	8000cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SysTick_Config+0x40>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f7ff ff47 	bl	8000c78 <__NVIC_SetPriorityGrouping>
}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
 8000dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e04:	f7ff ff5c 	bl	8000cc0 <__NVIC_GetPriorityGrouping>
 8000e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0a:	687a      	ldr	r2, [r7, #4]
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	6978      	ldr	r0, [r7, #20]
 8000e10:	f7ff ff8e 	bl	8000d30 <NVIC_EncodePriority>
 8000e14:	4602      	mov	r2, r0
 8000e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1a:	4611      	mov	r1, r2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <__NVIC_SetPriority>
}
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b082      	sub	sp, #8
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f7ff ffb0 	bl	8000d98 <SysTick_Config>
 8000e38:	4603      	mov	r3, r0
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
	...

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e165      	b.n	800112c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8154 	bne.w	8001126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d017      	beq.n	8000f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ae 	beq.w	8001126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe6:	4a58      	ldr	r2, [pc, #352]	@ (8001148 <HAL_GPIO_Init+0x304>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	@ (800114c <HAL_GPIO_Init+0x308>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	@ (8001150 <HAL_GPIO_Init+0x30c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	@ (8001154 <HAL_GPIO_Init+0x310>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	@ (8001158 <HAL_GPIO_Init+0x314>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	@ (800115c <HAL_GPIO_Init+0x318>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x20a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	@ (8001160 <HAL_GPIO_Init+0x31c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x206>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	@ (8001164 <HAL_GPIO_Init+0x320>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x202>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	@ (8001148 <HAL_GPIO_Init+0x304>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a31      	ldr	r2, [pc, #196]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae96 	bls.w	8000e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	691a      	ldr	r2, [r3, #16]
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	4013      	ands	r3, r2
 8001180:	2b00      	cmp	r3, #0
 8001182:	d002      	beq.n	800118a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001184:	2301      	movs	r3, #1
 8001186:	73fb      	strb	r3, [r7, #15]
 8001188:	e001      	b.n	800118e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800118e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3714      	adds	r7, #20
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d101      	bne.n	80011e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e0:	2301      	movs	r3, #1
 80011e2:	e0cc      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e4:	4b68      	ldr	r3, [pc, #416]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	d90c      	bls.n	800120c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f2:	4b65      	ldr	r3, [pc, #404]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	b2d2      	uxtb	r2, r2
 80011f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fa:	4b63      	ldr	r3, [pc, #396]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 030f 	and.w	r3, r3, #15
 8001202:	683a      	ldr	r2, [r7, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d001      	beq.n	800120c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001208:	2301      	movs	r3, #1
 800120a:	e0b8      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0302 	and.w	r3, r3, #2
 8001214:	2b00      	cmp	r3, #0
 8001216:	d020      	beq.n	800125a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d005      	beq.n	8001230 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001224:	4b59      	ldr	r3, [pc, #356]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4a58      	ldr	r2, [pc, #352]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800122e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0308 	and.w	r3, r3, #8
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800123c:	4b53      	ldr	r3, [pc, #332]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a52      	ldr	r2, [pc, #328]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001246:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001248:	4b50      	ldr	r3, [pc, #320]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	494d      	ldr	r1, [pc, #308]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001256:	4313      	orrs	r3, r2
 8001258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	2b00      	cmp	r3, #0
 8001264:	d044      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126e:	4b47      	ldr	r3, [pc, #284]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d119      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e07f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	2b02      	cmp	r3, #2
 8001284:	d003      	beq.n	800128e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128a:	2b03      	cmp	r3, #3
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800128e:	4b3f      	ldr	r3, [pc, #252]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d109      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129e:	4b3b      	ldr	r3, [pc, #236]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e067      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012ae:	4b37      	ldr	r3, [pc, #220]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f023 0203 	bic.w	r2, r3, #3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4934      	ldr	r1, [pc, #208]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c0:	f7ff fcaa 	bl	8000c18 <HAL_GetTick>
 80012c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012c6:	e00a      	b.n	80012de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c8:	f7ff fca6 	bl	8000c18 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d901      	bls.n	80012de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e04f      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	4b2b      	ldr	r3, [pc, #172]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	f003 020c 	and.w	r2, r3, #12
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d1eb      	bne.n	80012c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f0:	4b25      	ldr	r3, [pc, #148]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d20c      	bcs.n	8001318 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b22      	ldr	r3, [pc, #136]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <HAL_RCC_ClockConfig+0x1b8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e032      	b.n	800137e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0304 	and.w	r3, r3, #4
 8001320:	2b00      	cmp	r3, #0
 8001322:	d008      	beq.n	8001336 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	4916      	ldr	r1, [pc, #88]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0308 	and.w	r3, r3, #8
 800133e:	2b00      	cmp	r3, #0
 8001340:	d009      	beq.n	8001356 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001342:	4b12      	ldr	r3, [pc, #72]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	691b      	ldr	r3, [r3, #16]
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	490e      	ldr	r1, [pc, #56]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001356:	f000 f855 	bl	8001404 <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_RCC_ClockConfig+0x1bc>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <HAL_RCC_ClockConfig+0x1c0>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	fa22 f303 	lsr.w	r3, r2, r3
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001372:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fc0a 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023c00 	.word	0x40023c00
 800138c:	40023800 	.word	0x40023800
 8001390:	08003218 	.word	0x08003218
 8001394:	20000000 	.word	0x20000000
 8001398:	20000004 	.word	0x20000004

0800139c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a0:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a2:	681b      	ldr	r3, [r3, #0]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr
 80013ae:	bf00      	nop
 80013b0:	20000000 	.word	0x20000000

080013b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b8:	f7ff fff0 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013bc:	4602      	mov	r2, r0
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	0a9b      	lsrs	r3, r3, #10
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	4903      	ldr	r1, [pc, #12]	@ (80013d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ca:	5ccb      	ldrb	r3, [r1, r3]
 80013cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40023800 	.word	0x40023800
 80013d8:	08003228 	.word	0x08003228

080013dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013e0:	f7ff ffdc 	bl	800139c <HAL_RCC_GetHCLKFreq>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	0b5b      	lsrs	r3, r3, #13
 80013ec:	f003 0307 	and.w	r3, r3, #7
 80013f0:	4903      	ldr	r1, [pc, #12]	@ (8001400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013f2:	5ccb      	ldrb	r3, [r1, r3]
 80013f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	08003228 	.word	0x08003228

08001404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001408:	b0ae      	sub	sp, #184	@ 0xb8
 800140a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800142a:	4bcb      	ldr	r3, [pc, #812]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 030c 	and.w	r3, r3, #12
 8001432:	2b0c      	cmp	r3, #12
 8001434:	f200 8206 	bhi.w	8001844 <HAL_RCC_GetSysClockFreq+0x440>
 8001438:	a201      	add	r2, pc, #4	@ (adr r2, 8001440 <HAL_RCC_GetSysClockFreq+0x3c>)
 800143a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800143e:	bf00      	nop
 8001440:	08001475 	.word	0x08001475
 8001444:	08001845 	.word	0x08001845
 8001448:	08001845 	.word	0x08001845
 800144c:	08001845 	.word	0x08001845
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001845 	.word	0x08001845
 8001458:	08001845 	.word	0x08001845
 800145c:	08001845 	.word	0x08001845
 8001460:	08001485 	.word	0x08001485
 8001464:	08001845 	.word	0x08001845
 8001468:	08001845 	.word	0x08001845
 800146c:	08001845 	.word	0x08001845
 8001470:	08001675 	.word	0x08001675
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001474:	4bb9      	ldr	r3, [pc, #740]	@ (800175c <HAL_RCC_GetSysClockFreq+0x358>)
 8001476:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800147a:	e1e7      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800147c:	4bb8      	ldr	r3, [pc, #736]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x35c>)
 800147e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001482:	e1e3      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001484:	4bb4      	ldr	r3, [pc, #720]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800148c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001490:	4bb1      	ldr	r3, [pc, #708]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d071      	beq.n	8001580 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800149c:	4bae      	ldr	r3, [pc, #696]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	099b      	lsrs	r3, r3, #6
 80014a2:	2200      	movs	r2, #0
 80014a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014a8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014be:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c2:	4622      	mov	r2, r4
 80014c4:	462b      	mov	r3, r5
 80014c6:	f04f 0000 	mov.w	r0, #0
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	0159      	lsls	r1, r3, #5
 80014d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014d4:	0150      	lsls	r0, r2, #5
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4621      	mov	r1, r4
 80014dc:	1a51      	subs	r1, r2, r1
 80014de:	6439      	str	r1, [r7, #64]	@ 0x40
 80014e0:	4629      	mov	r1, r5
 80014e2:	eb63 0301 	sbc.w	r3, r3, r1
 80014e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f04f 0300 	mov.w	r3, #0
 80014f0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80014f4:	4649      	mov	r1, r9
 80014f6:	018b      	lsls	r3, r1, #6
 80014f8:	4641      	mov	r1, r8
 80014fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014fe:	4641      	mov	r1, r8
 8001500:	018a      	lsls	r2, r1, #6
 8001502:	4641      	mov	r1, r8
 8001504:	1a51      	subs	r1, r2, r1
 8001506:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001508:	4649      	mov	r1, r9
 800150a:	eb63 0301 	sbc.w	r3, r3, r1
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001510:	f04f 0200 	mov.w	r2, #0
 8001514:	f04f 0300 	mov.w	r3, #0
 8001518:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800151c:	4649      	mov	r1, r9
 800151e:	00cb      	lsls	r3, r1, #3
 8001520:	4641      	mov	r1, r8
 8001522:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001526:	4641      	mov	r1, r8
 8001528:	00ca      	lsls	r2, r1, #3
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	4603      	mov	r3, r0
 8001530:	4622      	mov	r2, r4
 8001532:	189b      	adds	r3, r3, r2
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
 8001536:	462b      	mov	r3, r5
 8001538:	460a      	mov	r2, r1
 800153a:	eb42 0303 	adc.w	r3, r2, r3
 800153e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800154c:	4629      	mov	r1, r5
 800154e:	024b      	lsls	r3, r1, #9
 8001550:	4621      	mov	r1, r4
 8001552:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001556:	4621      	mov	r1, r4
 8001558:	024a      	lsls	r2, r1, #9
 800155a:	4610      	mov	r0, r2
 800155c:	4619      	mov	r1, r3
 800155e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001562:	2200      	movs	r2, #0
 8001564:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001568:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800156c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001570:	f7fe fe9e 	bl	80002b0 <__aeabi_uldivmod>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4613      	mov	r3, r2
 800157a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800157e:	e067      	b.n	8001650 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	099b      	lsrs	r3, r3, #6
 8001586:	2200      	movs	r2, #0
 8001588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800158c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001590:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001598:	67bb      	str	r3, [r7, #120]	@ 0x78
 800159a:	2300      	movs	r3, #0
 800159c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800159e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015a2:	4622      	mov	r2, r4
 80015a4:	462b      	mov	r3, r5
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 0100 	mov.w	r1, #0
 80015ae:	0159      	lsls	r1, r3, #5
 80015b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015b4:	0150      	lsls	r0, r2, #5
 80015b6:	4602      	mov	r2, r0
 80015b8:	460b      	mov	r3, r1
 80015ba:	4621      	mov	r1, r4
 80015bc:	1a51      	subs	r1, r2, r1
 80015be:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015c0:	4629      	mov	r1, r5
 80015c2:	eb63 0301 	sbc.w	r3, r3, r1
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	f04f 0300 	mov.w	r3, #0
 80015d0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80015d4:	4649      	mov	r1, r9
 80015d6:	018b      	lsls	r3, r1, #6
 80015d8:	4641      	mov	r1, r8
 80015da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015de:	4641      	mov	r1, r8
 80015e0:	018a      	lsls	r2, r1, #6
 80015e2:	4641      	mov	r1, r8
 80015e4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015e8:	4649      	mov	r1, r9
 80015ea:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015fa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015fe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001602:	4692      	mov	sl, r2
 8001604:	469b      	mov	fp, r3
 8001606:	4623      	mov	r3, r4
 8001608:	eb1a 0303 	adds.w	r3, sl, r3
 800160c:	623b      	str	r3, [r7, #32]
 800160e:	462b      	mov	r3, r5
 8001610:	eb4b 0303 	adc.w	r3, fp, r3
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	f04f 0300 	mov.w	r3, #0
 800161e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001622:	4629      	mov	r1, r5
 8001624:	028b      	lsls	r3, r1, #10
 8001626:	4621      	mov	r1, r4
 8001628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800162c:	4621      	mov	r1, r4
 800162e:	028a      	lsls	r2, r1, #10
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001638:	2200      	movs	r2, #0
 800163a:	673b      	str	r3, [r7, #112]	@ 0x70
 800163c:	677a      	str	r2, [r7, #116]	@ 0x74
 800163e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001642:	f7fe fe35 	bl	80002b0 <__aeabi_uldivmod>
 8001646:	4602      	mov	r2, r0
 8001648:	460b      	mov	r3, r1
 800164a:	4613      	mov	r3, r2
 800164c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001650:	4b41      	ldr	r3, [pc, #260]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	3301      	adds	r3, #1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001666:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800166a:	fbb2 f3f3 	udiv	r3, r2, r3
 800166e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001672:	e0eb      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001674:	4b38      	ldr	r3, [pc, #224]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800167c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001680:	4b35      	ldr	r3, [pc, #212]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d06b      	beq.n	8001764 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168c:	4b32      	ldr	r3, [pc, #200]	@ (8001758 <HAL_RCC_GetSysClockFreq+0x354>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	2200      	movs	r2, #0
 8001694:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001696:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001698:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800169a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169e:	663b      	str	r3, [r7, #96]	@ 0x60
 80016a0:	2300      	movs	r3, #0
 80016a2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016a4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016a8:	4622      	mov	r2, r4
 80016aa:	462b      	mov	r3, r5
 80016ac:	f04f 0000 	mov.w	r0, #0
 80016b0:	f04f 0100 	mov.w	r1, #0
 80016b4:	0159      	lsls	r1, r3, #5
 80016b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ba:	0150      	lsls	r0, r2, #5
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4621      	mov	r1, r4
 80016c2:	1a51      	subs	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	eb63 0301 	sbc.w	r3, r3, r1
 80016cc:	61fb      	str	r3, [r7, #28]
 80016ce:	f04f 0200 	mov.w	r2, #0
 80016d2:	f04f 0300 	mov.w	r3, #0
 80016d6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016da:	4659      	mov	r1, fp
 80016dc:	018b      	lsls	r3, r1, #6
 80016de:	4651      	mov	r1, sl
 80016e0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e4:	4651      	mov	r1, sl
 80016e6:	018a      	lsls	r2, r1, #6
 80016e8:	4651      	mov	r1, sl
 80016ea:	ebb2 0801 	subs.w	r8, r2, r1
 80016ee:	4659      	mov	r1, fp
 80016f0:	eb63 0901 	sbc.w	r9, r3, r1
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001700:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001704:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001708:	4690      	mov	r8, r2
 800170a:	4699      	mov	r9, r3
 800170c:	4623      	mov	r3, r4
 800170e:	eb18 0303 	adds.w	r3, r8, r3
 8001712:	613b      	str	r3, [r7, #16]
 8001714:	462b      	mov	r3, r5
 8001716:	eb49 0303 	adc.w	r3, r9, r3
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	f04f 0300 	mov.w	r3, #0
 8001724:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001728:	4629      	mov	r1, r5
 800172a:	024b      	lsls	r3, r1, #9
 800172c:	4621      	mov	r1, r4
 800172e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001732:	4621      	mov	r1, r4
 8001734:	024a      	lsls	r2, r1, #9
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800173e:	2200      	movs	r2, #0
 8001740:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001742:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001744:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001748:	f7fe fdb2 	bl	80002b0 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4613      	mov	r3, r2
 8001752:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001756:	e065      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x420>
 8001758:	40023800 	.word	0x40023800
 800175c:	00f42400 	.word	0x00f42400
 8001760:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001764:	4b3d      	ldr	r3, [pc, #244]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	099b      	lsrs	r3, r3, #6
 800176a:	2200      	movs	r2, #0
 800176c:	4618      	mov	r0, r3
 800176e:	4611      	mov	r1, r2
 8001770:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
 8001776:	2300      	movs	r3, #0
 8001778:	657b      	str	r3, [r7, #84]	@ 0x54
 800177a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800177e:	4642      	mov	r2, r8
 8001780:	464b      	mov	r3, r9
 8001782:	f04f 0000 	mov.w	r0, #0
 8001786:	f04f 0100 	mov.w	r1, #0
 800178a:	0159      	lsls	r1, r3, #5
 800178c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001790:	0150      	lsls	r0, r2, #5
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4641      	mov	r1, r8
 8001798:	1a51      	subs	r1, r2, r1
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	4649      	mov	r1, r9
 800179e:	eb63 0301 	sbc.w	r3, r3, r1
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	f04f 0300 	mov.w	r3, #0
 80017ac:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017b0:	4659      	mov	r1, fp
 80017b2:	018b      	lsls	r3, r1, #6
 80017b4:	4651      	mov	r1, sl
 80017b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ba:	4651      	mov	r1, sl
 80017bc:	018a      	lsls	r2, r1, #6
 80017be:	4651      	mov	r1, sl
 80017c0:	1a54      	subs	r4, r2, r1
 80017c2:	4659      	mov	r1, fp
 80017c4:	eb63 0501 	sbc.w	r5, r3, r1
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	f04f 0300 	mov.w	r3, #0
 80017d0:	00eb      	lsls	r3, r5, #3
 80017d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017d6:	00e2      	lsls	r2, r4, #3
 80017d8:	4614      	mov	r4, r2
 80017da:	461d      	mov	r5, r3
 80017dc:	4643      	mov	r3, r8
 80017de:	18e3      	adds	r3, r4, r3
 80017e0:	603b      	str	r3, [r7, #0]
 80017e2:	464b      	mov	r3, r9
 80017e4:	eb45 0303 	adc.w	r3, r5, r3
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017f6:	4629      	mov	r1, r5
 80017f8:	028b      	lsls	r3, r1, #10
 80017fa:	4621      	mov	r1, r4
 80017fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001800:	4621      	mov	r1, r4
 8001802:	028a      	lsls	r2, r1, #10
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800180c:	2200      	movs	r2, #0
 800180e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001810:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001812:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001816:	f7fe fd4b 	bl	80002b0 <__aeabi_uldivmod>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4613      	mov	r3, r2
 8001820:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001824:	4b0d      	ldr	r3, [pc, #52]	@ (800185c <HAL_RCC_GetSysClockFreq+0x458>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	0f1b      	lsrs	r3, r3, #28
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001832:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001836:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001842:	e003      	b.n	800184c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001846:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800184a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800184c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001850:	4618      	mov	r0, r3
 8001852:	37b8      	adds	r7, #184	@ 0xb8
 8001854:	46bd      	mov	sp, r7
 8001856:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800185a:	bf00      	nop
 800185c:	40023800 	.word	0x40023800
 8001860:	00f42400 	.word	0x00f42400

08001864 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e28d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 8083 	beq.w	800198a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001884:	4b94      	ldr	r3, [pc, #592]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b04      	cmp	r3, #4
 800188e:	d019      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001890:	4b91      	ldr	r3, [pc, #580]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
        || \
 8001898:	2b08      	cmp	r3, #8
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800189c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018a8:	d00c      	beq.n	80018c4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018aa:	4b8b      	ldr	r3, [pc, #556]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d112      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018b6:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018c2:	d10b      	bne.n	80018dc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c4:	4b84      	ldr	r3, [pc, #528]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d05b      	beq.n	8001988 <HAL_RCC_OscConfig+0x124>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d157      	bne.n	8001988 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e25a      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018e4:	d106      	bne.n	80018f4 <HAL_RCC_OscConfig+0x90>
 80018e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a7b      	ldr	r2, [pc, #492]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018f0:	6013      	str	r3, [r2, #0]
 80018f2:	e01d      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018fc:	d10c      	bne.n	8001918 <HAL_RCC_OscConfig+0xb4>
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001904:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	4b73      	ldr	r3, [pc, #460]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a72      	ldr	r2, [pc, #456]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001910:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e00b      	b.n	8001930 <HAL_RCC_OscConfig+0xcc>
 8001918:	4b6f      	ldr	r3, [pc, #444]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a6e      	ldr	r2, [pc, #440]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800191e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a6b      	ldr	r2, [pc, #428]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800192a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d013      	beq.n	8001960 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f7ff f96e 	bl	8000c18 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001940:	f7ff f96a 	bl	8000c18 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b64      	cmp	r3, #100	@ 0x64
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e21f      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001952:	4b61      	ldr	r3, [pc, #388]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d0f0      	beq.n	8001940 <HAL_RCC_OscConfig+0xdc>
 800195e:	e014      	b.n	800198a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff f95a 	bl	8000c18 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001968:	f7ff f956 	bl	8000c18 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b64      	cmp	r3, #100	@ 0x64
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e20b      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197a:	4b57      	ldr	r3, [pc, #348]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x104>
 8001986:	e000      	b.n	800198a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001988:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0302 	and.w	r3, r3, #2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06f      	beq.n	8001a76 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001996:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d017      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019a2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d105      	bne.n	80019ba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1d3      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff f903 	bl	8000c18 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff f8ff 	bl	8000c18 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1b4      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x278>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8e2 	bl	8000c18 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8de 	bl	8000c18 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e193      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f8c2 	bl	8000c18 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8be 	bl	8000c18 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e173      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_OscConfig+0x274>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x234>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x27c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abe:	f7ff f8ab 	bl	8000c18 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff f8a7 	bl	8000c18 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e15c      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b8a      	ldr	r3, [pc, #552]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b83      	ldr	r3, [pc, #524]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7f      	ldr	r3, [pc, #508]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a7e      	ldr	r2, [pc, #504]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b79      	ldr	r3, [pc, #484]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b76      	ldr	r3, [pc, #472]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a75      	ldr	r2, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff f867 	bl	8000c18 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff f863 	bl	8000c18 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e118      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6c      	ldr	r3, [pc, #432]	@ (8001d14 <HAL_RCC_OscConfig+0x4b0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x31e>
 8001b74:	4b66      	ldr	r3, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b78:	4a65      	ldr	r2, [pc, #404]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x340>
 8001b8a:	4b61      	ldr	r3, [pc, #388]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a60      	ldr	r2, [pc, #384]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	4b5e      	ldr	r3, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x358>
 8001ba4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a59      	ldr	r2, [pc, #356]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b57      	ldr	r3, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a56      	ldr	r2, [pc, #344]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f828 	bl	8000c18 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f824 	bl	8000c18 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0d7      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x368>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f812 	bl	8000c18 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff f80e 	bl	8000c18 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0c1      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b3b      	ldr	r3, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a3a      	ldr	r2, [pc, #232]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80ad 	beq.w	8001d90 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d060      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d145      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe ffe2 	bl	8000c18 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c58:	f7fe ffde 	bl	8000c18 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e093      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca0:	071b      	lsls	r3, r3, #28
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cae:	f7fe ffb3 	bl	8000c18 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe ffaf 	bl	8000c18 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e064      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x452>
 8001cd4:	e05c      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x4b4>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ff9c 	bl	8000c18 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ff98 	bl	8000c18 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04d      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x4ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x480>
 8001d02:	e045      	b.n	8001d90 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e040      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d9c <HAL_RCC_OscConfig+0x538>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d030      	beq.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d129      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d122      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d119      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d62:	085b      	lsrs	r3, r3, #1
 8001d64:	3b01      	subs	r3, #1
 8001d66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10f      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d107      	bne.n	8001d8c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d001      	beq.n	8001d90 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3718      	adds	r7, #24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e042      	b.n	8001e38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f7fe fdd6 	bl	8000978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2224      	movs	r2, #36	@ 0x24
 8001dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001de2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f82b 	bl	8001e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e44:	b0c0      	sub	sp, #256	@ 0x100
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	ea40 0301 	orr.w	r3, r0, r1
 8001e68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e6e:	689a      	ldr	r2, [r3, #8]
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e74:	691b      	ldr	r3, [r3, #16]
 8001e76:	431a      	orrs	r2, r3
 8001e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e7c:	695b      	ldr	r3, [r3, #20]
 8001e7e:	431a      	orrs	r2, r3
 8001e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e84:	69db      	ldr	r3, [r3, #28]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001e98:	f021 010c 	bic.w	r1, r1, #12
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001eba:	6999      	ldr	r1, [r3, #24]
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	ea40 0301 	orr.w	r3, r0, r1
 8001ec6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4b8f      	ldr	r3, [pc, #572]	@ (800210c <UART_SetConfig+0x2cc>)
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d005      	beq.n	8001ee0 <UART_SetConfig+0xa0>
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b8d      	ldr	r3, [pc, #564]	@ (8002110 <UART_SetConfig+0x2d0>)
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d104      	bne.n	8001eea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ee0:	f7ff fa7c 	bl	80013dc <HAL_RCC_GetPCLK2Freq>
 8001ee4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001ee8:	e003      	b.n	8001ef2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eea:	f7ff fa63 	bl	80013b4 <HAL_RCC_GetPCLK1Freq>
 8001eee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ef6:	69db      	ldr	r3, [r3, #28]
 8001ef8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001efc:	f040 810c 	bne.w	8002118 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f04:	2200      	movs	r2, #0
 8001f06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001f0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001f0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001f12:	4622      	mov	r2, r4
 8001f14:	462b      	mov	r3, r5
 8001f16:	1891      	adds	r1, r2, r2
 8001f18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001f1a:	415b      	adcs	r3, r3
 8001f1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001f1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001f22:	4621      	mov	r1, r4
 8001f24:	eb12 0801 	adds.w	r8, r2, r1
 8001f28:	4629      	mov	r1, r5
 8001f2a:	eb43 0901 	adc.w	r9, r3, r1
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f42:	4690      	mov	r8, r2
 8001f44:	4699      	mov	r9, r3
 8001f46:	4623      	mov	r3, r4
 8001f48:	eb18 0303 	adds.w	r3, r8, r3
 8001f4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001f50:	462b      	mov	r3, r5
 8001f52:	eb49 0303 	adc.w	r3, r9, r3
 8001f56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001f66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001f6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001f6e:	460b      	mov	r3, r1
 8001f70:	18db      	adds	r3, r3, r3
 8001f72:	653b      	str	r3, [r7, #80]	@ 0x50
 8001f74:	4613      	mov	r3, r2
 8001f76:	eb42 0303 	adc.w	r3, r2, r3
 8001f7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001f7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001f80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001f84:	f7fe f994 	bl	80002b0 <__aeabi_uldivmod>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	4b61      	ldr	r3, [pc, #388]	@ (8002114 <UART_SetConfig+0x2d4>)
 8001f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f92:	095b      	lsrs	r3, r3, #5
 8001f94:	011c      	lsls	r4, r3, #4
 8001f96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001fa0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001fa4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001fa8:	4642      	mov	r2, r8
 8001faa:	464b      	mov	r3, r9
 8001fac:	1891      	adds	r1, r2, r2
 8001fae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001fb0:	415b      	adcs	r3, r3
 8001fb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001fb8:	4641      	mov	r1, r8
 8001fba:	eb12 0a01 	adds.w	sl, r2, r1
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	f04f 0300 	mov.w	r3, #0
 8001fcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fd8:	4692      	mov	sl, r2
 8001fda:	469b      	mov	fp, r3
 8001fdc:	4643      	mov	r3, r8
 8001fde:	eb1a 0303 	adds.w	r3, sl, r3
 8001fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001fe6:	464b      	mov	r3, r9
 8001fe8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ffc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002000:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002004:	460b      	mov	r3, r1
 8002006:	18db      	adds	r3, r3, r3
 8002008:	643b      	str	r3, [r7, #64]	@ 0x40
 800200a:	4613      	mov	r3, r2
 800200c:	eb42 0303 	adc.w	r3, r2, r3
 8002010:	647b      	str	r3, [r7, #68]	@ 0x44
 8002012:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002016:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800201a:	f7fe f949 	bl	80002b0 <__aeabi_uldivmod>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4611      	mov	r1, r2
 8002024:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <UART_SetConfig+0x2d4>)
 8002026:	fba3 2301 	umull	r2, r3, r3, r1
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2264      	movs	r2, #100	@ 0x64
 800202e:	fb02 f303 	mul.w	r3, r2, r3
 8002032:	1acb      	subs	r3, r1, r3
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800203a:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <UART_SetConfig+0x2d4>)
 800203c:	fba3 2302 	umull	r2, r3, r3, r2
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002048:	441c      	add	r4, r3
 800204a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800204e:	2200      	movs	r2, #0
 8002050:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002054:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002058:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800205c:	4642      	mov	r2, r8
 800205e:	464b      	mov	r3, r9
 8002060:	1891      	adds	r1, r2, r2
 8002062:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002064:	415b      	adcs	r3, r3
 8002066:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002068:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800206c:	4641      	mov	r1, r8
 800206e:	1851      	adds	r1, r2, r1
 8002070:	6339      	str	r1, [r7, #48]	@ 0x30
 8002072:	4649      	mov	r1, r9
 8002074:	414b      	adcs	r3, r1
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	f04f 0300 	mov.w	r3, #0
 8002080:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002084:	4659      	mov	r1, fp
 8002086:	00cb      	lsls	r3, r1, #3
 8002088:	4651      	mov	r1, sl
 800208a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800208e:	4651      	mov	r1, sl
 8002090:	00ca      	lsls	r2, r1, #3
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	4603      	mov	r3, r0
 8002098:	4642      	mov	r2, r8
 800209a:	189b      	adds	r3, r3, r2
 800209c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80020a0:	464b      	mov	r3, r9
 80020a2:	460a      	mov	r2, r1
 80020a4:	eb42 0303 	adc.w	r3, r2, r3
 80020a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80020ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80020b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80020bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80020c0:	460b      	mov	r3, r1
 80020c2:	18db      	adds	r3, r3, r3
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c6:	4613      	mov	r3, r2
 80020c8:	eb42 0303 	adc.w	r3, r2, r3
 80020cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80020d6:	f7fe f8eb 	bl	80002b0 <__aeabi_uldivmod>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4b0d      	ldr	r3, [pc, #52]	@ (8002114 <UART_SetConfig+0x2d4>)
 80020e0:	fba3 1302 	umull	r1, r3, r3, r2
 80020e4:	095b      	lsrs	r3, r3, #5
 80020e6:	2164      	movs	r1, #100	@ 0x64
 80020e8:	fb01 f303 	mul.w	r3, r1, r3
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	3332      	adds	r3, #50	@ 0x32
 80020f2:	4a08      	ldr	r2, [pc, #32]	@ (8002114 <UART_SetConfig+0x2d4>)
 80020f4:	fba2 2303 	umull	r2, r3, r2, r3
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	f003 0207 	and.w	r2, r3, #7
 80020fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4422      	add	r2, r4
 8002106:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002108:	e106      	b.n	8002318 <UART_SetConfig+0x4d8>
 800210a:	bf00      	nop
 800210c:	40011000 	.word	0x40011000
 8002110:	40011400 	.word	0x40011400
 8002114:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800211c:	2200      	movs	r2, #0
 800211e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002122:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002126:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800212a:	4642      	mov	r2, r8
 800212c:	464b      	mov	r3, r9
 800212e:	1891      	adds	r1, r2, r2
 8002130:	6239      	str	r1, [r7, #32]
 8002132:	415b      	adcs	r3, r3
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
 8002136:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800213a:	4641      	mov	r1, r8
 800213c:	1854      	adds	r4, r2, r1
 800213e:	4649      	mov	r1, r9
 8002140:	eb43 0501 	adc.w	r5, r3, r1
 8002144:	f04f 0200 	mov.w	r2, #0
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	00eb      	lsls	r3, r5, #3
 800214e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002152:	00e2      	lsls	r2, r4, #3
 8002154:	4614      	mov	r4, r2
 8002156:	461d      	mov	r5, r3
 8002158:	4643      	mov	r3, r8
 800215a:	18e3      	adds	r3, r4, r3
 800215c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002160:	464b      	mov	r3, r9
 8002162:	eb45 0303 	adc.w	r3, r5, r3
 8002166:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800216a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002176:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002186:	4629      	mov	r1, r5
 8002188:	008b      	lsls	r3, r1, #2
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002190:	4621      	mov	r1, r4
 8002192:	008a      	lsls	r2, r1, #2
 8002194:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002198:	f7fe f88a 	bl	80002b0 <__aeabi_uldivmod>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4b60      	ldr	r3, [pc, #384]	@ (8002324 <UART_SetConfig+0x4e4>)
 80021a2:	fba3 2302 	umull	r2, r3, r3, r2
 80021a6:	095b      	lsrs	r3, r3, #5
 80021a8:	011c      	lsls	r4, r3, #4
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ae:	2200      	movs	r2, #0
 80021b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80021b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80021bc:	4642      	mov	r2, r8
 80021be:	464b      	mov	r3, r9
 80021c0:	1891      	adds	r1, r2, r2
 80021c2:	61b9      	str	r1, [r7, #24]
 80021c4:	415b      	adcs	r3, r3
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021cc:	4641      	mov	r1, r8
 80021ce:	1851      	adds	r1, r2, r1
 80021d0:	6139      	str	r1, [r7, #16]
 80021d2:	4649      	mov	r1, r9
 80021d4:	414b      	adcs	r3, r1
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	f04f 0200 	mov.w	r2, #0
 80021dc:	f04f 0300 	mov.w	r3, #0
 80021e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021e4:	4659      	mov	r1, fp
 80021e6:	00cb      	lsls	r3, r1, #3
 80021e8:	4651      	mov	r1, sl
 80021ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ee:	4651      	mov	r1, sl
 80021f0:	00ca      	lsls	r2, r1, #3
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	4603      	mov	r3, r0
 80021f8:	4642      	mov	r2, r8
 80021fa:	189b      	adds	r3, r3, r2
 80021fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002200:	464b      	mov	r3, r9
 8002202:	460a      	mov	r2, r1
 8002204:	eb42 0303 	adc.w	r3, r2, r3
 8002208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800220c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002216:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002218:	f04f 0200 	mov.w	r2, #0
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002224:	4649      	mov	r1, r9
 8002226:	008b      	lsls	r3, r1, #2
 8002228:	4641      	mov	r1, r8
 800222a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800222e:	4641      	mov	r1, r8
 8002230:	008a      	lsls	r2, r1, #2
 8002232:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002236:	f7fe f83b 	bl	80002b0 <__aeabi_uldivmod>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4611      	mov	r1, r2
 8002240:	4b38      	ldr	r3, [pc, #224]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002242:	fba3 2301 	umull	r2, r3, r3, r1
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2264      	movs	r2, #100	@ 0x64
 800224a:	fb02 f303 	mul.w	r3, r2, r3
 800224e:	1acb      	subs	r3, r1, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	@ 0x32
 8002254:	4a33      	ldr	r2, [pc, #204]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002260:	441c      	add	r4, r3
 8002262:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002266:	2200      	movs	r2, #0
 8002268:	673b      	str	r3, [r7, #112]	@ 0x70
 800226a:	677a      	str	r2, [r7, #116]	@ 0x74
 800226c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002270:	4642      	mov	r2, r8
 8002272:	464b      	mov	r3, r9
 8002274:	1891      	adds	r1, r2, r2
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	415b      	adcs	r3, r3
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002280:	4641      	mov	r1, r8
 8002282:	1851      	adds	r1, r2, r1
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	4649      	mov	r1, r9
 8002288:	414b      	adcs	r3, r1
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002298:	4659      	mov	r1, fp
 800229a:	00cb      	lsls	r3, r1, #3
 800229c:	4651      	mov	r1, sl
 800229e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022a2:	4651      	mov	r1, sl
 80022a4:	00ca      	lsls	r2, r1, #3
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	4603      	mov	r3, r0
 80022ac:	4642      	mov	r2, r8
 80022ae:	189b      	adds	r3, r3, r2
 80022b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80022b2:	464b      	mov	r3, r9
 80022b4:	460a      	mov	r2, r1
 80022b6:	eb42 0303 	adc.w	r3, r2, r3
 80022ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80022bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80022c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80022c8:	f04f 0200 	mov.w	r2, #0
 80022cc:	f04f 0300 	mov.w	r3, #0
 80022d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80022d4:	4649      	mov	r1, r9
 80022d6:	008b      	lsls	r3, r1, #2
 80022d8:	4641      	mov	r1, r8
 80022da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022de:	4641      	mov	r1, r8
 80022e0:	008a      	lsls	r2, r1, #2
 80022e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80022e6:	f7fd ffe3 	bl	80002b0 <__aeabi_uldivmod>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002324 <UART_SetConfig+0x4e4>)
 80022f0:	fba3 1302 	umull	r1, r3, r3, r2
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	2164      	movs	r1, #100	@ 0x64
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	3332      	adds	r3, #50	@ 0x32
 8002302:	4a08      	ldr	r2, [pc, #32]	@ (8002324 <UART_SetConfig+0x4e4>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	095b      	lsrs	r3, r3, #5
 800230a:	f003 020f 	and.w	r2, r3, #15
 800230e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4422      	add	r2, r4
 8002316:	609a      	str	r2, [r3, #8]
}
 8002318:	bf00      	nop
 800231a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800231e:	46bd      	mov	sp, r7
 8002320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002324:	51eb851f 	.word	0x51eb851f

08002328 <std>:
 8002328:	2300      	movs	r3, #0
 800232a:	b510      	push	{r4, lr}
 800232c:	4604      	mov	r4, r0
 800232e:	e9c0 3300 	strd	r3, r3, [r0]
 8002332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002336:	6083      	str	r3, [r0, #8]
 8002338:	8181      	strh	r1, [r0, #12]
 800233a:	6643      	str	r3, [r0, #100]	@ 0x64
 800233c:	81c2      	strh	r2, [r0, #14]
 800233e:	6183      	str	r3, [r0, #24]
 8002340:	4619      	mov	r1, r3
 8002342:	2208      	movs	r2, #8
 8002344:	305c      	adds	r0, #92	@ 0x5c
 8002346:	f000 f906 	bl	8002556 <memset>
 800234a:	4b0d      	ldr	r3, [pc, #52]	@ (8002380 <std+0x58>)
 800234c:	6263      	str	r3, [r4, #36]	@ 0x24
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <std+0x5c>)
 8002350:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002352:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <std+0x60>)
 8002354:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002356:	4b0d      	ldr	r3, [pc, #52]	@ (800238c <std+0x64>)
 8002358:	6323      	str	r3, [r4, #48]	@ 0x30
 800235a:	4b0d      	ldr	r3, [pc, #52]	@ (8002390 <std+0x68>)
 800235c:	6224      	str	r4, [r4, #32]
 800235e:	429c      	cmp	r4, r3
 8002360:	d006      	beq.n	8002370 <std+0x48>
 8002362:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002366:	4294      	cmp	r4, r2
 8002368:	d002      	beq.n	8002370 <std+0x48>
 800236a:	33d0      	adds	r3, #208	@ 0xd0
 800236c:	429c      	cmp	r4, r3
 800236e:	d105      	bne.n	800237c <std+0x54>
 8002370:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002378:	f000 b966 	b.w	8002648 <__retarget_lock_init_recursive>
 800237c:	bd10      	pop	{r4, pc}
 800237e:	bf00      	nop
 8002380:	080024d1 	.word	0x080024d1
 8002384:	080024f3 	.word	0x080024f3
 8002388:	0800252b 	.word	0x0800252b
 800238c:	0800254f 	.word	0x0800254f
 8002390:	200000d4 	.word	0x200000d4

08002394 <stdio_exit_handler>:
 8002394:	4a02      	ldr	r2, [pc, #8]	@ (80023a0 <stdio_exit_handler+0xc>)
 8002396:	4903      	ldr	r1, [pc, #12]	@ (80023a4 <stdio_exit_handler+0x10>)
 8002398:	4803      	ldr	r0, [pc, #12]	@ (80023a8 <stdio_exit_handler+0x14>)
 800239a:	f000 b869 	b.w	8002470 <_fwalk_sglue>
 800239e:	bf00      	nop
 80023a0:	2000000c 	.word	0x2000000c
 80023a4:	08002ee9 	.word	0x08002ee9
 80023a8:	2000001c 	.word	0x2000001c

080023ac <cleanup_stdio>:
 80023ac:	6841      	ldr	r1, [r0, #4]
 80023ae:	4b0c      	ldr	r3, [pc, #48]	@ (80023e0 <cleanup_stdio+0x34>)
 80023b0:	4299      	cmp	r1, r3
 80023b2:	b510      	push	{r4, lr}
 80023b4:	4604      	mov	r4, r0
 80023b6:	d001      	beq.n	80023bc <cleanup_stdio+0x10>
 80023b8:	f000 fd96 	bl	8002ee8 <_fflush_r>
 80023bc:	68a1      	ldr	r1, [r4, #8]
 80023be:	4b09      	ldr	r3, [pc, #36]	@ (80023e4 <cleanup_stdio+0x38>)
 80023c0:	4299      	cmp	r1, r3
 80023c2:	d002      	beq.n	80023ca <cleanup_stdio+0x1e>
 80023c4:	4620      	mov	r0, r4
 80023c6:	f000 fd8f 	bl	8002ee8 <_fflush_r>
 80023ca:	68e1      	ldr	r1, [r4, #12]
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <cleanup_stdio+0x3c>)
 80023ce:	4299      	cmp	r1, r3
 80023d0:	d004      	beq.n	80023dc <cleanup_stdio+0x30>
 80023d2:	4620      	mov	r0, r4
 80023d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80023d8:	f000 bd86 	b.w	8002ee8 <_fflush_r>
 80023dc:	bd10      	pop	{r4, pc}
 80023de:	bf00      	nop
 80023e0:	200000d4 	.word	0x200000d4
 80023e4:	2000013c 	.word	0x2000013c
 80023e8:	200001a4 	.word	0x200001a4

080023ec <global_stdio_init.part.0>:
 80023ec:	b510      	push	{r4, lr}
 80023ee:	4b0b      	ldr	r3, [pc, #44]	@ (800241c <global_stdio_init.part.0+0x30>)
 80023f0:	4c0b      	ldr	r4, [pc, #44]	@ (8002420 <global_stdio_init.part.0+0x34>)
 80023f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <global_stdio_init.part.0+0x38>)
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4620      	mov	r0, r4
 80023f8:	2200      	movs	r2, #0
 80023fa:	2104      	movs	r1, #4
 80023fc:	f7ff ff94 	bl	8002328 <std>
 8002400:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002404:	2201      	movs	r2, #1
 8002406:	2109      	movs	r1, #9
 8002408:	f7ff ff8e 	bl	8002328 <std>
 800240c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002410:	2202      	movs	r2, #2
 8002412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002416:	2112      	movs	r1, #18
 8002418:	f7ff bf86 	b.w	8002328 <std>
 800241c:	2000020c 	.word	0x2000020c
 8002420:	200000d4 	.word	0x200000d4
 8002424:	08002395 	.word	0x08002395

08002428 <__sfp_lock_acquire>:
 8002428:	4801      	ldr	r0, [pc, #4]	@ (8002430 <__sfp_lock_acquire+0x8>)
 800242a:	f000 b90e 	b.w	800264a <__retarget_lock_acquire_recursive>
 800242e:	bf00      	nop
 8002430:	20000215 	.word	0x20000215

08002434 <__sfp_lock_release>:
 8002434:	4801      	ldr	r0, [pc, #4]	@ (800243c <__sfp_lock_release+0x8>)
 8002436:	f000 b909 	b.w	800264c <__retarget_lock_release_recursive>
 800243a:	bf00      	nop
 800243c:	20000215 	.word	0x20000215

08002440 <__sinit>:
 8002440:	b510      	push	{r4, lr}
 8002442:	4604      	mov	r4, r0
 8002444:	f7ff fff0 	bl	8002428 <__sfp_lock_acquire>
 8002448:	6a23      	ldr	r3, [r4, #32]
 800244a:	b11b      	cbz	r3, 8002454 <__sinit+0x14>
 800244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002450:	f7ff bff0 	b.w	8002434 <__sfp_lock_release>
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__sinit+0x28>)
 8002456:	6223      	str	r3, [r4, #32]
 8002458:	4b04      	ldr	r3, [pc, #16]	@ (800246c <__sinit+0x2c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f5      	bne.n	800244c <__sinit+0xc>
 8002460:	f7ff ffc4 	bl	80023ec <global_stdio_init.part.0>
 8002464:	e7f2      	b.n	800244c <__sinit+0xc>
 8002466:	bf00      	nop
 8002468:	080023ad 	.word	0x080023ad
 800246c:	2000020c 	.word	0x2000020c

08002470 <_fwalk_sglue>:
 8002470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002474:	4607      	mov	r7, r0
 8002476:	4688      	mov	r8, r1
 8002478:	4614      	mov	r4, r2
 800247a:	2600      	movs	r6, #0
 800247c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002480:	f1b9 0901 	subs.w	r9, r9, #1
 8002484:	d505      	bpl.n	8002492 <_fwalk_sglue+0x22>
 8002486:	6824      	ldr	r4, [r4, #0]
 8002488:	2c00      	cmp	r4, #0
 800248a:	d1f7      	bne.n	800247c <_fwalk_sglue+0xc>
 800248c:	4630      	mov	r0, r6
 800248e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002492:	89ab      	ldrh	r3, [r5, #12]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d907      	bls.n	80024a8 <_fwalk_sglue+0x38>
 8002498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800249c:	3301      	adds	r3, #1
 800249e:	d003      	beq.n	80024a8 <_fwalk_sglue+0x38>
 80024a0:	4629      	mov	r1, r5
 80024a2:	4638      	mov	r0, r7
 80024a4:	47c0      	blx	r8
 80024a6:	4306      	orrs	r6, r0
 80024a8:	3568      	adds	r5, #104	@ 0x68
 80024aa:	e7e9      	b.n	8002480 <_fwalk_sglue+0x10>

080024ac <iprintf>:
 80024ac:	b40f      	push	{r0, r1, r2, r3}
 80024ae:	b507      	push	{r0, r1, r2, lr}
 80024b0:	4906      	ldr	r1, [pc, #24]	@ (80024cc <iprintf+0x20>)
 80024b2:	ab04      	add	r3, sp, #16
 80024b4:	6808      	ldr	r0, [r1, #0]
 80024b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80024ba:	6881      	ldr	r1, [r0, #8]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	f000 f9e9 	bl	8002894 <_vfiprintf_r>
 80024c2:	b003      	add	sp, #12
 80024c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80024c8:	b004      	add	sp, #16
 80024ca:	4770      	bx	lr
 80024cc:	20000018 	.word	0x20000018

080024d0 <__sread>:
 80024d0:	b510      	push	{r4, lr}
 80024d2:	460c      	mov	r4, r1
 80024d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d8:	f000 f868 	bl	80025ac <_read_r>
 80024dc:	2800      	cmp	r0, #0
 80024de:	bfab      	itete	ge
 80024e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80024e2:	89a3      	ldrhlt	r3, [r4, #12]
 80024e4:	181b      	addge	r3, r3, r0
 80024e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80024ea:	bfac      	ite	ge
 80024ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80024ee:	81a3      	strhlt	r3, [r4, #12]
 80024f0:	bd10      	pop	{r4, pc}

080024f2 <__swrite>:
 80024f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f6:	461f      	mov	r7, r3
 80024f8:	898b      	ldrh	r3, [r1, #12]
 80024fa:	05db      	lsls	r3, r3, #23
 80024fc:	4605      	mov	r5, r0
 80024fe:	460c      	mov	r4, r1
 8002500:	4616      	mov	r6, r2
 8002502:	d505      	bpl.n	8002510 <__swrite+0x1e>
 8002504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002508:	2302      	movs	r3, #2
 800250a:	2200      	movs	r2, #0
 800250c:	f000 f83c 	bl	8002588 <_lseek_r>
 8002510:	89a3      	ldrh	r3, [r4, #12]
 8002512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002516:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800251a:	81a3      	strh	r3, [r4, #12]
 800251c:	4632      	mov	r2, r6
 800251e:	463b      	mov	r3, r7
 8002520:	4628      	mov	r0, r5
 8002522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002526:	f000 b853 	b.w	80025d0 <_write_r>

0800252a <__sseek>:
 800252a:	b510      	push	{r4, lr}
 800252c:	460c      	mov	r4, r1
 800252e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002532:	f000 f829 	bl	8002588 <_lseek_r>
 8002536:	1c43      	adds	r3, r0, #1
 8002538:	89a3      	ldrh	r3, [r4, #12]
 800253a:	bf15      	itete	ne
 800253c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800253e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002542:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002546:	81a3      	strheq	r3, [r4, #12]
 8002548:	bf18      	it	ne
 800254a:	81a3      	strhne	r3, [r4, #12]
 800254c:	bd10      	pop	{r4, pc}

0800254e <__sclose>:
 800254e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002552:	f000 b809 	b.w	8002568 <_close_r>

08002556 <memset>:
 8002556:	4402      	add	r2, r0
 8002558:	4603      	mov	r3, r0
 800255a:	4293      	cmp	r3, r2
 800255c:	d100      	bne.n	8002560 <memset+0xa>
 800255e:	4770      	bx	lr
 8002560:	f803 1b01 	strb.w	r1, [r3], #1
 8002564:	e7f9      	b.n	800255a <memset+0x4>
	...

08002568 <_close_r>:
 8002568:	b538      	push	{r3, r4, r5, lr}
 800256a:	4d06      	ldr	r5, [pc, #24]	@ (8002584 <_close_r+0x1c>)
 800256c:	2300      	movs	r3, #0
 800256e:	4604      	mov	r4, r0
 8002570:	4608      	mov	r0, r1
 8002572:	602b      	str	r3, [r5, #0]
 8002574:	f000 fe08 	bl	8003188 <_close>
 8002578:	1c43      	adds	r3, r0, #1
 800257a:	d102      	bne.n	8002582 <_close_r+0x1a>
 800257c:	682b      	ldr	r3, [r5, #0]
 800257e:	b103      	cbz	r3, 8002582 <_close_r+0x1a>
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	bd38      	pop	{r3, r4, r5, pc}
 8002584:	20000210 	.word	0x20000210

08002588 <_lseek_r>:
 8002588:	b538      	push	{r3, r4, r5, lr}
 800258a:	4d07      	ldr	r5, [pc, #28]	@ (80025a8 <_lseek_r+0x20>)
 800258c:	4604      	mov	r4, r0
 800258e:	4608      	mov	r0, r1
 8002590:	4611      	mov	r1, r2
 8002592:	2200      	movs	r2, #0
 8002594:	602a      	str	r2, [r5, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f000 fe0e 	bl	80031b8 <_lseek>
 800259c:	1c43      	adds	r3, r0, #1
 800259e:	d102      	bne.n	80025a6 <_lseek_r+0x1e>
 80025a0:	682b      	ldr	r3, [r5, #0]
 80025a2:	b103      	cbz	r3, 80025a6 <_lseek_r+0x1e>
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	bd38      	pop	{r3, r4, r5, pc}
 80025a8:	20000210 	.word	0x20000210

080025ac <_read_r>:
 80025ac:	b538      	push	{r3, r4, r5, lr}
 80025ae:	4d07      	ldr	r5, [pc, #28]	@ (80025cc <_read_r+0x20>)
 80025b0:	4604      	mov	r4, r0
 80025b2:	4608      	mov	r0, r1
 80025b4:	4611      	mov	r1, r2
 80025b6:	2200      	movs	r2, #0
 80025b8:	602a      	str	r2, [r5, #0]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f000 fe04 	bl	80031c8 <_read>
 80025c0:	1c43      	adds	r3, r0, #1
 80025c2:	d102      	bne.n	80025ca <_read_r+0x1e>
 80025c4:	682b      	ldr	r3, [r5, #0]
 80025c6:	b103      	cbz	r3, 80025ca <_read_r+0x1e>
 80025c8:	6023      	str	r3, [r4, #0]
 80025ca:	bd38      	pop	{r3, r4, r5, pc}
 80025cc:	20000210 	.word	0x20000210

080025d0 <_write_r>:
 80025d0:	b538      	push	{r3, r4, r5, lr}
 80025d2:	4d07      	ldr	r5, [pc, #28]	@ (80025f0 <_write_r+0x20>)
 80025d4:	4604      	mov	r4, r0
 80025d6:	4608      	mov	r0, r1
 80025d8:	4611      	mov	r1, r2
 80025da:	2200      	movs	r2, #0
 80025dc:	602a      	str	r2, [r5, #0]
 80025de:	461a      	mov	r2, r3
 80025e0:	f7fe f980 	bl	80008e4 <_write>
 80025e4:	1c43      	adds	r3, r0, #1
 80025e6:	d102      	bne.n	80025ee <_write_r+0x1e>
 80025e8:	682b      	ldr	r3, [r5, #0]
 80025ea:	b103      	cbz	r3, 80025ee <_write_r+0x1e>
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	bd38      	pop	{r3, r4, r5, pc}
 80025f0:	20000210 	.word	0x20000210

080025f4 <__errno>:
 80025f4:	4b01      	ldr	r3, [pc, #4]	@ (80025fc <__errno+0x8>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	20000018 	.word	0x20000018

08002600 <__libc_init_array>:
 8002600:	b570      	push	{r4, r5, r6, lr}
 8002602:	4d0d      	ldr	r5, [pc, #52]	@ (8002638 <__libc_init_array+0x38>)
 8002604:	4c0d      	ldr	r4, [pc, #52]	@ (800263c <__libc_init_array+0x3c>)
 8002606:	1b64      	subs	r4, r4, r5
 8002608:	10a4      	asrs	r4, r4, #2
 800260a:	2600      	movs	r6, #0
 800260c:	42a6      	cmp	r6, r4
 800260e:	d109      	bne.n	8002624 <__libc_init_array+0x24>
 8002610:	4d0b      	ldr	r5, [pc, #44]	@ (8002640 <__libc_init_array+0x40>)
 8002612:	4c0c      	ldr	r4, [pc, #48]	@ (8002644 <__libc_init_array+0x44>)
 8002614:	f000 fde0 	bl	80031d8 <_init>
 8002618:	1b64      	subs	r4, r4, r5
 800261a:	10a4      	asrs	r4, r4, #2
 800261c:	2600      	movs	r6, #0
 800261e:	42a6      	cmp	r6, r4
 8002620:	d105      	bne.n	800262e <__libc_init_array+0x2e>
 8002622:	bd70      	pop	{r4, r5, r6, pc}
 8002624:	f855 3b04 	ldr.w	r3, [r5], #4
 8002628:	4798      	blx	r3
 800262a:	3601      	adds	r6, #1
 800262c:	e7ee      	b.n	800260c <__libc_init_array+0xc>
 800262e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002632:	4798      	blx	r3
 8002634:	3601      	adds	r6, #1
 8002636:	e7f2      	b.n	800261e <__libc_init_array+0x1e>
 8002638:	0800326c 	.word	0x0800326c
 800263c:	0800326c 	.word	0x0800326c
 8002640:	0800326c 	.word	0x0800326c
 8002644:	08003270 	.word	0x08003270

08002648 <__retarget_lock_init_recursive>:
 8002648:	4770      	bx	lr

0800264a <__retarget_lock_acquire_recursive>:
 800264a:	4770      	bx	lr

0800264c <__retarget_lock_release_recursive>:
 800264c:	4770      	bx	lr
	...

08002650 <_free_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	4605      	mov	r5, r0
 8002654:	2900      	cmp	r1, #0
 8002656:	d041      	beq.n	80026dc <_free_r+0x8c>
 8002658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800265c:	1f0c      	subs	r4, r1, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	bfb8      	it	lt
 8002662:	18e4      	addlt	r4, r4, r3
 8002664:	f000 f8e0 	bl	8002828 <__malloc_lock>
 8002668:	4a1d      	ldr	r2, [pc, #116]	@ (80026e0 <_free_r+0x90>)
 800266a:	6813      	ldr	r3, [r2, #0]
 800266c:	b933      	cbnz	r3, 800267c <_free_r+0x2c>
 800266e:	6063      	str	r3, [r4, #4]
 8002670:	6014      	str	r4, [r2, #0]
 8002672:	4628      	mov	r0, r5
 8002674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002678:	f000 b8dc 	b.w	8002834 <__malloc_unlock>
 800267c:	42a3      	cmp	r3, r4
 800267e:	d908      	bls.n	8002692 <_free_r+0x42>
 8002680:	6820      	ldr	r0, [r4, #0]
 8002682:	1821      	adds	r1, r4, r0
 8002684:	428b      	cmp	r3, r1
 8002686:	bf01      	itttt	eq
 8002688:	6819      	ldreq	r1, [r3, #0]
 800268a:	685b      	ldreq	r3, [r3, #4]
 800268c:	1809      	addeq	r1, r1, r0
 800268e:	6021      	streq	r1, [r4, #0]
 8002690:	e7ed      	b.n	800266e <_free_r+0x1e>
 8002692:	461a      	mov	r2, r3
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	b10b      	cbz	r3, 800269c <_free_r+0x4c>
 8002698:	42a3      	cmp	r3, r4
 800269a:	d9fa      	bls.n	8002692 <_free_r+0x42>
 800269c:	6811      	ldr	r1, [r2, #0]
 800269e:	1850      	adds	r0, r2, r1
 80026a0:	42a0      	cmp	r0, r4
 80026a2:	d10b      	bne.n	80026bc <_free_r+0x6c>
 80026a4:	6820      	ldr	r0, [r4, #0]
 80026a6:	4401      	add	r1, r0
 80026a8:	1850      	adds	r0, r2, r1
 80026aa:	4283      	cmp	r3, r0
 80026ac:	6011      	str	r1, [r2, #0]
 80026ae:	d1e0      	bne.n	8002672 <_free_r+0x22>
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	6053      	str	r3, [r2, #4]
 80026b6:	4408      	add	r0, r1
 80026b8:	6010      	str	r0, [r2, #0]
 80026ba:	e7da      	b.n	8002672 <_free_r+0x22>
 80026bc:	d902      	bls.n	80026c4 <_free_r+0x74>
 80026be:	230c      	movs	r3, #12
 80026c0:	602b      	str	r3, [r5, #0]
 80026c2:	e7d6      	b.n	8002672 <_free_r+0x22>
 80026c4:	6820      	ldr	r0, [r4, #0]
 80026c6:	1821      	adds	r1, r4, r0
 80026c8:	428b      	cmp	r3, r1
 80026ca:	bf04      	itt	eq
 80026cc:	6819      	ldreq	r1, [r3, #0]
 80026ce:	685b      	ldreq	r3, [r3, #4]
 80026d0:	6063      	str	r3, [r4, #4]
 80026d2:	bf04      	itt	eq
 80026d4:	1809      	addeq	r1, r1, r0
 80026d6:	6021      	streq	r1, [r4, #0]
 80026d8:	6054      	str	r4, [r2, #4]
 80026da:	e7ca      	b.n	8002672 <_free_r+0x22>
 80026dc:	bd38      	pop	{r3, r4, r5, pc}
 80026de:	bf00      	nop
 80026e0:	2000021c 	.word	0x2000021c

080026e4 <sbrk_aligned>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	4e0f      	ldr	r6, [pc, #60]	@ (8002724 <sbrk_aligned+0x40>)
 80026e8:	460c      	mov	r4, r1
 80026ea:	6831      	ldr	r1, [r6, #0]
 80026ec:	4605      	mov	r5, r0
 80026ee:	b911      	cbnz	r1, 80026f6 <sbrk_aligned+0x12>
 80026f0:	f000 fcb6 	bl	8003060 <_sbrk_r>
 80026f4:	6030      	str	r0, [r6, #0]
 80026f6:	4621      	mov	r1, r4
 80026f8:	4628      	mov	r0, r5
 80026fa:	f000 fcb1 	bl	8003060 <_sbrk_r>
 80026fe:	1c43      	adds	r3, r0, #1
 8002700:	d103      	bne.n	800270a <sbrk_aligned+0x26>
 8002702:	f04f 34ff 	mov.w	r4, #4294967295
 8002706:	4620      	mov	r0, r4
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	1cc4      	adds	r4, r0, #3
 800270c:	f024 0403 	bic.w	r4, r4, #3
 8002710:	42a0      	cmp	r0, r4
 8002712:	d0f8      	beq.n	8002706 <sbrk_aligned+0x22>
 8002714:	1a21      	subs	r1, r4, r0
 8002716:	4628      	mov	r0, r5
 8002718:	f000 fca2 	bl	8003060 <_sbrk_r>
 800271c:	3001      	adds	r0, #1
 800271e:	d1f2      	bne.n	8002706 <sbrk_aligned+0x22>
 8002720:	e7ef      	b.n	8002702 <sbrk_aligned+0x1e>
 8002722:	bf00      	nop
 8002724:	20000218 	.word	0x20000218

08002728 <_malloc_r>:
 8002728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800272c:	1ccd      	adds	r5, r1, #3
 800272e:	f025 0503 	bic.w	r5, r5, #3
 8002732:	3508      	adds	r5, #8
 8002734:	2d0c      	cmp	r5, #12
 8002736:	bf38      	it	cc
 8002738:	250c      	movcc	r5, #12
 800273a:	2d00      	cmp	r5, #0
 800273c:	4606      	mov	r6, r0
 800273e:	db01      	blt.n	8002744 <_malloc_r+0x1c>
 8002740:	42a9      	cmp	r1, r5
 8002742:	d904      	bls.n	800274e <_malloc_r+0x26>
 8002744:	230c      	movs	r3, #12
 8002746:	6033      	str	r3, [r6, #0]
 8002748:	2000      	movs	r0, #0
 800274a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800274e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002824 <_malloc_r+0xfc>
 8002752:	f000 f869 	bl	8002828 <__malloc_lock>
 8002756:	f8d8 3000 	ldr.w	r3, [r8]
 800275a:	461c      	mov	r4, r3
 800275c:	bb44      	cbnz	r4, 80027b0 <_malloc_r+0x88>
 800275e:	4629      	mov	r1, r5
 8002760:	4630      	mov	r0, r6
 8002762:	f7ff ffbf 	bl	80026e4 <sbrk_aligned>
 8002766:	1c43      	adds	r3, r0, #1
 8002768:	4604      	mov	r4, r0
 800276a:	d158      	bne.n	800281e <_malloc_r+0xf6>
 800276c:	f8d8 4000 	ldr.w	r4, [r8]
 8002770:	4627      	mov	r7, r4
 8002772:	2f00      	cmp	r7, #0
 8002774:	d143      	bne.n	80027fe <_malloc_r+0xd6>
 8002776:	2c00      	cmp	r4, #0
 8002778:	d04b      	beq.n	8002812 <_malloc_r+0xea>
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	4639      	mov	r1, r7
 800277e:	4630      	mov	r0, r6
 8002780:	eb04 0903 	add.w	r9, r4, r3
 8002784:	f000 fc6c 	bl	8003060 <_sbrk_r>
 8002788:	4581      	cmp	r9, r0
 800278a:	d142      	bne.n	8002812 <_malloc_r+0xea>
 800278c:	6821      	ldr	r1, [r4, #0]
 800278e:	1a6d      	subs	r5, r5, r1
 8002790:	4629      	mov	r1, r5
 8002792:	4630      	mov	r0, r6
 8002794:	f7ff ffa6 	bl	80026e4 <sbrk_aligned>
 8002798:	3001      	adds	r0, #1
 800279a:	d03a      	beq.n	8002812 <_malloc_r+0xea>
 800279c:	6823      	ldr	r3, [r4, #0]
 800279e:	442b      	add	r3, r5
 80027a0:	6023      	str	r3, [r4, #0]
 80027a2:	f8d8 3000 	ldr.w	r3, [r8]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	bb62      	cbnz	r2, 8002804 <_malloc_r+0xdc>
 80027aa:	f8c8 7000 	str.w	r7, [r8]
 80027ae:	e00f      	b.n	80027d0 <_malloc_r+0xa8>
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	1b52      	subs	r2, r2, r5
 80027b4:	d420      	bmi.n	80027f8 <_malloc_r+0xd0>
 80027b6:	2a0b      	cmp	r2, #11
 80027b8:	d917      	bls.n	80027ea <_malloc_r+0xc2>
 80027ba:	1961      	adds	r1, r4, r5
 80027bc:	42a3      	cmp	r3, r4
 80027be:	6025      	str	r5, [r4, #0]
 80027c0:	bf18      	it	ne
 80027c2:	6059      	strne	r1, [r3, #4]
 80027c4:	6863      	ldr	r3, [r4, #4]
 80027c6:	bf08      	it	eq
 80027c8:	f8c8 1000 	streq.w	r1, [r8]
 80027cc:	5162      	str	r2, [r4, r5]
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	4630      	mov	r0, r6
 80027d2:	f000 f82f 	bl	8002834 <__malloc_unlock>
 80027d6:	f104 000b 	add.w	r0, r4, #11
 80027da:	1d23      	adds	r3, r4, #4
 80027dc:	f020 0007 	bic.w	r0, r0, #7
 80027e0:	1ac2      	subs	r2, r0, r3
 80027e2:	bf1c      	itt	ne
 80027e4:	1a1b      	subne	r3, r3, r0
 80027e6:	50a3      	strne	r3, [r4, r2]
 80027e8:	e7af      	b.n	800274a <_malloc_r+0x22>
 80027ea:	6862      	ldr	r2, [r4, #4]
 80027ec:	42a3      	cmp	r3, r4
 80027ee:	bf0c      	ite	eq
 80027f0:	f8c8 2000 	streq.w	r2, [r8]
 80027f4:	605a      	strne	r2, [r3, #4]
 80027f6:	e7eb      	b.n	80027d0 <_malloc_r+0xa8>
 80027f8:	4623      	mov	r3, r4
 80027fa:	6864      	ldr	r4, [r4, #4]
 80027fc:	e7ae      	b.n	800275c <_malloc_r+0x34>
 80027fe:	463c      	mov	r4, r7
 8002800:	687f      	ldr	r7, [r7, #4]
 8002802:	e7b6      	b.n	8002772 <_malloc_r+0x4a>
 8002804:	461a      	mov	r2, r3
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	42a3      	cmp	r3, r4
 800280a:	d1fb      	bne.n	8002804 <_malloc_r+0xdc>
 800280c:	2300      	movs	r3, #0
 800280e:	6053      	str	r3, [r2, #4]
 8002810:	e7de      	b.n	80027d0 <_malloc_r+0xa8>
 8002812:	230c      	movs	r3, #12
 8002814:	6033      	str	r3, [r6, #0]
 8002816:	4630      	mov	r0, r6
 8002818:	f000 f80c 	bl	8002834 <__malloc_unlock>
 800281c:	e794      	b.n	8002748 <_malloc_r+0x20>
 800281e:	6005      	str	r5, [r0, #0]
 8002820:	e7d6      	b.n	80027d0 <_malloc_r+0xa8>
 8002822:	bf00      	nop
 8002824:	2000021c 	.word	0x2000021c

08002828 <__malloc_lock>:
 8002828:	4801      	ldr	r0, [pc, #4]	@ (8002830 <__malloc_lock+0x8>)
 800282a:	f7ff bf0e 	b.w	800264a <__retarget_lock_acquire_recursive>
 800282e:	bf00      	nop
 8002830:	20000214 	.word	0x20000214

08002834 <__malloc_unlock>:
 8002834:	4801      	ldr	r0, [pc, #4]	@ (800283c <__malloc_unlock+0x8>)
 8002836:	f7ff bf09 	b.w	800264c <__retarget_lock_release_recursive>
 800283a:	bf00      	nop
 800283c:	20000214 	.word	0x20000214

08002840 <__sfputc_r>:
 8002840:	6893      	ldr	r3, [r2, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	2b00      	cmp	r3, #0
 8002846:	b410      	push	{r4}
 8002848:	6093      	str	r3, [r2, #8]
 800284a:	da08      	bge.n	800285e <__sfputc_r+0x1e>
 800284c:	6994      	ldr	r4, [r2, #24]
 800284e:	42a3      	cmp	r3, r4
 8002850:	db01      	blt.n	8002856 <__sfputc_r+0x16>
 8002852:	290a      	cmp	r1, #10
 8002854:	d103      	bne.n	800285e <__sfputc_r+0x1e>
 8002856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800285a:	f000 bb6d 	b.w	8002f38 <__swbuf_r>
 800285e:	6813      	ldr	r3, [r2, #0]
 8002860:	1c58      	adds	r0, r3, #1
 8002862:	6010      	str	r0, [r2, #0]
 8002864:	7019      	strb	r1, [r3, #0]
 8002866:	4608      	mov	r0, r1
 8002868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800286c:	4770      	bx	lr

0800286e <__sfputs_r>:
 800286e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002870:	4606      	mov	r6, r0
 8002872:	460f      	mov	r7, r1
 8002874:	4614      	mov	r4, r2
 8002876:	18d5      	adds	r5, r2, r3
 8002878:	42ac      	cmp	r4, r5
 800287a:	d101      	bne.n	8002880 <__sfputs_r+0x12>
 800287c:	2000      	movs	r0, #0
 800287e:	e007      	b.n	8002890 <__sfputs_r+0x22>
 8002880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002884:	463a      	mov	r2, r7
 8002886:	4630      	mov	r0, r6
 8002888:	f7ff ffda 	bl	8002840 <__sfputc_r>
 800288c:	1c43      	adds	r3, r0, #1
 800288e:	d1f3      	bne.n	8002878 <__sfputs_r+0xa>
 8002890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002894 <_vfiprintf_r>:
 8002894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002898:	460d      	mov	r5, r1
 800289a:	b09d      	sub	sp, #116	@ 0x74
 800289c:	4614      	mov	r4, r2
 800289e:	4698      	mov	r8, r3
 80028a0:	4606      	mov	r6, r0
 80028a2:	b118      	cbz	r0, 80028ac <_vfiprintf_r+0x18>
 80028a4:	6a03      	ldr	r3, [r0, #32]
 80028a6:	b90b      	cbnz	r3, 80028ac <_vfiprintf_r+0x18>
 80028a8:	f7ff fdca 	bl	8002440 <__sinit>
 80028ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028ae:	07d9      	lsls	r1, r3, #31
 80028b0:	d405      	bmi.n	80028be <_vfiprintf_r+0x2a>
 80028b2:	89ab      	ldrh	r3, [r5, #12]
 80028b4:	059a      	lsls	r2, r3, #22
 80028b6:	d402      	bmi.n	80028be <_vfiprintf_r+0x2a>
 80028b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028ba:	f7ff fec6 	bl	800264a <__retarget_lock_acquire_recursive>
 80028be:	89ab      	ldrh	r3, [r5, #12]
 80028c0:	071b      	lsls	r3, r3, #28
 80028c2:	d501      	bpl.n	80028c8 <_vfiprintf_r+0x34>
 80028c4:	692b      	ldr	r3, [r5, #16]
 80028c6:	b99b      	cbnz	r3, 80028f0 <_vfiprintf_r+0x5c>
 80028c8:	4629      	mov	r1, r5
 80028ca:	4630      	mov	r0, r6
 80028cc:	f000 fb72 	bl	8002fb4 <__swsetup_r>
 80028d0:	b170      	cbz	r0, 80028f0 <_vfiprintf_r+0x5c>
 80028d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80028d4:	07dc      	lsls	r4, r3, #31
 80028d6:	d504      	bpl.n	80028e2 <_vfiprintf_r+0x4e>
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	b01d      	add	sp, #116	@ 0x74
 80028de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028e2:	89ab      	ldrh	r3, [r5, #12]
 80028e4:	0598      	lsls	r0, r3, #22
 80028e6:	d4f7      	bmi.n	80028d8 <_vfiprintf_r+0x44>
 80028e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80028ea:	f7ff feaf 	bl	800264c <__retarget_lock_release_recursive>
 80028ee:	e7f3      	b.n	80028d8 <_vfiprintf_r+0x44>
 80028f0:	2300      	movs	r3, #0
 80028f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80028f4:	2320      	movs	r3, #32
 80028f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80028fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80028fe:	2330      	movs	r3, #48	@ 0x30
 8002900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ab0 <_vfiprintf_r+0x21c>
 8002904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002908:	f04f 0901 	mov.w	r9, #1
 800290c:	4623      	mov	r3, r4
 800290e:	469a      	mov	sl, r3
 8002910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002914:	b10a      	cbz	r2, 800291a <_vfiprintf_r+0x86>
 8002916:	2a25      	cmp	r2, #37	@ 0x25
 8002918:	d1f9      	bne.n	800290e <_vfiprintf_r+0x7a>
 800291a:	ebba 0b04 	subs.w	fp, sl, r4
 800291e:	d00b      	beq.n	8002938 <_vfiprintf_r+0xa4>
 8002920:	465b      	mov	r3, fp
 8002922:	4622      	mov	r2, r4
 8002924:	4629      	mov	r1, r5
 8002926:	4630      	mov	r0, r6
 8002928:	f7ff ffa1 	bl	800286e <__sfputs_r>
 800292c:	3001      	adds	r0, #1
 800292e:	f000 80a7 	beq.w	8002a80 <_vfiprintf_r+0x1ec>
 8002932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002934:	445a      	add	r2, fp
 8002936:	9209      	str	r2, [sp, #36]	@ 0x24
 8002938:	f89a 3000 	ldrb.w	r3, [sl]
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 809f 	beq.w	8002a80 <_vfiprintf_r+0x1ec>
 8002942:	2300      	movs	r3, #0
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800294c:	f10a 0a01 	add.w	sl, sl, #1
 8002950:	9304      	str	r3, [sp, #16]
 8002952:	9307      	str	r3, [sp, #28]
 8002954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002958:	931a      	str	r3, [sp, #104]	@ 0x68
 800295a:	4654      	mov	r4, sl
 800295c:	2205      	movs	r2, #5
 800295e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002962:	4853      	ldr	r0, [pc, #332]	@ (8002ab0 <_vfiprintf_r+0x21c>)
 8002964:	f7fd fc54 	bl	8000210 <memchr>
 8002968:	9a04      	ldr	r2, [sp, #16]
 800296a:	b9d8      	cbnz	r0, 80029a4 <_vfiprintf_r+0x110>
 800296c:	06d1      	lsls	r1, r2, #27
 800296e:	bf44      	itt	mi
 8002970:	2320      	movmi	r3, #32
 8002972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002976:	0713      	lsls	r3, r2, #28
 8002978:	bf44      	itt	mi
 800297a:	232b      	movmi	r3, #43	@ 0x2b
 800297c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002980:	f89a 3000 	ldrb.w	r3, [sl]
 8002984:	2b2a      	cmp	r3, #42	@ 0x2a
 8002986:	d015      	beq.n	80029b4 <_vfiprintf_r+0x120>
 8002988:	9a07      	ldr	r2, [sp, #28]
 800298a:	4654      	mov	r4, sl
 800298c:	2000      	movs	r0, #0
 800298e:	f04f 0c0a 	mov.w	ip, #10
 8002992:	4621      	mov	r1, r4
 8002994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002998:	3b30      	subs	r3, #48	@ 0x30
 800299a:	2b09      	cmp	r3, #9
 800299c:	d94b      	bls.n	8002a36 <_vfiprintf_r+0x1a2>
 800299e:	b1b0      	cbz	r0, 80029ce <_vfiprintf_r+0x13a>
 80029a0:	9207      	str	r2, [sp, #28]
 80029a2:	e014      	b.n	80029ce <_vfiprintf_r+0x13a>
 80029a4:	eba0 0308 	sub.w	r3, r0, r8
 80029a8:	fa09 f303 	lsl.w	r3, r9, r3
 80029ac:	4313      	orrs	r3, r2
 80029ae:	9304      	str	r3, [sp, #16]
 80029b0:	46a2      	mov	sl, r4
 80029b2:	e7d2      	b.n	800295a <_vfiprintf_r+0xc6>
 80029b4:	9b03      	ldr	r3, [sp, #12]
 80029b6:	1d19      	adds	r1, r3, #4
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	9103      	str	r1, [sp, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bfbb      	ittet	lt
 80029c0:	425b      	neglt	r3, r3
 80029c2:	f042 0202 	orrlt.w	r2, r2, #2
 80029c6:	9307      	strge	r3, [sp, #28]
 80029c8:	9307      	strlt	r3, [sp, #28]
 80029ca:	bfb8      	it	lt
 80029cc:	9204      	strlt	r2, [sp, #16]
 80029ce:	7823      	ldrb	r3, [r4, #0]
 80029d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80029d2:	d10a      	bne.n	80029ea <_vfiprintf_r+0x156>
 80029d4:	7863      	ldrb	r3, [r4, #1]
 80029d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80029d8:	d132      	bne.n	8002a40 <_vfiprintf_r+0x1ac>
 80029da:	9b03      	ldr	r3, [sp, #12]
 80029dc:	1d1a      	adds	r2, r3, #4
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	9203      	str	r2, [sp, #12]
 80029e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80029e6:	3402      	adds	r4, #2
 80029e8:	9305      	str	r3, [sp, #20]
 80029ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002ac0 <_vfiprintf_r+0x22c>
 80029ee:	7821      	ldrb	r1, [r4, #0]
 80029f0:	2203      	movs	r2, #3
 80029f2:	4650      	mov	r0, sl
 80029f4:	f7fd fc0c 	bl	8000210 <memchr>
 80029f8:	b138      	cbz	r0, 8002a0a <_vfiprintf_r+0x176>
 80029fa:	9b04      	ldr	r3, [sp, #16]
 80029fc:	eba0 000a 	sub.w	r0, r0, sl
 8002a00:	2240      	movs	r2, #64	@ 0x40
 8002a02:	4082      	lsls	r2, r0
 8002a04:	4313      	orrs	r3, r2
 8002a06:	3401      	adds	r4, #1
 8002a08:	9304      	str	r3, [sp, #16]
 8002a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a0e:	4829      	ldr	r0, [pc, #164]	@ (8002ab4 <_vfiprintf_r+0x220>)
 8002a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002a14:	2206      	movs	r2, #6
 8002a16:	f7fd fbfb 	bl	8000210 <memchr>
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	d03f      	beq.n	8002a9e <_vfiprintf_r+0x20a>
 8002a1e:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <_vfiprintf_r+0x224>)
 8002a20:	bb1b      	cbnz	r3, 8002a6a <_vfiprintf_r+0x1d6>
 8002a22:	9b03      	ldr	r3, [sp, #12]
 8002a24:	3307      	adds	r3, #7
 8002a26:	f023 0307 	bic.w	r3, r3, #7
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	9303      	str	r3, [sp, #12]
 8002a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002a30:	443b      	add	r3, r7
 8002a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a34:	e76a      	b.n	800290c <_vfiprintf_r+0x78>
 8002a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8002a3a:	460c      	mov	r4, r1
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	e7a8      	b.n	8002992 <_vfiprintf_r+0xfe>
 8002a40:	2300      	movs	r3, #0
 8002a42:	3401      	adds	r4, #1
 8002a44:	9305      	str	r3, [sp, #20]
 8002a46:	4619      	mov	r1, r3
 8002a48:	f04f 0c0a 	mov.w	ip, #10
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a52:	3a30      	subs	r2, #48	@ 0x30
 8002a54:	2a09      	cmp	r2, #9
 8002a56:	d903      	bls.n	8002a60 <_vfiprintf_r+0x1cc>
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0c6      	beq.n	80029ea <_vfiprintf_r+0x156>
 8002a5c:	9105      	str	r1, [sp, #20]
 8002a5e:	e7c4      	b.n	80029ea <_vfiprintf_r+0x156>
 8002a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a64:	4604      	mov	r4, r0
 8002a66:	2301      	movs	r3, #1
 8002a68:	e7f0      	b.n	8002a4c <_vfiprintf_r+0x1b8>
 8002a6a:	ab03      	add	r3, sp, #12
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	462a      	mov	r2, r5
 8002a70:	4b12      	ldr	r3, [pc, #72]	@ (8002abc <_vfiprintf_r+0x228>)
 8002a72:	a904      	add	r1, sp, #16
 8002a74:	4630      	mov	r0, r6
 8002a76:	f3af 8000 	nop.w
 8002a7a:	4607      	mov	r7, r0
 8002a7c:	1c78      	adds	r0, r7, #1
 8002a7e:	d1d6      	bne.n	8002a2e <_vfiprintf_r+0x19a>
 8002a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002a82:	07d9      	lsls	r1, r3, #31
 8002a84:	d405      	bmi.n	8002a92 <_vfiprintf_r+0x1fe>
 8002a86:	89ab      	ldrh	r3, [r5, #12]
 8002a88:	059a      	lsls	r2, r3, #22
 8002a8a:	d402      	bmi.n	8002a92 <_vfiprintf_r+0x1fe>
 8002a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002a8e:	f7ff fddd 	bl	800264c <__retarget_lock_release_recursive>
 8002a92:	89ab      	ldrh	r3, [r5, #12]
 8002a94:	065b      	lsls	r3, r3, #25
 8002a96:	f53f af1f 	bmi.w	80028d8 <_vfiprintf_r+0x44>
 8002a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002a9c:	e71e      	b.n	80028dc <_vfiprintf_r+0x48>
 8002a9e:	ab03      	add	r3, sp, #12
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	462a      	mov	r2, r5
 8002aa4:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <_vfiprintf_r+0x228>)
 8002aa6:	a904      	add	r1, sp, #16
 8002aa8:	4630      	mov	r0, r6
 8002aaa:	f000 f879 	bl	8002ba0 <_printf_i>
 8002aae:	e7e4      	b.n	8002a7a <_vfiprintf_r+0x1e6>
 8002ab0:	08003230 	.word	0x08003230
 8002ab4:	0800323a 	.word	0x0800323a
 8002ab8:	00000000 	.word	0x00000000
 8002abc:	0800286f 	.word	0x0800286f
 8002ac0:	08003236 	.word	0x08003236

08002ac4 <_printf_common>:
 8002ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ac8:	4616      	mov	r6, r2
 8002aca:	4698      	mov	r8, r3
 8002acc:	688a      	ldr	r2, [r1, #8]
 8002ace:	690b      	ldr	r3, [r1, #16]
 8002ad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	bfb8      	it	lt
 8002ad8:	4613      	movlt	r3, r2
 8002ada:	6033      	str	r3, [r6, #0]
 8002adc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002ae0:	4607      	mov	r7, r0
 8002ae2:	460c      	mov	r4, r1
 8002ae4:	b10a      	cbz	r2, 8002aea <_printf_common+0x26>
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	6033      	str	r3, [r6, #0]
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	0699      	lsls	r1, r3, #26
 8002aee:	bf42      	ittt	mi
 8002af0:	6833      	ldrmi	r3, [r6, #0]
 8002af2:	3302      	addmi	r3, #2
 8002af4:	6033      	strmi	r3, [r6, #0]
 8002af6:	6825      	ldr	r5, [r4, #0]
 8002af8:	f015 0506 	ands.w	r5, r5, #6
 8002afc:	d106      	bne.n	8002b0c <_printf_common+0x48>
 8002afe:	f104 0a19 	add.w	sl, r4, #25
 8002b02:	68e3      	ldr	r3, [r4, #12]
 8002b04:	6832      	ldr	r2, [r6, #0]
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	42ab      	cmp	r3, r5
 8002b0a:	dc26      	bgt.n	8002b5a <_printf_common+0x96>
 8002b0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002b10:	6822      	ldr	r2, [r4, #0]
 8002b12:	3b00      	subs	r3, #0
 8002b14:	bf18      	it	ne
 8002b16:	2301      	movne	r3, #1
 8002b18:	0692      	lsls	r2, r2, #26
 8002b1a:	d42b      	bmi.n	8002b74 <_printf_common+0xb0>
 8002b1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002b20:	4641      	mov	r1, r8
 8002b22:	4638      	mov	r0, r7
 8002b24:	47c8      	blx	r9
 8002b26:	3001      	adds	r0, #1
 8002b28:	d01e      	beq.n	8002b68 <_printf_common+0xa4>
 8002b2a:	6823      	ldr	r3, [r4, #0]
 8002b2c:	6922      	ldr	r2, [r4, #16]
 8002b2e:	f003 0306 	and.w	r3, r3, #6
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	bf02      	ittt	eq
 8002b36:	68e5      	ldreq	r5, [r4, #12]
 8002b38:	6833      	ldreq	r3, [r6, #0]
 8002b3a:	1aed      	subeq	r5, r5, r3
 8002b3c:	68a3      	ldr	r3, [r4, #8]
 8002b3e:	bf0c      	ite	eq
 8002b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b44:	2500      	movne	r5, #0
 8002b46:	4293      	cmp	r3, r2
 8002b48:	bfc4      	itt	gt
 8002b4a:	1a9b      	subgt	r3, r3, r2
 8002b4c:	18ed      	addgt	r5, r5, r3
 8002b4e:	2600      	movs	r6, #0
 8002b50:	341a      	adds	r4, #26
 8002b52:	42b5      	cmp	r5, r6
 8002b54:	d11a      	bne.n	8002b8c <_printf_common+0xc8>
 8002b56:	2000      	movs	r0, #0
 8002b58:	e008      	b.n	8002b6c <_printf_common+0xa8>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4652      	mov	r2, sl
 8002b5e:	4641      	mov	r1, r8
 8002b60:	4638      	mov	r0, r7
 8002b62:	47c8      	blx	r9
 8002b64:	3001      	adds	r0, #1
 8002b66:	d103      	bne.n	8002b70 <_printf_common+0xac>
 8002b68:	f04f 30ff 	mov.w	r0, #4294967295
 8002b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b70:	3501      	adds	r5, #1
 8002b72:	e7c6      	b.n	8002b02 <_printf_common+0x3e>
 8002b74:	18e1      	adds	r1, r4, r3
 8002b76:	1c5a      	adds	r2, r3, #1
 8002b78:	2030      	movs	r0, #48	@ 0x30
 8002b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002b7e:	4422      	add	r2, r4
 8002b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002b84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002b88:	3302      	adds	r3, #2
 8002b8a:	e7c7      	b.n	8002b1c <_printf_common+0x58>
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	4622      	mov	r2, r4
 8002b90:	4641      	mov	r1, r8
 8002b92:	4638      	mov	r0, r7
 8002b94:	47c8      	blx	r9
 8002b96:	3001      	adds	r0, #1
 8002b98:	d0e6      	beq.n	8002b68 <_printf_common+0xa4>
 8002b9a:	3601      	adds	r6, #1
 8002b9c:	e7d9      	b.n	8002b52 <_printf_common+0x8e>
	...

08002ba0 <_printf_i>:
 8002ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002ba4:	7e0f      	ldrb	r7, [r1, #24]
 8002ba6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002ba8:	2f78      	cmp	r7, #120	@ 0x78
 8002baa:	4691      	mov	r9, r2
 8002bac:	4680      	mov	r8, r0
 8002bae:	460c      	mov	r4, r1
 8002bb0:	469a      	mov	sl, r3
 8002bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002bb6:	d807      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bb8:	2f62      	cmp	r7, #98	@ 0x62
 8002bba:	d80a      	bhi.n	8002bd2 <_printf_i+0x32>
 8002bbc:	2f00      	cmp	r7, #0
 8002bbe:	f000 80d2 	beq.w	8002d66 <_printf_i+0x1c6>
 8002bc2:	2f58      	cmp	r7, #88	@ 0x58
 8002bc4:	f000 80b9 	beq.w	8002d3a <_printf_i+0x19a>
 8002bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002bd0:	e03a      	b.n	8002c48 <_printf_i+0xa8>
 8002bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002bd6:	2b15      	cmp	r3, #21
 8002bd8:	d8f6      	bhi.n	8002bc8 <_printf_i+0x28>
 8002bda:	a101      	add	r1, pc, #4	@ (adr r1, 8002be0 <_printf_i+0x40>)
 8002bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002be0:	08002c39 	.word	0x08002c39
 8002be4:	08002c4d 	.word	0x08002c4d
 8002be8:	08002bc9 	.word	0x08002bc9
 8002bec:	08002bc9 	.word	0x08002bc9
 8002bf0:	08002bc9 	.word	0x08002bc9
 8002bf4:	08002bc9 	.word	0x08002bc9
 8002bf8:	08002c4d 	.word	0x08002c4d
 8002bfc:	08002bc9 	.word	0x08002bc9
 8002c00:	08002bc9 	.word	0x08002bc9
 8002c04:	08002bc9 	.word	0x08002bc9
 8002c08:	08002bc9 	.word	0x08002bc9
 8002c0c:	08002d4d 	.word	0x08002d4d
 8002c10:	08002c77 	.word	0x08002c77
 8002c14:	08002d07 	.word	0x08002d07
 8002c18:	08002bc9 	.word	0x08002bc9
 8002c1c:	08002bc9 	.word	0x08002bc9
 8002c20:	08002d6f 	.word	0x08002d6f
 8002c24:	08002bc9 	.word	0x08002bc9
 8002c28:	08002c77 	.word	0x08002c77
 8002c2c:	08002bc9 	.word	0x08002bc9
 8002c30:	08002bc9 	.word	0x08002bc9
 8002c34:	08002d0f 	.word	0x08002d0f
 8002c38:	6833      	ldr	r3, [r6, #0]
 8002c3a:	1d1a      	adds	r2, r3, #4
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	6032      	str	r2, [r6, #0]
 8002c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e09d      	b.n	8002d88 <_printf_i+0x1e8>
 8002c4c:	6833      	ldr	r3, [r6, #0]
 8002c4e:	6820      	ldr	r0, [r4, #0]
 8002c50:	1d19      	adds	r1, r3, #4
 8002c52:	6031      	str	r1, [r6, #0]
 8002c54:	0606      	lsls	r6, r0, #24
 8002c56:	d501      	bpl.n	8002c5c <_printf_i+0xbc>
 8002c58:	681d      	ldr	r5, [r3, #0]
 8002c5a:	e003      	b.n	8002c64 <_printf_i+0xc4>
 8002c5c:	0645      	lsls	r5, r0, #25
 8002c5e:	d5fb      	bpl.n	8002c58 <_printf_i+0xb8>
 8002c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002c64:	2d00      	cmp	r5, #0
 8002c66:	da03      	bge.n	8002c70 <_printf_i+0xd0>
 8002c68:	232d      	movs	r3, #45	@ 0x2d
 8002c6a:	426d      	negs	r5, r5
 8002c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002c70:	4859      	ldr	r0, [pc, #356]	@ (8002dd8 <_printf_i+0x238>)
 8002c72:	230a      	movs	r3, #10
 8002c74:	e011      	b.n	8002c9a <_printf_i+0xfa>
 8002c76:	6821      	ldr	r1, [r4, #0]
 8002c78:	6833      	ldr	r3, [r6, #0]
 8002c7a:	0608      	lsls	r0, r1, #24
 8002c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002c80:	d402      	bmi.n	8002c88 <_printf_i+0xe8>
 8002c82:	0649      	lsls	r1, r1, #25
 8002c84:	bf48      	it	mi
 8002c86:	b2ad      	uxthmi	r5, r5
 8002c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8002c8a:	4853      	ldr	r0, [pc, #332]	@ (8002dd8 <_printf_i+0x238>)
 8002c8c:	6033      	str	r3, [r6, #0]
 8002c8e:	bf14      	ite	ne
 8002c90:	230a      	movne	r3, #10
 8002c92:	2308      	moveq	r3, #8
 8002c94:	2100      	movs	r1, #0
 8002c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002c9a:	6866      	ldr	r6, [r4, #4]
 8002c9c:	60a6      	str	r6, [r4, #8]
 8002c9e:	2e00      	cmp	r6, #0
 8002ca0:	bfa2      	ittt	ge
 8002ca2:	6821      	ldrge	r1, [r4, #0]
 8002ca4:	f021 0104 	bicge.w	r1, r1, #4
 8002ca8:	6021      	strge	r1, [r4, #0]
 8002caa:	b90d      	cbnz	r5, 8002cb0 <_printf_i+0x110>
 8002cac:	2e00      	cmp	r6, #0
 8002cae:	d04b      	beq.n	8002d48 <_printf_i+0x1a8>
 8002cb0:	4616      	mov	r6, r2
 8002cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8002cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8002cba:	5dc7      	ldrb	r7, [r0, r7]
 8002cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002cc0:	462f      	mov	r7, r5
 8002cc2:	42bb      	cmp	r3, r7
 8002cc4:	460d      	mov	r5, r1
 8002cc6:	d9f4      	bls.n	8002cb2 <_printf_i+0x112>
 8002cc8:	2b08      	cmp	r3, #8
 8002cca:	d10b      	bne.n	8002ce4 <_printf_i+0x144>
 8002ccc:	6823      	ldr	r3, [r4, #0]
 8002cce:	07df      	lsls	r7, r3, #31
 8002cd0:	d508      	bpl.n	8002ce4 <_printf_i+0x144>
 8002cd2:	6923      	ldr	r3, [r4, #16]
 8002cd4:	6861      	ldr	r1, [r4, #4]
 8002cd6:	4299      	cmp	r1, r3
 8002cd8:	bfde      	ittt	le
 8002cda:	2330      	movle	r3, #48	@ 0x30
 8002cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002ce4:	1b92      	subs	r2, r2, r6
 8002ce6:	6122      	str	r2, [r4, #16]
 8002ce8:	f8cd a000 	str.w	sl, [sp]
 8002cec:	464b      	mov	r3, r9
 8002cee:	aa03      	add	r2, sp, #12
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	4640      	mov	r0, r8
 8002cf4:	f7ff fee6 	bl	8002ac4 <_printf_common>
 8002cf8:	3001      	adds	r0, #1
 8002cfa:	d14a      	bne.n	8002d92 <_printf_i+0x1f2>
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002d00:	b004      	add	sp, #16
 8002d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d06:	6823      	ldr	r3, [r4, #0]
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	6023      	str	r3, [r4, #0]
 8002d0e:	4833      	ldr	r0, [pc, #204]	@ (8002ddc <_printf_i+0x23c>)
 8002d10:	2778      	movs	r7, #120	@ 0x78
 8002d12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002d16:	6823      	ldr	r3, [r4, #0]
 8002d18:	6831      	ldr	r1, [r6, #0]
 8002d1a:	061f      	lsls	r7, r3, #24
 8002d1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8002d20:	d402      	bmi.n	8002d28 <_printf_i+0x188>
 8002d22:	065f      	lsls	r7, r3, #25
 8002d24:	bf48      	it	mi
 8002d26:	b2ad      	uxthmi	r5, r5
 8002d28:	6031      	str	r1, [r6, #0]
 8002d2a:	07d9      	lsls	r1, r3, #31
 8002d2c:	bf44      	itt	mi
 8002d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8002d32:	6023      	strmi	r3, [r4, #0]
 8002d34:	b11d      	cbz	r5, 8002d3e <_printf_i+0x19e>
 8002d36:	2310      	movs	r3, #16
 8002d38:	e7ac      	b.n	8002c94 <_printf_i+0xf4>
 8002d3a:	4827      	ldr	r0, [pc, #156]	@ (8002dd8 <_printf_i+0x238>)
 8002d3c:	e7e9      	b.n	8002d12 <_printf_i+0x172>
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	f023 0320 	bic.w	r3, r3, #32
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	e7f6      	b.n	8002d36 <_printf_i+0x196>
 8002d48:	4616      	mov	r6, r2
 8002d4a:	e7bd      	b.n	8002cc8 <_printf_i+0x128>
 8002d4c:	6833      	ldr	r3, [r6, #0]
 8002d4e:	6825      	ldr	r5, [r4, #0]
 8002d50:	6961      	ldr	r1, [r4, #20]
 8002d52:	1d18      	adds	r0, r3, #4
 8002d54:	6030      	str	r0, [r6, #0]
 8002d56:	062e      	lsls	r6, r5, #24
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	d501      	bpl.n	8002d60 <_printf_i+0x1c0>
 8002d5c:	6019      	str	r1, [r3, #0]
 8002d5e:	e002      	b.n	8002d66 <_printf_i+0x1c6>
 8002d60:	0668      	lsls	r0, r5, #25
 8002d62:	d5fb      	bpl.n	8002d5c <_printf_i+0x1bc>
 8002d64:	8019      	strh	r1, [r3, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	6123      	str	r3, [r4, #16]
 8002d6a:	4616      	mov	r6, r2
 8002d6c:	e7bc      	b.n	8002ce8 <_printf_i+0x148>
 8002d6e:	6833      	ldr	r3, [r6, #0]
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	6032      	str	r2, [r6, #0]
 8002d74:	681e      	ldr	r6, [r3, #0]
 8002d76:	6862      	ldr	r2, [r4, #4]
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4630      	mov	r0, r6
 8002d7c:	f7fd fa48 	bl	8000210 <memchr>
 8002d80:	b108      	cbz	r0, 8002d86 <_printf_i+0x1e6>
 8002d82:	1b80      	subs	r0, r0, r6
 8002d84:	6060      	str	r0, [r4, #4]
 8002d86:	6863      	ldr	r3, [r4, #4]
 8002d88:	6123      	str	r3, [r4, #16]
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d90:	e7aa      	b.n	8002ce8 <_printf_i+0x148>
 8002d92:	6923      	ldr	r3, [r4, #16]
 8002d94:	4632      	mov	r2, r6
 8002d96:	4649      	mov	r1, r9
 8002d98:	4640      	mov	r0, r8
 8002d9a:	47d0      	blx	sl
 8002d9c:	3001      	adds	r0, #1
 8002d9e:	d0ad      	beq.n	8002cfc <_printf_i+0x15c>
 8002da0:	6823      	ldr	r3, [r4, #0]
 8002da2:	079b      	lsls	r3, r3, #30
 8002da4:	d413      	bmi.n	8002dce <_printf_i+0x22e>
 8002da6:	68e0      	ldr	r0, [r4, #12]
 8002da8:	9b03      	ldr	r3, [sp, #12]
 8002daa:	4298      	cmp	r0, r3
 8002dac:	bfb8      	it	lt
 8002dae:	4618      	movlt	r0, r3
 8002db0:	e7a6      	b.n	8002d00 <_printf_i+0x160>
 8002db2:	2301      	movs	r3, #1
 8002db4:	4632      	mov	r2, r6
 8002db6:	4649      	mov	r1, r9
 8002db8:	4640      	mov	r0, r8
 8002dba:	47d0      	blx	sl
 8002dbc:	3001      	adds	r0, #1
 8002dbe:	d09d      	beq.n	8002cfc <_printf_i+0x15c>
 8002dc0:	3501      	adds	r5, #1
 8002dc2:	68e3      	ldr	r3, [r4, #12]
 8002dc4:	9903      	ldr	r1, [sp, #12]
 8002dc6:	1a5b      	subs	r3, r3, r1
 8002dc8:	42ab      	cmp	r3, r5
 8002dca:	dcf2      	bgt.n	8002db2 <_printf_i+0x212>
 8002dcc:	e7eb      	b.n	8002da6 <_printf_i+0x206>
 8002dce:	2500      	movs	r5, #0
 8002dd0:	f104 0619 	add.w	r6, r4, #25
 8002dd4:	e7f5      	b.n	8002dc2 <_printf_i+0x222>
 8002dd6:	bf00      	nop
 8002dd8:	08003241 	.word	0x08003241
 8002ddc:	08003252 	.word	0x08003252

08002de0 <__sflush_r>:
 8002de0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002de8:	0716      	lsls	r6, r2, #28
 8002dea:	4605      	mov	r5, r0
 8002dec:	460c      	mov	r4, r1
 8002dee:	d454      	bmi.n	8002e9a <__sflush_r+0xba>
 8002df0:	684b      	ldr	r3, [r1, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	dc02      	bgt.n	8002dfc <__sflush_r+0x1c>
 8002df6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	dd48      	ble.n	8002e8e <__sflush_r+0xae>
 8002dfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002dfe:	2e00      	cmp	r6, #0
 8002e00:	d045      	beq.n	8002e8e <__sflush_r+0xae>
 8002e02:	2300      	movs	r3, #0
 8002e04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002e08:	682f      	ldr	r7, [r5, #0]
 8002e0a:	6a21      	ldr	r1, [r4, #32]
 8002e0c:	602b      	str	r3, [r5, #0]
 8002e0e:	d030      	beq.n	8002e72 <__sflush_r+0x92>
 8002e10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002e12:	89a3      	ldrh	r3, [r4, #12]
 8002e14:	0759      	lsls	r1, r3, #29
 8002e16:	d505      	bpl.n	8002e24 <__sflush_r+0x44>
 8002e18:	6863      	ldr	r3, [r4, #4]
 8002e1a:	1ad2      	subs	r2, r2, r3
 8002e1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002e1e:	b10b      	cbz	r3, 8002e24 <__sflush_r+0x44>
 8002e20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	2300      	movs	r3, #0
 8002e26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e28:	6a21      	ldr	r1, [r4, #32]
 8002e2a:	4628      	mov	r0, r5
 8002e2c:	47b0      	blx	r6
 8002e2e:	1c43      	adds	r3, r0, #1
 8002e30:	89a3      	ldrh	r3, [r4, #12]
 8002e32:	d106      	bne.n	8002e42 <__sflush_r+0x62>
 8002e34:	6829      	ldr	r1, [r5, #0]
 8002e36:	291d      	cmp	r1, #29
 8002e38:	d82b      	bhi.n	8002e92 <__sflush_r+0xb2>
 8002e3a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ee4 <__sflush_r+0x104>)
 8002e3c:	410a      	asrs	r2, r1
 8002e3e:	07d6      	lsls	r6, r2, #31
 8002e40:	d427      	bmi.n	8002e92 <__sflush_r+0xb2>
 8002e42:	2200      	movs	r2, #0
 8002e44:	6062      	str	r2, [r4, #4]
 8002e46:	04d9      	lsls	r1, r3, #19
 8002e48:	6922      	ldr	r2, [r4, #16]
 8002e4a:	6022      	str	r2, [r4, #0]
 8002e4c:	d504      	bpl.n	8002e58 <__sflush_r+0x78>
 8002e4e:	1c42      	adds	r2, r0, #1
 8002e50:	d101      	bne.n	8002e56 <__sflush_r+0x76>
 8002e52:	682b      	ldr	r3, [r5, #0]
 8002e54:	b903      	cbnz	r3, 8002e58 <__sflush_r+0x78>
 8002e56:	6560      	str	r0, [r4, #84]	@ 0x54
 8002e58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e5a:	602f      	str	r7, [r5, #0]
 8002e5c:	b1b9      	cbz	r1, 8002e8e <__sflush_r+0xae>
 8002e5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e62:	4299      	cmp	r1, r3
 8002e64:	d002      	beq.n	8002e6c <__sflush_r+0x8c>
 8002e66:	4628      	mov	r0, r5
 8002e68:	f7ff fbf2 	bl	8002650 <_free_r>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e70:	e00d      	b.n	8002e8e <__sflush_r+0xae>
 8002e72:	2301      	movs	r3, #1
 8002e74:	4628      	mov	r0, r5
 8002e76:	47b0      	blx	r6
 8002e78:	4602      	mov	r2, r0
 8002e7a:	1c50      	adds	r0, r2, #1
 8002e7c:	d1c9      	bne.n	8002e12 <__sflush_r+0x32>
 8002e7e:	682b      	ldr	r3, [r5, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0c6      	beq.n	8002e12 <__sflush_r+0x32>
 8002e84:	2b1d      	cmp	r3, #29
 8002e86:	d001      	beq.n	8002e8c <__sflush_r+0xac>
 8002e88:	2b16      	cmp	r3, #22
 8002e8a:	d11e      	bne.n	8002eca <__sflush_r+0xea>
 8002e8c:	602f      	str	r7, [r5, #0]
 8002e8e:	2000      	movs	r0, #0
 8002e90:	e022      	b.n	8002ed8 <__sflush_r+0xf8>
 8002e92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e96:	b21b      	sxth	r3, r3
 8002e98:	e01b      	b.n	8002ed2 <__sflush_r+0xf2>
 8002e9a:	690f      	ldr	r7, [r1, #16]
 8002e9c:	2f00      	cmp	r7, #0
 8002e9e:	d0f6      	beq.n	8002e8e <__sflush_r+0xae>
 8002ea0:	0793      	lsls	r3, r2, #30
 8002ea2:	680e      	ldr	r6, [r1, #0]
 8002ea4:	bf08      	it	eq
 8002ea6:	694b      	ldreq	r3, [r1, #20]
 8002ea8:	600f      	str	r7, [r1, #0]
 8002eaa:	bf18      	it	ne
 8002eac:	2300      	movne	r3, #0
 8002eae:	eba6 0807 	sub.w	r8, r6, r7
 8002eb2:	608b      	str	r3, [r1, #8]
 8002eb4:	f1b8 0f00 	cmp.w	r8, #0
 8002eb8:	dde9      	ble.n	8002e8e <__sflush_r+0xae>
 8002eba:	6a21      	ldr	r1, [r4, #32]
 8002ebc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002ebe:	4643      	mov	r3, r8
 8002ec0:	463a      	mov	r2, r7
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	47b0      	blx	r6
 8002ec6:	2800      	cmp	r0, #0
 8002ec8:	dc08      	bgt.n	8002edc <__sflush_r+0xfc>
 8002eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ece:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ed2:	81a3      	strh	r3, [r4, #12]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002edc:	4407      	add	r7, r0
 8002ede:	eba8 0800 	sub.w	r8, r8, r0
 8002ee2:	e7e7      	b.n	8002eb4 <__sflush_r+0xd4>
 8002ee4:	dfbffffe 	.word	0xdfbffffe

08002ee8 <_fflush_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	690b      	ldr	r3, [r1, #16]
 8002eec:	4605      	mov	r5, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b913      	cbnz	r3, 8002ef8 <_fflush_r+0x10>
 8002ef2:	2500      	movs	r5, #0
 8002ef4:	4628      	mov	r0, r5
 8002ef6:	bd38      	pop	{r3, r4, r5, pc}
 8002ef8:	b118      	cbz	r0, 8002f02 <_fflush_r+0x1a>
 8002efa:	6a03      	ldr	r3, [r0, #32]
 8002efc:	b90b      	cbnz	r3, 8002f02 <_fflush_r+0x1a>
 8002efe:	f7ff fa9f 	bl	8002440 <__sinit>
 8002f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f3      	beq.n	8002ef2 <_fflush_r+0xa>
 8002f0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002f0c:	07d0      	lsls	r0, r2, #31
 8002f0e:	d404      	bmi.n	8002f1a <_fflush_r+0x32>
 8002f10:	0599      	lsls	r1, r3, #22
 8002f12:	d402      	bmi.n	8002f1a <_fflush_r+0x32>
 8002f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f16:	f7ff fb98 	bl	800264a <__retarget_lock_acquire_recursive>
 8002f1a:	4628      	mov	r0, r5
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	f7ff ff5f 	bl	8002de0 <__sflush_r>
 8002f22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002f24:	07da      	lsls	r2, r3, #31
 8002f26:	4605      	mov	r5, r0
 8002f28:	d4e4      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f2a:	89a3      	ldrh	r3, [r4, #12]
 8002f2c:	059b      	lsls	r3, r3, #22
 8002f2e:	d4e1      	bmi.n	8002ef4 <_fflush_r+0xc>
 8002f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002f32:	f7ff fb8b 	bl	800264c <__retarget_lock_release_recursive>
 8002f36:	e7dd      	b.n	8002ef4 <_fflush_r+0xc>

08002f38 <__swbuf_r>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	460e      	mov	r6, r1
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	4605      	mov	r5, r0
 8002f40:	b118      	cbz	r0, 8002f4a <__swbuf_r+0x12>
 8002f42:	6a03      	ldr	r3, [r0, #32]
 8002f44:	b90b      	cbnz	r3, 8002f4a <__swbuf_r+0x12>
 8002f46:	f7ff fa7b 	bl	8002440 <__sinit>
 8002f4a:	69a3      	ldr	r3, [r4, #24]
 8002f4c:	60a3      	str	r3, [r4, #8]
 8002f4e:	89a3      	ldrh	r3, [r4, #12]
 8002f50:	071a      	lsls	r2, r3, #28
 8002f52:	d501      	bpl.n	8002f58 <__swbuf_r+0x20>
 8002f54:	6923      	ldr	r3, [r4, #16]
 8002f56:	b943      	cbnz	r3, 8002f6a <__swbuf_r+0x32>
 8002f58:	4621      	mov	r1, r4
 8002f5a:	4628      	mov	r0, r5
 8002f5c:	f000 f82a 	bl	8002fb4 <__swsetup_r>
 8002f60:	b118      	cbz	r0, 8002f6a <__swbuf_r+0x32>
 8002f62:	f04f 37ff 	mov.w	r7, #4294967295
 8002f66:	4638      	mov	r0, r7
 8002f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	6922      	ldr	r2, [r4, #16]
 8002f6e:	1a98      	subs	r0, r3, r2
 8002f70:	6963      	ldr	r3, [r4, #20]
 8002f72:	b2f6      	uxtb	r6, r6
 8002f74:	4283      	cmp	r3, r0
 8002f76:	4637      	mov	r7, r6
 8002f78:	dc05      	bgt.n	8002f86 <__swbuf_r+0x4e>
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f7ff ffb3 	bl	8002ee8 <_fflush_r>
 8002f82:	2800      	cmp	r0, #0
 8002f84:	d1ed      	bne.n	8002f62 <__swbuf_r+0x2a>
 8002f86:	68a3      	ldr	r3, [r4, #8]
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	60a3      	str	r3, [r4, #8]
 8002f8c:	6823      	ldr	r3, [r4, #0]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	6022      	str	r2, [r4, #0]
 8002f92:	701e      	strb	r6, [r3, #0]
 8002f94:	6962      	ldr	r2, [r4, #20]
 8002f96:	1c43      	adds	r3, r0, #1
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d004      	beq.n	8002fa6 <__swbuf_r+0x6e>
 8002f9c:	89a3      	ldrh	r3, [r4, #12]
 8002f9e:	07db      	lsls	r3, r3, #31
 8002fa0:	d5e1      	bpl.n	8002f66 <__swbuf_r+0x2e>
 8002fa2:	2e0a      	cmp	r6, #10
 8002fa4:	d1df      	bne.n	8002f66 <__swbuf_r+0x2e>
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	4628      	mov	r0, r5
 8002faa:	f7ff ff9d 	bl	8002ee8 <_fflush_r>
 8002fae:	2800      	cmp	r0, #0
 8002fb0:	d0d9      	beq.n	8002f66 <__swbuf_r+0x2e>
 8002fb2:	e7d6      	b.n	8002f62 <__swbuf_r+0x2a>

08002fb4 <__swsetup_r>:
 8002fb4:	b538      	push	{r3, r4, r5, lr}
 8002fb6:	4b29      	ldr	r3, [pc, #164]	@ (800305c <__swsetup_r+0xa8>)
 8002fb8:	4605      	mov	r5, r0
 8002fba:	6818      	ldr	r0, [r3, #0]
 8002fbc:	460c      	mov	r4, r1
 8002fbe:	b118      	cbz	r0, 8002fc8 <__swsetup_r+0x14>
 8002fc0:	6a03      	ldr	r3, [r0, #32]
 8002fc2:	b90b      	cbnz	r3, 8002fc8 <__swsetup_r+0x14>
 8002fc4:	f7ff fa3c 	bl	8002440 <__sinit>
 8002fc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fcc:	0719      	lsls	r1, r3, #28
 8002fce:	d422      	bmi.n	8003016 <__swsetup_r+0x62>
 8002fd0:	06da      	lsls	r2, r3, #27
 8002fd2:	d407      	bmi.n	8002fe4 <__swsetup_r+0x30>
 8002fd4:	2209      	movs	r2, #9
 8002fd6:	602a      	str	r2, [r5, #0]
 8002fd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fdc:	81a3      	strh	r3, [r4, #12]
 8002fde:	f04f 30ff 	mov.w	r0, #4294967295
 8002fe2:	e033      	b.n	800304c <__swsetup_r+0x98>
 8002fe4:	0758      	lsls	r0, r3, #29
 8002fe6:	d512      	bpl.n	800300e <__swsetup_r+0x5a>
 8002fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fea:	b141      	cbz	r1, 8002ffe <__swsetup_r+0x4a>
 8002fec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002ff0:	4299      	cmp	r1, r3
 8002ff2:	d002      	beq.n	8002ffa <__swsetup_r+0x46>
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f7ff fb2b 	bl	8002650 <_free_r>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ffe:	89a3      	ldrh	r3, [r4, #12]
 8003000:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003004:	81a3      	strh	r3, [r4, #12]
 8003006:	2300      	movs	r3, #0
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	6923      	ldr	r3, [r4, #16]
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	89a3      	ldrh	r3, [r4, #12]
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	81a3      	strh	r3, [r4, #12]
 8003016:	6923      	ldr	r3, [r4, #16]
 8003018:	b94b      	cbnz	r3, 800302e <__swsetup_r+0x7a>
 800301a:	89a3      	ldrh	r3, [r4, #12]
 800301c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003024:	d003      	beq.n	800302e <__swsetup_r+0x7a>
 8003026:	4621      	mov	r1, r4
 8003028:	4628      	mov	r0, r5
 800302a:	f000 f84f 	bl	80030cc <__smakebuf_r>
 800302e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003032:	f013 0201 	ands.w	r2, r3, #1
 8003036:	d00a      	beq.n	800304e <__swsetup_r+0x9a>
 8003038:	2200      	movs	r2, #0
 800303a:	60a2      	str	r2, [r4, #8]
 800303c:	6962      	ldr	r2, [r4, #20]
 800303e:	4252      	negs	r2, r2
 8003040:	61a2      	str	r2, [r4, #24]
 8003042:	6922      	ldr	r2, [r4, #16]
 8003044:	b942      	cbnz	r2, 8003058 <__swsetup_r+0xa4>
 8003046:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800304a:	d1c5      	bne.n	8002fd8 <__swsetup_r+0x24>
 800304c:	bd38      	pop	{r3, r4, r5, pc}
 800304e:	0799      	lsls	r1, r3, #30
 8003050:	bf58      	it	pl
 8003052:	6962      	ldrpl	r2, [r4, #20]
 8003054:	60a2      	str	r2, [r4, #8]
 8003056:	e7f4      	b.n	8003042 <__swsetup_r+0x8e>
 8003058:	2000      	movs	r0, #0
 800305a:	e7f7      	b.n	800304c <__swsetup_r+0x98>
 800305c:	20000018 	.word	0x20000018

08003060 <_sbrk_r>:
 8003060:	b538      	push	{r3, r4, r5, lr}
 8003062:	4d06      	ldr	r5, [pc, #24]	@ (800307c <_sbrk_r+0x1c>)
 8003064:	2300      	movs	r3, #0
 8003066:	4604      	mov	r4, r0
 8003068:	4608      	mov	r0, r1
 800306a:	602b      	str	r3, [r5, #0]
 800306c:	f7fd fcfc 	bl	8000a68 <_sbrk>
 8003070:	1c43      	adds	r3, r0, #1
 8003072:	d102      	bne.n	800307a <_sbrk_r+0x1a>
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	b103      	cbz	r3, 800307a <_sbrk_r+0x1a>
 8003078:	6023      	str	r3, [r4, #0]
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	20000210 	.word	0x20000210

08003080 <__swhatbuf_r>:
 8003080:	b570      	push	{r4, r5, r6, lr}
 8003082:	460c      	mov	r4, r1
 8003084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003088:	2900      	cmp	r1, #0
 800308a:	b096      	sub	sp, #88	@ 0x58
 800308c:	4615      	mov	r5, r2
 800308e:	461e      	mov	r6, r3
 8003090:	da0d      	bge.n	80030ae <__swhatbuf_r+0x2e>
 8003092:	89a3      	ldrh	r3, [r4, #12]
 8003094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003098:	f04f 0100 	mov.w	r1, #0
 800309c:	bf14      	ite	ne
 800309e:	2340      	movne	r3, #64	@ 0x40
 80030a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80030a4:	2000      	movs	r0, #0
 80030a6:	6031      	str	r1, [r6, #0]
 80030a8:	602b      	str	r3, [r5, #0]
 80030aa:	b016      	add	sp, #88	@ 0x58
 80030ac:	bd70      	pop	{r4, r5, r6, pc}
 80030ae:	466a      	mov	r2, sp
 80030b0:	f000 f848 	bl	8003144 <_fstat_r>
 80030b4:	2800      	cmp	r0, #0
 80030b6:	dbec      	blt.n	8003092 <__swhatbuf_r+0x12>
 80030b8:	9901      	ldr	r1, [sp, #4]
 80030ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80030be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80030c2:	4259      	negs	r1, r3
 80030c4:	4159      	adcs	r1, r3
 80030c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80030ca:	e7eb      	b.n	80030a4 <__swhatbuf_r+0x24>

080030cc <__smakebuf_r>:
 80030cc:	898b      	ldrh	r3, [r1, #12]
 80030ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030d0:	079d      	lsls	r5, r3, #30
 80030d2:	4606      	mov	r6, r0
 80030d4:	460c      	mov	r4, r1
 80030d6:	d507      	bpl.n	80030e8 <__smakebuf_r+0x1c>
 80030d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	6123      	str	r3, [r4, #16]
 80030e0:	2301      	movs	r3, #1
 80030e2:	6163      	str	r3, [r4, #20]
 80030e4:	b003      	add	sp, #12
 80030e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030e8:	ab01      	add	r3, sp, #4
 80030ea:	466a      	mov	r2, sp
 80030ec:	f7ff ffc8 	bl	8003080 <__swhatbuf_r>
 80030f0:	9f00      	ldr	r7, [sp, #0]
 80030f2:	4605      	mov	r5, r0
 80030f4:	4639      	mov	r1, r7
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7ff fb16 	bl	8002728 <_malloc_r>
 80030fc:	b948      	cbnz	r0, 8003112 <__smakebuf_r+0x46>
 80030fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003102:	059a      	lsls	r2, r3, #22
 8003104:	d4ee      	bmi.n	80030e4 <__smakebuf_r+0x18>
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	f043 0302 	orr.w	r3, r3, #2
 800310e:	81a3      	strh	r3, [r4, #12]
 8003110:	e7e2      	b.n	80030d8 <__smakebuf_r+0xc>
 8003112:	89a3      	ldrh	r3, [r4, #12]
 8003114:	6020      	str	r0, [r4, #0]
 8003116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800311a:	81a3      	strh	r3, [r4, #12]
 800311c:	9b01      	ldr	r3, [sp, #4]
 800311e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003122:	b15b      	cbz	r3, 800313c <__smakebuf_r+0x70>
 8003124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003128:	4630      	mov	r0, r6
 800312a:	f000 f81d 	bl	8003168 <_isatty_r>
 800312e:	b128      	cbz	r0, 800313c <__smakebuf_r+0x70>
 8003130:	89a3      	ldrh	r3, [r4, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	81a3      	strh	r3, [r4, #12]
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	431d      	orrs	r5, r3
 8003140:	81a5      	strh	r5, [r4, #12]
 8003142:	e7cf      	b.n	80030e4 <__smakebuf_r+0x18>

08003144 <_fstat_r>:
 8003144:	b538      	push	{r3, r4, r5, lr}
 8003146:	4d07      	ldr	r5, [pc, #28]	@ (8003164 <_fstat_r+0x20>)
 8003148:	2300      	movs	r3, #0
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	602b      	str	r3, [r5, #0]
 8003152:	f000 f821 	bl	8003198 <_fstat>
 8003156:	1c43      	adds	r3, r0, #1
 8003158:	d102      	bne.n	8003160 <_fstat_r+0x1c>
 800315a:	682b      	ldr	r3, [r5, #0]
 800315c:	b103      	cbz	r3, 8003160 <_fstat_r+0x1c>
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	bd38      	pop	{r3, r4, r5, pc}
 8003162:	bf00      	nop
 8003164:	20000210 	.word	0x20000210

08003168 <_isatty_r>:
 8003168:	b538      	push	{r3, r4, r5, lr}
 800316a:	4d06      	ldr	r5, [pc, #24]	@ (8003184 <_isatty_r+0x1c>)
 800316c:	2300      	movs	r3, #0
 800316e:	4604      	mov	r4, r0
 8003170:	4608      	mov	r0, r1
 8003172:	602b      	str	r3, [r5, #0]
 8003174:	f000 f818 	bl	80031a8 <_isatty>
 8003178:	1c43      	adds	r3, r0, #1
 800317a:	d102      	bne.n	8003182 <_isatty_r+0x1a>
 800317c:	682b      	ldr	r3, [r5, #0]
 800317e:	b103      	cbz	r3, 8003182 <_isatty_r+0x1a>
 8003180:	6023      	str	r3, [r4, #0]
 8003182:	bd38      	pop	{r3, r4, r5, pc}
 8003184:	20000210 	.word	0x20000210

08003188 <_close>:
 8003188:	4b02      	ldr	r3, [pc, #8]	@ (8003194 <_close+0xc>)
 800318a:	2258      	movs	r2, #88	@ 0x58
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f04f 30ff 	mov.w	r0, #4294967295
 8003192:	4770      	bx	lr
 8003194:	20000210 	.word	0x20000210

08003198 <_fstat>:
 8003198:	4b02      	ldr	r3, [pc, #8]	@ (80031a4 <_fstat+0xc>)
 800319a:	2258      	movs	r2, #88	@ 0x58
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	f04f 30ff 	mov.w	r0, #4294967295
 80031a2:	4770      	bx	lr
 80031a4:	20000210 	.word	0x20000210

080031a8 <_isatty>:
 80031a8:	4b02      	ldr	r3, [pc, #8]	@ (80031b4 <_isatty+0xc>)
 80031aa:	2258      	movs	r2, #88	@ 0x58
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	2000      	movs	r0, #0
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	20000210 	.word	0x20000210

080031b8 <_lseek>:
 80031b8:	4b02      	ldr	r3, [pc, #8]	@ (80031c4 <_lseek+0xc>)
 80031ba:	2258      	movs	r2, #88	@ 0x58
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	f04f 30ff 	mov.w	r0, #4294967295
 80031c2:	4770      	bx	lr
 80031c4:	20000210 	.word	0x20000210

080031c8 <_read>:
 80031c8:	4b02      	ldr	r3, [pc, #8]	@ (80031d4 <_read+0xc>)
 80031ca:	2258      	movs	r2, #88	@ 0x58
 80031cc:	601a      	str	r2, [r3, #0]
 80031ce:	f04f 30ff 	mov.w	r0, #4294967295
 80031d2:	4770      	bx	lr
 80031d4:	20000210 	.word	0x20000210

080031d8 <_init>:
 80031d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031da:	bf00      	nop
 80031dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031de:	bc08      	pop	{r3}
 80031e0:	469e      	mov	lr, r3
 80031e2:	4770      	bx	lr

080031e4 <_fini>:
 80031e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e6:	bf00      	nop
 80031e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ea:	bc08      	pop	{r3}
 80031ec:	469e      	mov	lr, r3
 80031ee:	4770      	bx	lr
