
Q3_REG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000448  08000448  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000448  08000448  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  08000448  08000448  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000448  08000448  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000450  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000454  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000454  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000136c  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004d6  00000000  00000000  000033a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  00003878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  00003a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  00003b8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021a9  00000000  00000000  0002324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3205  00000000  00000000  000253f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e85fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000570  00000000  00000000  000e8640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000430 	.word	0x08000430

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000430 	.word	0x08000430

08000204 <delay>:
#include "stm32f4xx.h"

void delay(int seconds)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	for(;seconds>0;seconds--)
 800020c:	e00d      	b.n	800022a <delay+0x26>
		for(int count1 =0;count1<3000; count1++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delay+0x10>
	for(;seconds>0;seconds--)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcee      	bgt.n	800020e <delay+0xa>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <gpio_init>:

void gpio_init()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 11<<0;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <gpio_init+0x28>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a07      	ldr	r2, [pc, #28]	@ (8000268 <gpio_init+0x28>)
 800024a:	f043 030b 	orr.w	r3, r3, #11
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA ->MODER |= 0x54000;
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <gpio_init+0x2c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <gpio_init+0x2c>)
 8000256:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <main>:

int main()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
	gpio_init();
 8000274:	f7ff ffe4 	bl	8000240 <gpio_init>
	while(1)
	{
		if(GPIOB ->IDR & 1<<7)
 8000278:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <main+0x70>)
 800027a:	691b      	ldr	r3, [r3, #16]
 800027c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000280:	2b00      	cmp	r3, #0
 8000282:	d009      	beq.n	8000298 <main+0x28>
		{
			GPIOA ->ODR=1<<7;
 8000284:	4b17      	ldr	r3, [pc, #92]	@ (80002e4 <main+0x74>)
 8000286:	2280      	movs	r2, #128	@ 0x80
 8000288:	615a      	str	r2, [r3, #20]
			delay(500);
 800028a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800028e:	f7ff ffb9 	bl	8000204 <delay>
			GPIOA ->ODR=0<<7;
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <main+0x74>)
 8000294:	2200      	movs	r2, #0
 8000296:	615a      	str	r2, [r3, #20]
		}
		if(GPIOB ->IDR & 1<<8)
 8000298:	4b11      	ldr	r3, [pc, #68]	@ (80002e0 <main+0x70>)
 800029a:	691b      	ldr	r3, [r3, #16]
 800029c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d00a      	beq.n	80002ba <main+0x4a>
		{
			GPIOA ->ODR=1<<8;
 80002a4:	4b0f      	ldr	r3, [pc, #60]	@ (80002e4 <main+0x74>)
 80002a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002aa:	615a      	str	r2, [r3, #20]
			delay(500);
 80002ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002b0:	f7ff ffa8 	bl	8000204 <delay>
			GPIOA ->ODR=0<<8;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	@ (80002e4 <main+0x74>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	615a      	str	r2, [r3, #20]
		}
		if(GPIOB ->IDR & 1<<9)
 80002ba:	4b09      	ldr	r3, [pc, #36]	@ (80002e0 <main+0x70>)
 80002bc:	691b      	ldr	r3, [r3, #16]
 80002be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d0d8      	beq.n	8000278 <main+0x8>
		{
			GPIOA ->ODR=1<<9;
 80002c6:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <main+0x74>)
 80002c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002cc:	615a      	str	r2, [r3, #20]
			delay(500);
 80002ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002d2:	f7ff ff97 	bl	8000204 <delay>
			GPIOA ->ODR=0<<9;
 80002d6:	4b03      	ldr	r3, [pc, #12]	@ (80002e4 <main+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	615a      	str	r2, [r3, #20]
		if(GPIOB ->IDR & 1<<7)
 80002dc:	e7cc      	b.n	8000278 <main+0x8>
 80002de:	bf00      	nop
 80002e0:	40020400 	.word	0x40020400
 80002e4:	40020000 	.word	0x40020000

080002e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002ec:	bf00      	nop
 80002ee:	e7fd      	b.n	80002ec <NMI_Handler+0x4>

080002f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f4:	bf00      	nop
 80002f6:	e7fd      	b.n	80002f4 <HardFault_Handler+0x4>

080002f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <MemManage_Handler+0x4>

08000300 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000304:	bf00      	nop
 8000306:	e7fd      	b.n	8000304 <BusFault_Handler+0x4>

08000308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800030c:	bf00      	nop
 800030e:	e7fd      	b.n	800030c <UsageFault_Handler+0x4>

08000310 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000310:	b480      	push	{r7}
 8000312:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000314:	bf00      	nop
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800031e:	b480      	push	{r7}
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr

0800032c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr

0800033a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033a:	b580      	push	{r7, lr}
 800033c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800033e:	f000 f83f 	bl	80003c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000342:	bf00      	nop
 8000344:	bd80      	pop	{r7, pc}
	...

08000348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800034c:	4b06      	ldr	r3, [pc, #24]	@ (8000368 <SystemInit+0x20>)
 800034e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000352:	4a05      	ldr	r2, [pc, #20]	@ (8000368 <SystemInit+0x20>)
 8000354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000ed00 	.word	0xe000ed00

0800036c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800036c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000370:	f7ff ffea 	bl	8000348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000374:	480c      	ldr	r0, [pc, #48]	@ (80003a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000376:	490d      	ldr	r1, [pc, #52]	@ (80003ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000378:	4a0d      	ldr	r2, [pc, #52]	@ (80003b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800037a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800037c:	e002      	b.n	8000384 <LoopCopyDataInit>

0800037e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000382:	3304      	adds	r3, #4

08000384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000388:	d3f9      	bcc.n	800037e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038a:	4a0a      	ldr	r2, [pc, #40]	@ (80003b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800038c:	4c0a      	ldr	r4, [pc, #40]	@ (80003b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800038e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000390:	e001      	b.n	8000396 <LoopFillZerobss>

08000392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000394:	3204      	adds	r2, #4

08000396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000398:	d3fb      	bcc.n	8000392 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800039a:	f000 f825 	bl	80003e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800039e:	f7ff ff67 	bl	8000270 <main>
  bx  lr    
 80003a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003ac:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b0:	08000450 	.word	0x08000450
  ldr r2, =_sbss
 80003b4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003b8:	20000024 	.word	0x20000024

080003bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003bc:	e7fe      	b.n	80003bc <ADC_IRQHandler>
	...

080003c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c4:	4b06      	ldr	r3, [pc, #24]	@ (80003e0 <HAL_IncTick+0x20>)
 80003c6:	781b      	ldrb	r3, [r3, #0]
 80003c8:	461a      	mov	r2, r3
 80003ca:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <HAL_IncTick+0x24>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4413      	add	r3, r2
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <HAL_IncTick+0x24>)
 80003d2:	6013      	str	r3, [r2, #0]
}
 80003d4:	bf00      	nop
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	20000000 	.word	0x20000000
 80003e4:	20000020 	.word	0x20000020

080003e8 <__libc_init_array>:
 80003e8:	b570      	push	{r4, r5, r6, lr}
 80003ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000420 <__libc_init_array+0x38>)
 80003ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000424 <__libc_init_array+0x3c>)
 80003ee:	1b64      	subs	r4, r4, r5
 80003f0:	10a4      	asrs	r4, r4, #2
 80003f2:	2600      	movs	r6, #0
 80003f4:	42a6      	cmp	r6, r4
 80003f6:	d109      	bne.n	800040c <__libc_init_array+0x24>
 80003f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000428 <__libc_init_array+0x40>)
 80003fa:	4c0c      	ldr	r4, [pc, #48]	@ (800042c <__libc_init_array+0x44>)
 80003fc:	f000 f818 	bl	8000430 <_init>
 8000400:	1b64      	subs	r4, r4, r5
 8000402:	10a4      	asrs	r4, r4, #2
 8000404:	2600      	movs	r6, #0
 8000406:	42a6      	cmp	r6, r4
 8000408:	d105      	bne.n	8000416 <__libc_init_array+0x2e>
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000410:	4798      	blx	r3
 8000412:	3601      	adds	r6, #1
 8000414:	e7ee      	b.n	80003f4 <__libc_init_array+0xc>
 8000416:	f855 3b04 	ldr.w	r3, [r5], #4
 800041a:	4798      	blx	r3
 800041c:	3601      	adds	r6, #1
 800041e:	e7f2      	b.n	8000406 <__libc_init_array+0x1e>
 8000420:	08000448 	.word	0x08000448
 8000424:	08000448 	.word	0x08000448
 8000428:	08000448 	.word	0x08000448
 800042c:	0800044c 	.word	0x0800044c

08000430 <_init>:
 8000430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000432:	bf00      	nop
 8000434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000436:	bc08      	pop	{r3}
 8000438:	469e      	mov	lr, r3
 800043a:	4770      	bx	lr

0800043c <_fini>:
 800043c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043e:	bf00      	nop
 8000440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000442:	bc08      	pop	{r3}
 8000444:	469e      	mov	lr, r3
 8000446:	4770      	bx	lr
