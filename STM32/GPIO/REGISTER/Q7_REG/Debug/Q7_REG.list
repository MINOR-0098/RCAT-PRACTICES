
Q7_REG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800044c  0800044c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800044c  0800044c  0000144c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000450  08000450  00001450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000454  00002000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000458  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000458  00002024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000137e  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e9  00000000  00000000  000033b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d0  00000000  00000000  000038a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000144  00000000  00000000  00003a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f6c0  00000000  00000000  00003bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000219b  00000000  00000000  00023274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3205  00000000  00000000  0002540f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e8614  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000574  00000000  00000000  000e8658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000e8bcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000434 	.word	0x08000434

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000434 	.word	0x08000434

08000204 <delay>:
#include "stm32f4xx.h"

void delay(int seconds)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	for(;seconds>0;seconds--)
 800020c:	e00d      	b.n	800022a <delay+0x26>
		for(int count1 =0;count1<3000; count1++);
 800020e:	2300      	movs	r3, #0
 8000210:	60fb      	str	r3, [r7, #12]
 8000212:	e002      	b.n	800021a <delay+0x16>
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	3301      	adds	r3, #1
 8000218:	60fb      	str	r3, [r7, #12]
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000220:	4293      	cmp	r3, r2
 8000222:	ddf7      	ble.n	8000214 <delay+0x10>
	for(;seconds>0;seconds--)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3b01      	subs	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b00      	cmp	r3, #0
 800022e:	dcee      	bgt.n	800020e <delay+0xa>
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3714      	adds	r7, #20
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
	...

08000240 <gpio_init>:

void gpio_init()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 11<<0;
 8000244:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <gpio_init+0x28>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a07      	ldr	r2, [pc, #28]	@ (8000268 <gpio_init+0x28>)
 800024a:	f043 030b 	orr.w	r3, r3, #11
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA ->MODER |= 0x54000;
 8000250:	4b06      	ldr	r3, [pc, #24]	@ (800026c <gpio_init+0x2c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a05      	ldr	r2, [pc, #20]	@ (800026c <gpio_init+0x2c>)
 8000256:	f443 23a8 	orr.w	r3, r3, #344064	@ 0x54000
 800025a:	6013      	str	r3, [r2, #0]
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	40023800 	.word	0x40023800
 800026c:	40020000 	.word	0x40020000

08000270 <main>:

int main()
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
	int x=0;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
	gpio_init();
 800027a:	f7ff ffe1 	bl	8000240 <gpio_init>
	while(1)
	{
		if(GPIOB ->IDR & 1<<7)
 800027e:	4b19      	ldr	r3, [pc, #100]	@ (80002e4 <main+0x74>)
 8000280:	691b      	ldr	r3, [r3, #16]
 8000282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000286:	2b00      	cmp	r3, #0
 8000288:	d006      	beq.n	8000298 <main+0x28>
		{
			x=x+1;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
			delay(500);
 8000290:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000294:	f7ff ffb6 	bl	8000204 <delay>
		}
		switch (x) {
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	3b01      	subs	r3, #1
 800029c:	2b03      	cmp	r3, #3
 800029e:	d8ee      	bhi.n	800027e <main+0xe>
 80002a0:	a201      	add	r2, pc, #4	@ (adr r2, 80002a8 <main+0x38>)
 80002a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002a6:	bf00      	nop
 80002a8:	080002b9 	.word	0x080002b9
 80002ac:	080002c1 	.word	0x080002c1
 80002b0:	080002cb 	.word	0x080002cb
 80002b4:	080002d5 	.word	0x080002d5
		case 1:
			GPIOA ->ODR=1<<7;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	@ (80002e8 <main+0x78>)
 80002ba:	2280      	movs	r2, #128	@ 0x80
 80002bc:	615a      	str	r2, [r3, #20]
			break;
 80002be:	e010      	b.n	80002e2 <main+0x72>
		case 2:
			GPIOA ->ODR=11<<7;
 80002c0:	4b09      	ldr	r3, [pc, #36]	@ (80002e8 <main+0x78>)
 80002c2:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80002c6:	615a      	str	r2, [r3, #20]
			break;
 80002c8:	e00b      	b.n	80002e2 <main+0x72>
		case 3:
			GPIOA ->ODR=111<<7;
 80002ca:	4b07      	ldr	r3, [pc, #28]	@ (80002e8 <main+0x78>)
 80002cc:	f44f 525e 	mov.w	r2, #14208	@ 0x3780
 80002d0:	615a      	str	r2, [r3, #20]
			break;
 80002d2:	e006      	b.n	80002e2 <main+0x72>
		case 4:
			GPIOA ->ODR=000<<7;
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <main+0x78>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
			x=0;
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]
			break;
 80002de:	bf00      	nop
 80002e0:	e7cd      	b.n	800027e <main+0xe>
		if(GPIOB ->IDR & 1<<7)
 80002e2:	e7cc      	b.n	800027e <main+0xe>
 80002e4:	40020400 	.word	0x40020400
 80002e8:	40020000 	.word	0x40020000

080002ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <NMI_Handler+0x4>

080002f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002f8:	bf00      	nop
 80002fa:	e7fd      	b.n	80002f8 <HardFault_Handler+0x4>

080002fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <MemManage_Handler+0x4>

08000304 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000308:	bf00      	nop
 800030a:	e7fd      	b.n	8000308 <BusFault_Handler+0x4>

0800030c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000310:	bf00      	nop
 8000312:	e7fd      	b.n	8000310 <UsageFault_Handler+0x4>

08000314 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr

08000322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000322:	b480      	push	{r7}
 8000324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000326:	bf00      	nop
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr

0800033e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000342:	f000 f83f 	bl	80003c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000346:	bf00      	nop
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000350:	4b06      	ldr	r3, [pc, #24]	@ (800036c <SystemInit+0x20>)
 8000352:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000356:	4a05      	ldr	r2, [pc, #20]	@ (800036c <SystemInit+0x20>)
 8000358:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800035c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80003a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000374:	f7ff ffea 	bl	800034c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000378:	480c      	ldr	r0, [pc, #48]	@ (80003ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800037a:	490d      	ldr	r1, [pc, #52]	@ (80003b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800037c:	4a0d      	ldr	r2, [pc, #52]	@ (80003b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000380:	e002      	b.n	8000388 <LoopCopyDataInit>

08000382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000386:	3304      	adds	r3, #4

08000388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800038a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800038c:	d3f9      	bcc.n	8000382 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800038e:	4a0a      	ldr	r2, [pc, #40]	@ (80003b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000390:	4c0a      	ldr	r4, [pc, #40]	@ (80003bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000394:	e001      	b.n	800039a <LoopFillZerobss>

08000396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000398:	3204      	adds	r2, #4

0800039a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800039a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800039c:	d3fb      	bcc.n	8000396 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800039e:	f000 f825 	bl	80003ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003a2:	f7ff ff65 	bl	8000270 <main>
  bx  lr    
 80003a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003b4:	08000454 	.word	0x08000454
  ldr r2, =_sbss
 80003b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003bc:	20000024 	.word	0x20000024

080003c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003c0:	e7fe      	b.n	80003c0 <ADC_IRQHandler>
	...

080003c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003c8:	4b06      	ldr	r3, [pc, #24]	@ (80003e4 <HAL_IncTick+0x20>)
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	461a      	mov	r2, r3
 80003ce:	4b06      	ldr	r3, [pc, #24]	@ (80003e8 <HAL_IncTick+0x24>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4413      	add	r3, r2
 80003d4:	4a04      	ldr	r2, [pc, #16]	@ (80003e8 <HAL_IncTick+0x24>)
 80003d6:	6013      	str	r3, [r2, #0]
}
 80003d8:	bf00      	nop
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	20000000 	.word	0x20000000
 80003e8:	20000020 	.word	0x20000020

080003ec <__libc_init_array>:
 80003ec:	b570      	push	{r4, r5, r6, lr}
 80003ee:	4d0d      	ldr	r5, [pc, #52]	@ (8000424 <__libc_init_array+0x38>)
 80003f0:	4c0d      	ldr	r4, [pc, #52]	@ (8000428 <__libc_init_array+0x3c>)
 80003f2:	1b64      	subs	r4, r4, r5
 80003f4:	10a4      	asrs	r4, r4, #2
 80003f6:	2600      	movs	r6, #0
 80003f8:	42a6      	cmp	r6, r4
 80003fa:	d109      	bne.n	8000410 <__libc_init_array+0x24>
 80003fc:	4d0b      	ldr	r5, [pc, #44]	@ (800042c <__libc_init_array+0x40>)
 80003fe:	4c0c      	ldr	r4, [pc, #48]	@ (8000430 <__libc_init_array+0x44>)
 8000400:	f000 f818 	bl	8000434 <_init>
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	10a4      	asrs	r4, r4, #2
 8000408:	2600      	movs	r6, #0
 800040a:	42a6      	cmp	r6, r4
 800040c:	d105      	bne.n	800041a <__libc_init_array+0x2e>
 800040e:	bd70      	pop	{r4, r5, r6, pc}
 8000410:	f855 3b04 	ldr.w	r3, [r5], #4
 8000414:	4798      	blx	r3
 8000416:	3601      	adds	r6, #1
 8000418:	e7ee      	b.n	80003f8 <__libc_init_array+0xc>
 800041a:	f855 3b04 	ldr.w	r3, [r5], #4
 800041e:	4798      	blx	r3
 8000420:	3601      	adds	r6, #1
 8000422:	e7f2      	b.n	800040a <__libc_init_array+0x1e>
 8000424:	0800044c 	.word	0x0800044c
 8000428:	0800044c 	.word	0x0800044c
 800042c:	0800044c 	.word	0x0800044c
 8000430:	08000450 	.word	0x08000450

08000434 <_init>:
 8000434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000436:	bf00      	nop
 8000438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043a:	bc08      	pop	{r3}
 800043c:	469e      	mov	lr, r3
 800043e:	4770      	bx	lr

08000440 <_fini>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr
