
q4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d88  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003f58  08003f58  00004f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003fe0  08003fe0  0000505c  2**0
                  CONTENTS
  4 .ARM          00000008  08003fe0  08003fe0  00004fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fe8  08003fe8  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fe8  08003fe8  00004fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fec  08003fec  00004fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003ff0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  2000005c  0800404c  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  0800404c  00005284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aae0  00000000  00000000  0000508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018b1  00000000  00000000  0000fb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  00011420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b2  00000000  00000000  00011df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021834  00000000  00000000  000125a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d2a4  00000000  00000000  00033dd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb76c  00000000  00000000  0004107a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010c7e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dec  00000000  00000000  0010c82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0010f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f40 	.word	0x08003f40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003f40 	.word	0x08003f40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <lcd_send_cmd>:
/* USER CODE END PFP */
uint8_t get_time[7];
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void lcd_send_cmd (char cmd)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	4603      	mov	r3, r0
 80005a8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
  data_u = (cmd&0xf0);
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	f023 030f 	bic.w	r3, r3, #15
 80005b0:	73fb      	strb	r3, [r7, #15]
  data_l = ((cmd<<4)&0xf0);
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	73bb      	strb	r3, [r7, #14]
  uint8_t data_t[4];
  data_t[0] = data_u|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
 80005ba:	f043 030c 	orr.w	r3, r3, #12
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	723b      	strb	r3, [r7, #8]
  data_t[1] = data_u|0x08;  //en=0, rs=0 -> bxxxx1000
 80005c2:	7bfb      	ldrb	r3, [r7, #15]
 80005c4:	f043 0308 	orr.w	r3, r3, #8
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	727b      	strb	r3, [r7, #9]
  data_t[2] = data_l|0x0C;  //en=1, rs=0 -> bxxxx1100
 80005cc:	7bbb      	ldrb	r3, [r7, #14]
 80005ce:	f043 030c 	orr.w	r3, r3, #12
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	72bb      	strb	r3, [r7, #10]
  data_t[3] = data_l|0x08;  //en=0, rs=0 -> bxxxx1000
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	f043 0308 	orr.w	r3, r3, #8
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	72fb      	strb	r3, [r7, #11]
  HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005e0:	f107 0208 	add.w	r2, r7, #8
 80005e4:	2364      	movs	r3, #100	@ 0x64
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2304      	movs	r3, #4
 80005ea:	214e      	movs	r1, #78	@ 0x4e
 80005ec:	4803      	ldr	r0, [pc, #12]	@ (80005fc <lcd_send_cmd+0x5c>)
 80005ee:	f001 f88b 	bl	8001708 <HAL_I2C_Master_Transmit>
}
 80005f2:	bf00      	nop
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000078 	.word	0x20000078

08000600 <lcd_send_data>:
void lcd_send_data (char data)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	4603      	mov	r3, r0
 8000608:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1 -> bxxxx1101
 8000618:	7bfb      	ldrb	r3, [r7, #15]
 800061a:	f043 030d 	orr.w	r3, r3, #13
 800061e:	b2db      	uxtb	r3, r3
 8000620:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1 -> bxxxx1001
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	f043 0309 	orr.w	r3, r3, #9
 8000628:	b2db      	uxtb	r3, r3
 800062a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1 -> bxxxx1101
 800062c:	7bbb      	ldrb	r3, [r7, #14]
 800062e:	f043 030d 	orr.w	r3, r3, #13
 8000632:	b2db      	uxtb	r3, r3
 8000634:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1 -> bxxxx1001
 8000636:	7bbb      	ldrb	r3, [r7, #14]
 8000638:	f043 0309 	orr.w	r3, r3, #9
 800063c:	b2db      	uxtb	r3, r3
 800063e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000640:	f107 0208 	add.w	r2, r7, #8
 8000644:	2364      	movs	r3, #100	@ 0x64
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2304      	movs	r3, #4
 800064a:	214e      	movs	r1, #78	@ 0x4e
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <lcd_send_data+0x5c>)
 800064e:	f001 f85b 	bl	8001708 <HAL_I2C_Master_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20000078 	.word	0x20000078

08000660 <lcd_init>:
void lcd_init (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  // 4 bit initialisation
  HAL_Delay(50);  // wait for >40ms
 8000664:	2032      	movs	r0, #50	@ 0x32
 8000666:	f000 fc53 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x30);
 800066a:	2030      	movs	r0, #48	@ 0x30
 800066c:	f7ff ff98 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(5);  // wait for >4.1ms
 8000670:	2005      	movs	r0, #5
 8000672:	f000 fc4d 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000676:	2030      	movs	r0, #48	@ 0x30
 8000678:	f7ff ff92 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(1);  // wait for >100us
 800067c:	2001      	movs	r0, #1
 800067e:	f000 fc47 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x30);
 8000682:	2030      	movs	r0, #48	@ 0x30
 8000684:	f7ff ff8c 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(10);
 8000688:	200a      	movs	r0, #10
 800068a:	f000 fc41 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x20);  // 4bit mode
 800068e:	2020      	movs	r0, #32
 8000690:	f7ff ff86 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(10);
 8000694:	200a      	movs	r0, #10
 8000696:	f000 fc3b 	bl	8000f10 <HAL_Delay>

  // display initialisation
  lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800069a:	2028      	movs	r0, #40	@ 0x28
 800069c:	f7ff ff80 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(1);
 80006a0:	2001      	movs	r0, #1
 80006a2:	f000 fc35 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006a6:	2008      	movs	r0, #8
 80006a8:	f7ff ff7a 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f000 fc2f 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x01);  // clear display
 80006b2:	2001      	movs	r0, #1
 80006b4:	f7ff ff74 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f000 fc29 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006be:	2006      	movs	r0, #6
 80006c0:	f7ff ff6e 	bl	80005a0 <lcd_send_cmd>
  HAL_Delay(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fc23 	bl	8000f10 <HAL_Delay>
  lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80006ca:	200c      	movs	r0, #12
 80006cc:	f7ff ff68 	bl	80005a0 <lcd_send_cmd>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	6039      	str	r1, [r7, #0]
    switch (row)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d003      	beq.n	80006ec <lcd_put_cur+0x18>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d005      	beq.n	80006f6 <lcd_put_cur+0x22>
 80006ea:	e009      	b.n	8000700 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f2:	603b      	str	r3, [r7, #0]
            break;
 80006f4:	e004      	b.n	8000700 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80006fc:	603b      	str	r3, [r7, #0]
            break;
 80006fe:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ff4b 	bl	80005a0 <lcd_send_cmd>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcd_send_string>:
void lcd_send_string (char *str)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800071a:	e006      	b.n	800072a <lcd_send_string+0x18>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff6b 	bl	8000600 <lcd_send_data>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <lcd_send_string+0xa>
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	091b      	lsrs	r3, r3, #4
 800074a:	b2db      	uxtb	r3, r3
 800074c:	461a      	mov	r2, r3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	461a      	mov	r2, r3
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	4413      	add	r3, r2
}
 8000760:	4618      	mov	r0, r3
 8000762:	370c      	adds	r7, #12
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr

0800076c <Gets_Time>:

	HAL_I2C_Mem_Write(&hi2c1, rtc, 0x00, 1, set_time1, 7, 1000);
}
int seconds,minutes,hour,dayofweek,dayofmonth,month,year,flag;
void Gets_Time (void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, rtc, 0x00, 1, get_time, 7, 1000);
 8000772:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	2307      	movs	r3, #7
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	463b      	mov	r3, r7
 800077e:	9300      	str	r3, [sp, #0]
 8000780:	2301      	movs	r3, #1
 8000782:	2200      	movs	r2, #0
 8000784:	21d0      	movs	r1, #208	@ 0xd0
 8000786:	4823      	ldr	r0, [pc, #140]	@ (8000814 <Gets_Time+0xa8>)
 8000788:	f001 f8bc 	bl	8001904 <HAL_I2C_Mem_Read>
	seconds = bcdToDec(get_time[0]);
 800078c:	783b      	ldrb	r3, [r7, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff ffd4 	bl	800073c <bcdToDec>
 8000794:	4603      	mov	r3, r0
 8000796:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <Gets_Time+0xac>)
 8000798:	6013      	str	r3, [r2, #0]
	minutes = bcdToDec(get_time[1]);
 800079a:	787b      	ldrb	r3, [r7, #1]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ffcd 	bl	800073c <bcdToDec>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a1d      	ldr	r2, [pc, #116]	@ (800081c <Gets_Time+0xb0>)
 80007a6:	6013      	str	r3, [r2, #0]

	if(get_time[2]&1<<5)
 80007a8:	78bb      	ldrb	r3, [r7, #2]
 80007aa:	f003 0320 	and.w	r3, r3, #32
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <Gets_Time+0x4e>
	{
		flag=1;
 80007b2:	4b1b      	ldr	r3, [pc, #108]	@ (8000820 <Gets_Time+0xb4>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	e002      	b.n	80007c0 <Gets_Time+0x54>
	}
	else
		flag=0;
 80007ba:	4b19      	ldr	r3, [pc, #100]	@ (8000820 <Gets_Time+0xb4>)
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
	hour = (bcdToDec(get_time[2]&~(11<<5)));
 80007c0:	78bb      	ldrb	r3, [r7, #2]
 80007c2:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ffb7 	bl	800073c <bcdToDec>
 80007ce:	4603      	mov	r3, r0
 80007d0:	4a14      	ldr	r2, [pc, #80]	@ (8000824 <Gets_Time+0xb8>)
 80007d2:	6013      	str	r3, [r2, #0]
	dayofweek = bcdToDec(get_time[3]);
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffb0 	bl	800073c <bcdToDec>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a12      	ldr	r2, [pc, #72]	@ (8000828 <Gets_Time+0xbc>)
 80007e0:	6013      	str	r3, [r2, #0]
	dayofmonth = bcdToDec(get_time[4]);
 80007e2:	793b      	ldrb	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff ffa9 	bl	800073c <bcdToDec>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4a0f      	ldr	r2, [pc, #60]	@ (800082c <Gets_Time+0xc0>)
 80007ee:	6013      	str	r3, [r2, #0]
	month = bcdToDec(get_time[5]);
 80007f0:	797b      	ldrb	r3, [r7, #5]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ffa2 	bl	800073c <bcdToDec>
 80007f8:	4603      	mov	r3, r0
 80007fa:	4a0d      	ldr	r2, [pc, #52]	@ (8000830 <Gets_Time+0xc4>)
 80007fc:	6013      	str	r3, [r2, #0]
	year = bcdToDec(get_time[6]);
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff ff9b 	bl	800073c <bcdToDec>
 8000806:	4603      	mov	r3, r0
 8000808:	4a0a      	ldr	r2, [pc, #40]	@ (8000834 <Gets_Time+0xc8>)
 800080a:	6013      	str	r3, [r2, #0]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000078 	.word	0x20000078
 8000818:	20000114 	.word	0x20000114
 800081c:	20000118 	.word	0x20000118
 8000820:	20000130 	.word	0x20000130
 8000824:	2000011c 	.word	0x2000011c
 8000828:	20000120 	.word	0x20000120
 800082c:	20000124 	.word	0x20000124
 8000830:	20000128 	.word	0x20000128
 8000834:	2000012c 	.word	0x2000012c

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800083e:	f000 faf5 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000842:	f000 f85f 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000846:	f000 f923 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084a:	f000 f8f7 	bl	8000a3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800084e:	f000 f8c7 	bl	80009e0 <MX_I2C1_Init>
//  Set_Time(00, 30, 15, 5, 11, 2, 25);
  lcd_init();
 8000852:	f7ff ff05 	bl	8000660 <lcd_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Gets_Time();
 8000856:	f7ff ff89 	bl	800076c <Gets_Time>
	  HAL_Delay(200);
 800085a:	20c8      	movs	r0, #200	@ 0xc8
 800085c:	f000 fb58 	bl	8000f10 <HAL_Delay>
    /* USER CODE END WHILE */
	 	  if(flag==1)
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <main+0xa4>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d10b      	bne.n	8000880 <main+0x48>
	 	  {
	 		 sprintf (buffer, "%02d:%02d:%02d PM", hour, minutes, seconds);
 8000868:	4b1d      	ldr	r3, [pc, #116]	@ (80008e0 <main+0xa8>)
 800086a:	681a      	ldr	r2, [r3, #0]
 800086c:	4b1d      	ldr	r3, [pc, #116]	@ (80008e4 <main+0xac>)
 800086e:	6819      	ldr	r1, [r3, #0]
 8000870:	4b1d      	ldr	r3, [pc, #116]	@ (80008e8 <main+0xb0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4638      	mov	r0, r7
 8000876:	9300      	str	r3, [sp, #0]
 8000878:	460b      	mov	r3, r1
 800087a:	491c      	ldr	r1, [pc, #112]	@ (80008ec <main+0xb4>)
 800087c:	f002 fec0 	bl	8003600 <siprintf>
	 	  }
	 	  if(flag==0)
 8000880:	4b16      	ldr	r3, [pc, #88]	@ (80008dc <main+0xa4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d10b      	bne.n	80008a0 <main+0x68>
	 	  {
	 		 sprintf (buffer, "%02d:%02d:%02d AM", hour, minutes, seconds);
 8000888:	4b15      	ldr	r3, [pc, #84]	@ (80008e0 <main+0xa8>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <main+0xac>)
 800088e:	6819      	ldr	r1, [r3, #0]
 8000890:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <main+0xb0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4638      	mov	r0, r7
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	460b      	mov	r3, r1
 800089a:	4915      	ldr	r1, [pc, #84]	@ (80008f0 <main+0xb8>)
 800089c:	f002 feb0 	bl	8003600 <siprintf>
	 	  }
	 	  lcd_put_cur (0,0);
 80008a0:	2100      	movs	r1, #0
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff ff16 	bl	80006d4 <lcd_put_cur>
	 	  lcd_send_string(buffer);
 80008a8:	463b      	mov	r3, r7
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff ff31 	bl	8000712 <lcd_send_string>

	 	  sprintf (buffer, "%02d-%02d-20%02d", dayofmonth, month, year);
 80008b0:	4b10      	ldr	r3, [pc, #64]	@ (80008f4 <main+0xbc>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <main+0xc0>)
 80008b6:	6819      	ldr	r1, [r3, #0]
 80008b8:	4b10      	ldr	r3, [pc, #64]	@ (80008fc <main+0xc4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4638      	mov	r0, r7
 80008be:	9300      	str	r3, [sp, #0]
 80008c0:	460b      	mov	r3, r1
 80008c2:	490f      	ldr	r1, [pc, #60]	@ (8000900 <main+0xc8>)
 80008c4:	f002 fe9c 	bl	8003600 <siprintf>
	 	  lcd_put_cur(1, 0);
 80008c8:	2100      	movs	r1, #0
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff ff02 	bl	80006d4 <lcd_put_cur>
	 	  lcd_send_string(buffer);
 80008d0:	463b      	mov	r3, r7
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff ff1d 	bl	8000712 <lcd_send_string>
	  Gets_Time();
 80008d8:	e7bd      	b.n	8000856 <main+0x1e>
 80008da:	bf00      	nop
 80008dc:	20000130 	.word	0x20000130
 80008e0:	2000011c 	.word	0x2000011c
 80008e4:	20000118 	.word	0x20000118
 80008e8:	20000114 	.word	0x20000114
 80008ec:	08003f58 	.word	0x08003f58
 80008f0:	08003f6c 	.word	0x08003f6c
 80008f4:	20000124 	.word	0x20000124
 80008f8:	20000128 	.word	0x20000128
 80008fc:	2000012c 	.word	0x2000012c
 8000900:	08003f80 	.word	0x08003f80

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	@ 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	2234      	movs	r2, #52	@ 0x34
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f002 fe94 	bl	8003640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	f107 0308 	add.w	r3, r7, #8
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	4b2a      	ldr	r3, [pc, #168]	@ (80009d8 <SystemClock_Config+0xd4>)
 800092e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000930:	4a29      	ldr	r2, [pc, #164]	@ (80009d8 <SystemClock_Config+0xd4>)
 8000932:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000936:	6413      	str	r3, [r2, #64]	@ 0x40
 8000938:	4b27      	ldr	r3, [pc, #156]	@ (80009d8 <SystemClock_Config+0xd4>)
 800093a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000944:	2300      	movs	r3, #0
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <SystemClock_Config+0xd8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000950:	4a22      	ldr	r2, [pc, #136]	@ (80009dc <SystemClock_Config+0xd8>)
 8000952:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000956:	6013      	str	r3, [r2, #0]
 8000958:	4b20      	ldr	r3, [pc, #128]	@ (80009dc <SystemClock_Config+0xd8>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000964:	2302      	movs	r3, #2
 8000966:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000968:	2301      	movs	r3, #1
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800096c:	2310      	movs	r3, #16
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000970:	2302      	movs	r3, #2
 8000972:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000974:	2300      	movs	r3, #0
 8000976:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000978:	2310      	movs	r3, #16
 800097a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800097c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000980:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000982:	2304      	movs	r3, #4
 8000984:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000986:	2302      	movs	r3, #2
 8000988:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4618      	mov	r0, r3
 8000994:	f002 f8d2 	bl	8002b3c <HAL_RCC_OscConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800099e:	f000 f8e5 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009a2:	230f      	movs	r3, #15
 80009a4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a6:	2302      	movs	r3, #2
 80009a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	2300      	movs	r3, #0
 80009ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009b8:	f107 0308 	add.w	r3, r7, #8
 80009bc:	2102      	movs	r1, #2
 80009be:	4618      	mov	r0, r3
 80009c0:	f001 fd72 	bl	80024a8 <HAL_RCC_ClockConfig>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemClock_Config+0xca>
  {
    Error_Handler();
 80009ca:	f000 f8cf 	bl	8000b6c <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	3750      	adds	r7, #80	@ 0x50
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40007000 	.word	0x40007000

080009e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b12      	ldr	r3, [pc, #72]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009e6:	4a13      	ldr	r2, [pc, #76]	@ (8000a34 <MX_I2C1_Init+0x54>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009ea:	4b11      	ldr	r3, [pc, #68]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009ec:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_I2C1_Init+0x58>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MX_I2C1_Init+0x50>)
 80009fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a04:	4b0a      	ldr	r3, [pc, #40]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a0a:	4b09      	ldr	r3, [pc, #36]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a10:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_I2C1_Init+0x50>)
 8000a1e:	f000 fd2f 	bl	8001480 <HAL_I2C_Init>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a28:	f000 f8a0 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000078 	.word	0x20000078
 8000a34:	40005400 	.word	0x40005400
 8000a38:	000186a0 	.word	0x000186a0

08000a3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <MX_USART2_UART_Init+0x50>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b09      	ldr	r3, [pc, #36]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a72:	4805      	ldr	r0, [pc, #20]	@ (8000a88 <MX_USART2_UART_Init+0x4c>)
 8000a74:	f002 fb00 	bl	8003078 <HAL_UART_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a7e:	f000 f875 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	200000cc 	.word	0x200000cc
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	4a2c      	ldr	r2, [pc, #176]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ab6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	4a25      	ldr	r2, [pc, #148]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	4a17      	ldr	r2, [pc, #92]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b0a:	4b15      	ldr	r3, [pc, #84]	@ (8000b60 <MX_GPIO_Init+0xd0>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4812      	ldr	r0, [pc, #72]	@ (8000b64 <MX_GPIO_Init+0xd4>)
 8000b1c:	f000 fc96 	bl	800144c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b26:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	4619      	mov	r1, r3
 8000b36:	480c      	ldr	r0, [pc, #48]	@ (8000b68 <MX_GPIO_Init+0xd8>)
 8000b38:	f000 faf4 	bl	8001124 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b3c:	2320      	movs	r3, #32
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b40:	2301      	movs	r3, #1
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	f107 0314 	add.w	r3, r7, #20
 8000b50:	4619      	mov	r1, r3
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_GPIO_Init+0xd4>)
 8000b54:	f000 fae6 	bl	8001124 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b58:	bf00      	nop
 8000b5a:	3728      	adds	r7, #40	@ 0x28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020000 	.word	0x40020000
 8000b68:	40020800 	.word	0x40020800

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b86:	4a0f      	ldr	r2, [pc, #60]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b96:	607b      	str	r3, [r7, #4]
 8000b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000baa:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bb2:	603b      	str	r3, [r7, #0]
 8000bb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bb6:	2007      	movs	r0, #7
 8000bb8:	f000 fa80 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	40023800 	.word	0x40023800

08000bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	@ 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a19      	ldr	r2, [pc, #100]	@ (8000c4c <HAL_I2C_MspInit+0x84>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d12b      	bne.n	8000c42 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a17      	ldr	r2, [pc, #92]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b15      	ldr	r3, [pc, #84]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c06:	23c0      	movs	r3, #192	@ 0xc0
 8000c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c0a:	2312      	movs	r3, #18
 8000c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c16:	2304      	movs	r3, #4
 8000c18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	@ (8000c54 <HAL_I2C_MspInit+0x8c>)
 8000c22:	f000 fa7f 	bl	8001124 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_I2C_MspInit+0x88>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c42:	bf00      	nop
 8000c44:	3728      	adds	r7, #40	@ 0x28
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40005400 	.word	0x40005400
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020400 	.word	0x40020400

08000c58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08a      	sub	sp, #40	@ 0x28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
 8000c6c:	60da      	str	r2, [r3, #12]
 8000c6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a19      	ldr	r2, [pc, #100]	@ (8000cdc <HAL_UART_MspInit+0x84>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d12b      	bne.n	8000cd2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c82:	4a17      	ldr	r2, [pc, #92]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c92:	613b      	str	r3, [r7, #16]
 8000c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <HAL_UART_MspInit+0x88>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cb2:	230c      	movs	r3, #12
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <HAL_UART_MspInit+0x8c>)
 8000cce:	f000 fa29 	bl	8001124 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	@ 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <NMI_Handler+0x4>

08000cf0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf4:	bf00      	nop
 8000cf6:	e7fd      	b.n	8000cf4 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	bf00      	nop
 8000cfe:	e7fd      	b.n	8000cfc <MemManage_Handler+0x4>

08000d00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d04:	bf00      	nop
 8000d06:	e7fd      	b.n	8000d04 <BusFault_Handler+0x4>

08000d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d0c:	bf00      	nop
 8000d0e:	e7fd      	b.n	8000d0c <UsageFault_Handler+0x4>

08000d10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3e:	f000 f8c7 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f002 fc6a 	bl	8003650 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000134 	.word	0x20000134
 8000db0:	20000288 	.word	0x20000288

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e06:	f002 fc29 	bl	800365c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fd15 	bl	8000838 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e1c:	08003ff0 	.word	0x08003ff0
  ldr r2, =_sbss
 8000e20:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e24:	20000284 	.word	0x20000284

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f931 	bl	80010bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fe8a 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f93b 	bl	800110a <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 f911 	bl	80010d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000138 	.word	0x20000138

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000138 	.word	0x20000138

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	@ (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	@ (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	6039      	str	r1, [r7, #0]
 8000fc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	db0a      	blt.n	8000fe6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	490c      	ldr	r1, [pc, #48]	@ (8001008 <__NVIC_SetPriority+0x4c>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	0112      	lsls	r2, r2, #4
 8000fdc:	b2d2      	uxtb	r2, r2
 8000fde:	440b      	add	r3, r1
 8000fe0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe4:	e00a      	b.n	8000ffc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4908      	ldr	r1, [pc, #32]	@ (800100c <__NVIC_SetPriority+0x50>)
 8000fec:	79fb      	ldrb	r3, [r7, #7]
 8000fee:	f003 030f 	and.w	r3, r3, #15
 8000ff2:	3b04      	subs	r3, #4
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	440b      	add	r3, r1
 8000ffa:	761a      	strb	r2, [r3, #24]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	@ 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	f003 0307 	and.w	r3, r3, #7
 8001022:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f1c3 0307 	rsb	r3, r3, #7
 800102a:	2b04      	cmp	r3, #4
 800102c:	bf28      	it	cs
 800102e:	2304      	movcs	r3, #4
 8001030:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3304      	adds	r3, #4
 8001036:	2b06      	cmp	r3, #6
 8001038:	d902      	bls.n	8001040 <NVIC_EncodePriority+0x30>
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	3b03      	subs	r3, #3
 800103e:	e000      	b.n	8001042 <NVIC_EncodePriority+0x32>
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	f04f 32ff 	mov.w	r2, #4294967295
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43da      	mvns	r2, r3
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	401a      	ands	r2, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001058:	f04f 31ff 	mov.w	r1, #4294967295
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	fa01 f303 	lsl.w	r3, r1, r3
 8001062:	43d9      	mvns	r1, r3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	4313      	orrs	r3, r2
         );
}
 800106a:	4618      	mov	r0, r3
 800106c:	3724      	adds	r7, #36	@ 0x24
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
	...

08001078 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3b01      	subs	r3, #1
 8001084:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001088:	d301      	bcc.n	800108e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800108a:	2301      	movs	r3, #1
 800108c:	e00f      	b.n	80010ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108e:	4a0a      	ldr	r2, [pc, #40]	@ (80010b8 <SysTick_Config+0x40>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001096:	210f      	movs	r1, #15
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f7ff ff8e 	bl	8000fbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a0:	4b05      	ldr	r3, [pc, #20]	@ (80010b8 <SysTick_Config+0x40>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	4b04      	ldr	r3, [pc, #16]	@ (80010b8 <SysTick_Config+0x40>)
 80010a8:	2207      	movs	r2, #7
 80010aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	e000e010 	.word	0xe000e010

080010bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f7ff ff47 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
 80010de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010e4:	f7ff ff5c 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	68b9      	ldr	r1, [r7, #8]
 80010ee:	6978      	ldr	r0, [r7, #20]
 80010f0:	f7ff ff8e 	bl	8001010 <NVIC_EncodePriority>
 80010f4:	4602      	mov	r2, r0
 80010f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff ff5d 	bl	8000fbc <__NVIC_SetPriority>
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff ffb0 	bl	8001078 <SysTick_Config>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
	...

08001124 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001124:	b480      	push	{r7}
 8001126:	b089      	sub	sp, #36	@ 0x24
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001132:	2300      	movs	r3, #0
 8001134:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	e165      	b.n	800140c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001140:	2201      	movs	r2, #1
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8154 	bne.w	8001406 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b01      	cmp	r3, #1
 8001168:	d005      	beq.n	8001176 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001172:	2b02      	cmp	r3, #2
 8001174:	d130      	bne.n	80011d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	68da      	ldr	r2, [r3, #12]
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	005b      	lsls	r3, r3, #1
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ac:	2201      	movs	r2, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	f003 0201 	and.w	r2, r3, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b03      	cmp	r3, #3
 80011e2:	d017      	beq.n	8001214 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	689a      	ldr	r2, [r3, #8]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d123      	bne.n	8001268 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	08da      	lsrs	r2, r3, #3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3208      	adds	r2, #8
 8001228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800122c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	f003 0307 	and.w	r3, r3, #7
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	220f      	movs	r2, #15
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	69ba      	ldr	r2, [r7, #24]
 8001240:	4013      	ands	r3, r2
 8001242:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	691a      	ldr	r2, [r3, #16]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	4313      	orrs	r3, r2
 8001258:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	08da      	lsrs	r2, r3, #3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3208      	adds	r2, #8
 8001262:	69b9      	ldr	r1, [r7, #24]
 8001264:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	f000 80ae 	beq.w	8001406 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80012b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001424 <HAL_GPIO_Init+0x300>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012c6:	4a58      	ldr	r2, [pc, #352]	@ (8001428 <HAL_GPIO_Init+0x304>)
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	3302      	adds	r3, #2
 80012ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	220f      	movs	r2, #15
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a4f      	ldr	r2, [pc, #316]	@ (800142c <HAL_GPIO_Init+0x308>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d025      	beq.n	800133e <HAL_GPIO_Init+0x21a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a4e      	ldr	r2, [pc, #312]	@ (8001430 <HAL_GPIO_Init+0x30c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d01f      	beq.n	800133a <HAL_GPIO_Init+0x216>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a4d      	ldr	r2, [pc, #308]	@ (8001434 <HAL_GPIO_Init+0x310>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d019      	beq.n	8001336 <HAL_GPIO_Init+0x212>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a4c      	ldr	r2, [pc, #304]	@ (8001438 <HAL_GPIO_Init+0x314>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d013      	beq.n	8001332 <HAL_GPIO_Init+0x20e>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a4b      	ldr	r2, [pc, #300]	@ (800143c <HAL_GPIO_Init+0x318>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d00d      	beq.n	800132e <HAL_GPIO_Init+0x20a>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a4a      	ldr	r2, [pc, #296]	@ (8001440 <HAL_GPIO_Init+0x31c>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d007      	beq.n	800132a <HAL_GPIO_Init+0x206>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a49      	ldr	r2, [pc, #292]	@ (8001444 <HAL_GPIO_Init+0x320>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_GPIO_Init+0x202>
 8001322:	2306      	movs	r3, #6
 8001324:	e00c      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 8001326:	2307      	movs	r3, #7
 8001328:	e00a      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 800132a:	2305      	movs	r3, #5
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 800132e:	2304      	movs	r3, #4
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x21c>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	@ (8001428 <HAL_GPIO_Init+0x304>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b3a      	ldr	r3, [pc, #232]	@ (8001448 <HAL_GPIO_Init+0x324>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a31      	ldr	r2, [pc, #196]	@ (8001448 <HAL_GPIO_Init+0x324>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2f      	ldr	r3, [pc, #188]	@ (8001448 <HAL_GPIO_Init+0x324>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a26      	ldr	r2, [pc, #152]	@ (8001448 <HAL_GPIO_Init+0x324>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b25      	ldr	r3, [pc, #148]	@ (8001448 <HAL_GPIO_Init+0x324>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001448 <HAL_GPIO_Init+0x324>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001448 <HAL_GPIO_Init+0x324>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_GPIO_Init+0x324>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f ae96 	bls.w	8001140 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	@ 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40021400 	.word	0x40021400
 8001444:	40021800 	.word	0x40021800
 8001448:	40013c00 	.word	0x40013c00

0800144c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	807b      	strh	r3, [r7, #2]
 8001458:	4613      	mov	r3, r2
 800145a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800145c:	787b      	ldrb	r3, [r7, #1]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001468:	e003      	b.n	8001472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800146a:	887b      	ldrh	r3, [r7, #2]
 800146c:	041a      	lsls	r2, r3, #16
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	619a      	str	r2, [r3, #24]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e12b      	b.n	80016ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d106      	bne.n	80014ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff fb8e 	bl	8000bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f022 0201 	bic.w	r2, r2, #1
 80014c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80014d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80014e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014e4:	f001 f8d2 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 80014e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	4a81      	ldr	r2, [pc, #516]	@ (80016f4 <HAL_I2C_Init+0x274>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d807      	bhi.n	8001504 <HAL_I2C_Init+0x84>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4a80      	ldr	r2, [pc, #512]	@ (80016f8 <HAL_I2C_Init+0x278>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	bf94      	ite	ls
 80014fc:	2301      	movls	r3, #1
 80014fe:	2300      	movhi	r3, #0
 8001500:	b2db      	uxtb	r3, r3
 8001502:	e006      	b.n	8001512 <HAL_I2C_Init+0x92>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4a7d      	ldr	r2, [pc, #500]	@ (80016fc <HAL_I2C_Init+0x27c>)
 8001508:	4293      	cmp	r3, r2
 800150a:	bf94      	ite	ls
 800150c:	2301      	movls	r3, #1
 800150e:	2300      	movhi	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e0e7      	b.n	80016ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4a78      	ldr	r2, [pc, #480]	@ (8001700 <HAL_I2C_Init+0x280>)
 800151e:	fba2 2303 	umull	r2, r3, r2, r3
 8001522:	0c9b      	lsrs	r3, r3, #18
 8001524:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68ba      	ldr	r2, [r7, #8]
 8001536:	430a      	orrs	r2, r1
 8001538:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4a6a      	ldr	r2, [pc, #424]	@ (80016f4 <HAL_I2C_Init+0x274>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d802      	bhi.n	8001554 <HAL_I2C_Init+0xd4>
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	3301      	adds	r3, #1
 8001552:	e009      	b.n	8001568 <HAL_I2C_Init+0xe8>
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	4a69      	ldr	r2, [pc, #420]	@ (8001704 <HAL_I2C_Init+0x284>)
 8001560:	fba2 2303 	umull	r2, r3, r2, r3
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	3301      	adds	r3, #1
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	430b      	orrs	r3, r1
 800156e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800157a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	495c      	ldr	r1, [pc, #368]	@ (80016f4 <HAL_I2C_Init+0x274>)
 8001584:	428b      	cmp	r3, r1
 8001586:	d819      	bhi.n	80015bc <HAL_I2C_Init+0x13c>
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	1e59      	subs	r1, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	fbb1 f3f3 	udiv	r3, r1, r3
 8001596:	1c59      	adds	r1, r3, #1
 8001598:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800159c:	400b      	ands	r3, r1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d00a      	beq.n	80015b8 <HAL_I2C_Init+0x138>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	1e59      	subs	r1, r3, #1
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80015b0:	3301      	adds	r3, #1
 80015b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015b6:	e051      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015b8:	2304      	movs	r3, #4
 80015ba:	e04f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d111      	bne.n	80015e8 <HAL_I2C_Init+0x168>
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	1e58      	subs	r0, r3, #1
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	440b      	add	r3, r1
 80015d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	e012      	b.n	800160e <HAL_I2C_Init+0x18e>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	1e58      	subs	r0, r3, #1
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6859      	ldr	r1, [r3, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	440b      	add	r3, r1
 80015f6:	0099      	lsls	r1, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001604:	2b00      	cmp	r3, #0
 8001606:	bf0c      	ite	eq
 8001608:	2301      	moveq	r3, #1
 800160a:	2300      	movne	r3, #0
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_I2C_Init+0x196>
 8001612:	2301      	movs	r3, #1
 8001614:	e022      	b.n	800165c <HAL_I2C_Init+0x1dc>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10e      	bne.n	800163c <HAL_I2C_Init+0x1bc>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	1e58      	subs	r0, r3, #1
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6859      	ldr	r1, [r3, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	440b      	add	r3, r1
 800162c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001630:	3301      	adds	r3, #1
 8001632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800163a:	e00f      	b.n	800165c <HAL_I2C_Init+0x1dc>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	1e58      	subs	r0, r3, #1
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6859      	ldr	r1, [r3, #4]
 8001644:	460b      	mov	r3, r1
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	440b      	add	r3, r1
 800164a:	0099      	lsls	r1, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001652:	3301      	adds	r3, #1
 8001654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001658:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800165c:	6879      	ldr	r1, [r7, #4]
 800165e:	6809      	ldr	r1, [r1, #0]
 8001660:	4313      	orrs	r3, r2
 8001662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	69da      	ldr	r2, [r3, #28]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a1b      	ldr	r3, [r3, #32]
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	430a      	orrs	r2, r1
 800167e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800168a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6911      	ldr	r1, [r2, #16]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	68d2      	ldr	r2, [r2, #12]
 8001696:	4311      	orrs	r1, r2
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6812      	ldr	r2, [r2, #0]
 800169c:	430b      	orrs	r3, r1
 800169e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	68db      	ldr	r3, [r3, #12]
 80016a6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2220      	movs	r2, #32
 80016d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	000186a0 	.word	0x000186a0
 80016f8:	001e847f 	.word	0x001e847f
 80016fc:	003d08ff 	.word	0x003d08ff
 8001700:	431bde83 	.word	0x431bde83
 8001704:	10624dd3 	.word	0x10624dd3

08001708 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af02      	add	r7, sp, #8
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	461a      	mov	r2, r3
 8001714:	460b      	mov	r3, r1
 8001716:	817b      	strh	r3, [r7, #10]
 8001718:	4613      	mov	r3, r2
 800171a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800171c:	f7ff fbec 	bl	8000ef8 <HAL_GetTick>
 8001720:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b20      	cmp	r3, #32
 800172c:	f040 80e0 	bne.w	80018f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	2319      	movs	r3, #25
 8001736:	2201      	movs	r2, #1
 8001738:	4970      	ldr	r1, [pc, #448]	@ (80018fc <HAL_I2C_Master_Transmit+0x1f4>)
 800173a:	68f8      	ldr	r0, [r7, #12]
 800173c:	f000 fc7e 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
 8001748:	e0d3      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001750:	2b01      	cmp	r3, #1
 8001752:	d101      	bne.n	8001758 <HAL_I2C_Master_Transmit+0x50>
 8001754:	2302      	movs	r3, #2
 8001756:	e0cc      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2201      	movs	r2, #1
 800175c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	2b01      	cmp	r3, #1
 800176c:	d007      	beq.n	800177e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f042 0201 	orr.w	r2, r2, #1
 800177c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800178c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2221      	movs	r2, #33	@ 0x21
 8001792:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2210      	movs	r2, #16
 800179a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	893a      	ldrh	r2, [r7, #8]
 80017ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	4a50      	ldr	r2, [pc, #320]	@ (8001900 <HAL_I2C_Master_Transmit+0x1f8>)
 80017be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017c0:	8979      	ldrh	r1, [r7, #10]
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	6a3a      	ldr	r2, [r7, #32]
 80017c6:	68f8      	ldr	r0, [r7, #12]
 80017c8:	f000 face 	bl	8001d68 <I2C_MasterRequestWrite>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e08d      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	695b      	ldr	r3, [r3, #20]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	613b      	str	r3, [r7, #16]
 80017ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017ec:	e066      	b.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	6a39      	ldr	r1, [r7, #32]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 fd3c 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00d      	beq.n	800181a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001802:	2b04      	cmp	r3, #4
 8001804:	d107      	bne.n	8001816 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001814:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e06b      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	781a      	ldrb	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	1c5a      	adds	r2, r3, #1
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001834:	b29b      	uxth	r3, r3
 8001836:	3b01      	subs	r3, #1
 8001838:	b29a      	uxth	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001842:	3b01      	subs	r3, #1
 8001844:	b29a      	uxth	r2, r3
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695b      	ldr	r3, [r3, #20]
 8001850:	f003 0304 	and.w	r3, r3, #4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d11b      	bne.n	8001890 <HAL_I2C_Master_Transmit+0x188>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800185c:	2b00      	cmp	r3, #0
 800185e:	d017      	beq.n	8001890 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	781a      	ldrb	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001870:	1c5a      	adds	r2, r3, #1
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800187a:	b29b      	uxth	r3, r3
 800187c:	3b01      	subs	r3, #1
 800187e:	b29a      	uxth	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001888:	3b01      	subs	r3, #1
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	6a39      	ldr	r1, [r7, #32]
 8001894:	68f8      	ldr	r0, [r7, #12]
 8001896:	f000 fd33 	bl	8002300 <I2C_WaitOnBTFFlagUntilTimeout>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d00d      	beq.n	80018bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a4:	2b04      	cmp	r3, #4
 80018a6:	d107      	bne.n	80018b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681a      	ldr	r2, [r3, #0]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e01a      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d194      	bne.n	80017ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80018d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2220      	movs	r2, #32
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80018ec:	2300      	movs	r3, #0
 80018ee:	e000      	b.n	80018f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018f0:	2302      	movs	r3, #2
  }
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	00100002 	.word	0x00100002
 8001900:	ffff0000 	.word	0xffff0000

08001904 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08c      	sub	sp, #48	@ 0x30
 8001908:	af02      	add	r7, sp, #8
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	4608      	mov	r0, r1
 800190e:	4611      	mov	r1, r2
 8001910:	461a      	mov	r2, r3
 8001912:	4603      	mov	r3, r0
 8001914:	817b      	strh	r3, [r7, #10]
 8001916:	460b      	mov	r3, r1
 8001918:	813b      	strh	r3, [r7, #8]
 800191a:	4613      	mov	r3, r2
 800191c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800191e:	f7ff faeb 	bl	8000ef8 <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b20      	cmp	r3, #32
 800192e:	f040 8214 	bne.w	8001d5a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2319      	movs	r3, #25
 8001938:	2201      	movs	r2, #1
 800193a:	497b      	ldr	r1, [pc, #492]	@ (8001b28 <HAL_I2C_Mem_Read+0x224>)
 800193c:	68f8      	ldr	r0, [r7, #12]
 800193e:	f000 fb7d 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001948:	2302      	movs	r3, #2
 800194a:	e207      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001952:	2b01      	cmp	r3, #1
 8001954:	d101      	bne.n	800195a <HAL_I2C_Mem_Read+0x56>
 8001956:	2302      	movs	r3, #2
 8001958:	e200      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b01      	cmp	r3, #1
 800196e:	d007      	beq.n	8001980 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f042 0201 	orr.w	r2, r2, #1
 800197e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800198e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2222      	movs	r2, #34	@ 0x22
 8001994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2240      	movs	r2, #64	@ 0x40
 800199c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2200      	movs	r2, #0
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80019b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b6:	b29a      	uxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4a5b      	ldr	r2, [pc, #364]	@ (8001b2c <HAL_I2C_Mem_Read+0x228>)
 80019c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80019c2:	88f8      	ldrh	r0, [r7, #6]
 80019c4:	893a      	ldrh	r2, [r7, #8]
 80019c6:	8979      	ldrh	r1, [r7, #10]
 80019c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	4603      	mov	r3, r0
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	f000 fa4a 	bl	8001e6c <I2C_RequestMemoryRead>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e1bc      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d113      	bne.n	8001a12 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ea:	2300      	movs	r3, #0
 80019ec:	623b      	str	r3, [r7, #32]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	623b      	str	r3, [r7, #32]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	623b      	str	r3, [r7, #32]
 80019fe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	e190      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d11b      	bne.n	8001a52 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61fb      	str	r3, [r7, #28]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	61fb      	str	r3, [r7, #28]
 8001a3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	e170      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d11b      	bne.n	8001a92 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	699b      	ldr	r3, [r3, #24]
 8001a8c:	61bb      	str	r3, [r7, #24]
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	e150      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001aa8:	e144      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	f200 80f1 	bhi.w	8001c96 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d123      	bne.n	8001b04 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001abe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 fc65 	bl	8002390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e145      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b02:	e117      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d14e      	bne.n	8001baa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b12:	2200      	movs	r2, #0
 8001b14:	4906      	ldr	r1, [pc, #24]	@ (8001b30 <HAL_I2C_Mem_Read+0x22c>)
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f000 fa90 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d008      	beq.n	8001b34 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e11a      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
 8001b26:	bf00      	nop
 8001b28:	00100002 	.word	0x00100002
 8001b2c:	ffff0000 	.word	0xffff0000
 8001b30:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b42:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	691a      	ldr	r2, [r3, #16]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b60:	3b01      	subs	r3, #1
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b6c:	b29b      	uxth	r3, r3
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	b29a      	uxth	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b92:	3b01      	subs	r3, #1
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001ba8:	e0c4      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	496c      	ldr	r1, [pc, #432]	@ (8001d64 <HAL_I2C_Mem_Read+0x460>)
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 fa41 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e0cb      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001bd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4955      	ldr	r1, [pc, #340]	@ (8001d64 <HAL_I2C_Mem_Read+0x460>)
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f000 fa13 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e09d      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6c:	b2d2      	uxtb	r2, r2
 8001c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c74:	1c5a      	adds	r2, r3, #1
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c94:	e04e      	b.n	8001d34 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c98:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 fb78 	bl	8002390 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e058      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb4:	b2d2      	uxtb	r2, r2
 8001cb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	d124      	bne.n	8001d34 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d107      	bne.n	8001d02 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d00:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f47f aeb6 	bne.w	8001aaa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d56:	2300      	movs	r3, #0
 8001d58:	e000      	b.n	8001d5c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8001d5a:	2302      	movs	r3, #2
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	00010004 	.word	0x00010004

08001d68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	603b      	str	r3, [r7, #0]
 8001d74:	460b      	mov	r3, r1
 8001d76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d006      	beq.n	8001d92 <I2C_MasterRequestWrite+0x2a>
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d003      	beq.n	8001d92 <I2C_MasterRequestWrite+0x2a>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001d90:	d108      	bne.n	8001da4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	e00b      	b.n	8001dbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da8:	2b12      	cmp	r3, #18
 8001daa:	d107      	bne.n	8001dbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	9300      	str	r3, [sp, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f000 f937 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00d      	beq.n	8001df0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de2:	d103      	bne.n	8001dec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dea:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e035      	b.n	8001e5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001df8:	d108      	bne.n	8001e0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dfa:	897b      	ldrh	r3, [r7, #10]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001e08:	611a      	str	r2, [r3, #16]
 8001e0a:	e01b      	b.n	8001e44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e0c:	897b      	ldrh	r3, [r7, #10]
 8001e0e:	11db      	asrs	r3, r3, #7
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f003 0306 	and.w	r3, r3, #6
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	f063 030f 	orn	r3, r3, #15
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	490e      	ldr	r1, [pc, #56]	@ (8001e64 <I2C_MasterRequestWrite+0xfc>)
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f980 	bl	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e010      	b.n	8001e5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e3a:	897b      	ldrh	r3, [r7, #10]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4907      	ldr	r1, [pc, #28]	@ (8001e68 <I2C_MasterRequestWrite+0x100>)
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f970 	bl	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	00010008 	.word	0x00010008
 8001e68:	00010002 	.word	0x00010002

08001e6c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b088      	sub	sp, #32
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	4608      	mov	r0, r1
 8001e76:	4611      	mov	r1, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	817b      	strh	r3, [r7, #10]
 8001e7e:	460b      	mov	r3, r1
 8001e80:	813b      	strh	r3, [r7, #8]
 8001e82:	4613      	mov	r3, r2
 8001e84:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001e94:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	6a3b      	ldr	r3, [r7, #32]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f000 f8c2 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00d      	beq.n	8001eda <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ecc:	d103      	bne.n	8001ed6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ed4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e0aa      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001eda:	897b      	ldrh	r3, [r7, #10]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001ee8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	6a3a      	ldr	r2, [r7, #32]
 8001eee:	4952      	ldr	r1, [pc, #328]	@ (8002038 <I2C_RequestMemoryRead+0x1cc>)
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f000 f91d 	bl	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e097      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f18:	6a39      	ldr	r1, [r7, #32]
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f9a8 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d00d      	beq.n	8001f42 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	2b04      	cmp	r3, #4
 8001f2c:	d107      	bne.n	8001f3e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f3c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e076      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f48:	893b      	ldrh	r3, [r7, #8]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	611a      	str	r2, [r3, #16]
 8001f52:	e021      	b.n	8001f98 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f54:	893b      	ldrh	r3, [r7, #8]
 8001f56:	0a1b      	lsrs	r3, r3, #8
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 f982 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00d      	beq.n	8001f8e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d107      	bne.n	8001f8a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f88:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e050      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f8e:	893b      	ldrh	r3, [r7, #8]
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f9a:	6a39      	ldr	r1, [r7, #32]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 f967 	bl	8002270 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d00d      	beq.n	8001fc4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fac:	2b04      	cmp	r3, #4
 8001fae:	d107      	bne.n	8001fc0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fbe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e035      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	6a3b      	ldr	r3, [r7, #32]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 f82b 	bl	800203c <I2C_WaitOnFlagUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00d      	beq.n	8002008 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ffa:	d103      	bne.n	8002004 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002002:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e013      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	b2da      	uxtb	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	6a3a      	ldr	r2, [r7, #32]
 800201c:	4906      	ldr	r1, [pc, #24]	@ (8002038 <I2C_RequestMemoryRead+0x1cc>)
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f000 f886 	bl	8002130 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	00010002 	.word	0x00010002

0800203c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	4613      	mov	r3, r2
 800204a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800204c:	e048      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d044      	beq.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002056:	f7fe ff4f 	bl	8000ef8 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	683a      	ldr	r2, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d302      	bcc.n	800206c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d139      	bne.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10d      	bne.n	8002092 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	43da      	mvns	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4013      	ands	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	e00c      	b.n	80020ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	699b      	ldr	r3, [r3, #24]
 8002098:	43da      	mvns	r2, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	4013      	ands	r3, r2
 800209e:	b29b      	uxth	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bf0c      	ite	eq
 80020a4:	2301      	moveq	r3, #1
 80020a6:	2300      	movne	r3, #0
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	79fb      	ldrb	r3, [r7, #7]
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d116      	bne.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2220      	movs	r2, #32
 80020bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020cc:	f043 0220 	orr.w	r2, r3, #32
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e023      	b.n	8002128 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	0c1b      	lsrs	r3, r3, #16
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d10d      	bne.n	8002106 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	695b      	ldr	r3, [r3, #20]
 80020f0:	43da      	mvns	r2, r3
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	4013      	ands	r3, r2
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf0c      	ite	eq
 80020fc:	2301      	moveq	r3, #1
 80020fe:	2300      	movne	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	e00c      	b.n	8002120 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	43da      	mvns	r2, r3
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4013      	ands	r3, r2
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf0c      	ite	eq
 8002118:	2301      	moveq	r3, #1
 800211a:	2300      	movne	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	461a      	mov	r2, r3
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	429a      	cmp	r2, r3
 8002124:	d093      	beq.n	800204e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800213e:	e071      	b.n	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800214a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800214e:	d123      	bne.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800215e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002184:	f043 0204 	orr.w	r2, r3, #4
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e067      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800219e:	d041      	beq.n	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021a0:	f7fe feaa 	bl	8000ef8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d302      	bcc.n	80021b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d136      	bne.n	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0c1b      	lsrs	r3, r3, #16
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10c      	bne.n	80021da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	43da      	mvns	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	4013      	ands	r3, r2
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	e00b      	b.n	80021f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	43da      	mvns	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4013      	ands	r3, r2
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	bf14      	ite	ne
 80021ec:	2301      	movne	r3, #1
 80021ee:	2300      	moveq	r3, #0
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d016      	beq.n	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2220      	movs	r2, #32
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002210:	f043 0220 	orr.w	r2, r3, #32
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e021      	b.n	8002268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	0c1b      	lsrs	r3, r3, #16
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b01      	cmp	r3, #1
 800222c:	d10c      	bne.n	8002248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	43da      	mvns	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	4013      	ands	r3, r2
 800223a:	b29b      	uxth	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf14      	ite	ne
 8002240:	2301      	movne	r3, #1
 8002242:	2300      	moveq	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	e00b      	b.n	8002260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	43da      	mvns	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4013      	ands	r3, r2
 8002254:	b29b      	uxth	r3, r3
 8002256:	2b00      	cmp	r3, #0
 8002258:	bf14      	ite	ne
 800225a:	2301      	movne	r3, #1
 800225c:	2300      	moveq	r3, #0
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	f47f af6d 	bne.w	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800227c:	e034      	b.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8e3 	bl	800244a <I2C_IsAcknowledgeFailed>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e034      	b.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d028      	beq.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002296:	f7fe fe2f 	bl	8000ef8 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11d      	bne.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022b6:	2b80      	cmp	r3, #128	@ 0x80
 80022b8:	d016      	beq.n	80022e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e007      	b.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022f2:	2b80      	cmp	r3, #128	@ 0x80
 80022f4:	d1c3      	bne.n	800227e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800230c:	e034      	b.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800230e:	68f8      	ldr	r0, [r7, #12]
 8002310:	f000 f89b 	bl	800244a <I2C_IsAcknowledgeFailed>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e034      	b.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d028      	beq.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7fe fde7 	bl	8000ef8 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d11d      	bne.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b04      	cmp	r3, #4
 8002348:	d016      	beq.n	8002378 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2220      	movs	r2, #32
 8002354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e007      	b.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	2b04      	cmp	r3, #4
 8002384:	d1c3      	bne.n	800230e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	4618      	mov	r0, r3
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800239c:	e049      	b.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	f003 0310 	and.w	r3, r3, #16
 80023a8:	2b10      	cmp	r3, #16
 80023aa:	d119      	bne.n	80023e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f06f 0210 	mvn.w	r2, #16
 80023b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2220      	movs	r2, #32
 80023c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e030      	b.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e0:	f7fe fd8a 	bl	8000ef8 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d11d      	bne.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	695b      	ldr	r3, [r3, #20]
 80023fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d016      	beq.n	8002432 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f043 0220 	orr.w	r2, r3, #32
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e007      	b.n	8002442 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800243c:	2b40      	cmp	r3, #64	@ 0x40
 800243e:	d1ae      	bne.n	800239e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800244a:	b480      	push	{r7}
 800244c:	b083      	sub	sp, #12
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002460:	d11b      	bne.n	800249a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800246a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2220      	movs	r2, #32
 8002476:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f043 0204 	orr.w	r2, r3, #4
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0cc      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	4b68      	ldr	r3, [pc, #416]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d90c      	bls.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ca:	4b65      	ldr	r3, [pc, #404]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024d2:	4b63      	ldr	r3, [pc, #396]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d001      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0b8      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024fc:	4b59      	ldr	r3, [pc, #356]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	4a58      	ldr	r2, [pc, #352]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002502:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002506:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002514:	4b53      	ldr	r3, [pc, #332]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	4a52      	ldr	r2, [pc, #328]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800251e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002520:	4b50      	ldr	r3, [pc, #320]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	494d      	ldr	r1, [pc, #308]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800252e:	4313      	orrs	r3, r2
 8002530:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d044      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d107      	bne.n	8002556 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b47      	ldr	r3, [pc, #284]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d119      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e07f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d003      	beq.n	8002566 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002562:	2b03      	cmp	r3, #3
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b3f      	ldr	r3, [pc, #252]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d109      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e06f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b3b      	ldr	r3, [pc, #236]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d101      	bne.n	8002586 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e067      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002586:	4b37      	ldr	r3, [pc, #220]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f023 0203 	bic.w	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4934      	ldr	r1, [pc, #208]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7fe fcae 	bl	8000ef8 <HAL_GetTick>
 800259c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800259e:	e00a      	b.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a0:	f7fe fcaa 	bl	8000ef8 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e04f      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b2b      	ldr	r3, [pc, #172]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 020c 	and.w	r2, r3, #12
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1eb      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b25      	ldr	r3, [pc, #148]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 030f 	and.w	r3, r3, #15
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d20c      	bcs.n	80025f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b22      	ldr	r3, [pc, #136]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	b2d2      	uxtb	r2, r2
 80025dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b20      	ldr	r3, [pc, #128]	@ (8002660 <HAL_RCC_ClockConfig+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e032      	b.n	8002656 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d008      	beq.n	800260e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025fc:	4b19      	ldr	r3, [pc, #100]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	4916      	ldr	r1, [pc, #88]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800260a:	4313      	orrs	r3, r2
 800260c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d009      	beq.n	800262e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800261a:	4b12      	ldr	r3, [pc, #72]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	490e      	ldr	r1, [pc, #56]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 800262a:	4313      	orrs	r3, r2
 800262c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800262e:	f000 f855 	bl	80026dc <HAL_RCC_GetSysClockFreq>
 8002632:	4602      	mov	r2, r0
 8002634:	4b0b      	ldr	r3, [pc, #44]	@ (8002664 <HAL_RCC_ClockConfig+0x1bc>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	091b      	lsrs	r3, r3, #4
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	490a      	ldr	r1, [pc, #40]	@ (8002668 <HAL_RCC_ClockConfig+0x1c0>)
 8002640:	5ccb      	ldrb	r3, [r1, r3]
 8002642:	fa22 f303 	lsr.w	r3, r2, r3
 8002646:	4a09      	ldr	r2, [pc, #36]	@ (800266c <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800264a:	4b09      	ldr	r3, [pc, #36]	@ (8002670 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4618      	mov	r0, r3
 8002650:	f7fe fc0e 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	40023c00 	.word	0x40023c00
 8002664:	40023800 	.word	0x40023800
 8002668:	08003f94 	.word	0x08003f94
 800266c:	20000000 	.word	0x20000000
 8002670:	20000004 	.word	0x20000004

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b03      	ldr	r3, [pc, #12]	@ (8002688 <HAL_RCC_GetHCLKFreq+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	20000000 	.word	0x20000000

0800268c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002690:	f7ff fff0 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002694:	4602      	mov	r2, r0
 8002696:	4b05      	ldr	r3, [pc, #20]	@ (80026ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	0a9b      	lsrs	r3, r3, #10
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	4903      	ldr	r1, [pc, #12]	@ (80026b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026a2:	5ccb      	ldrb	r3, [r1, r3]
 80026a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40023800 	.word	0x40023800
 80026b0:	08003fa4 	.word	0x08003fa4

080026b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026b8:	f7ff ffdc 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	0b5b      	lsrs	r3, r3, #13
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	4903      	ldr	r1, [pc, #12]	@ (80026d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	40023800 	.word	0x40023800
 80026d8:	08003fa4 	.word	0x08003fa4

080026dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026e0:	b0ae      	sub	sp, #184	@ 0xb8
 80026e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002702:	4bcb      	ldr	r3, [pc, #812]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f003 030c 	and.w	r3, r3, #12
 800270a:	2b0c      	cmp	r3, #12
 800270c:	f200 8206 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x440>
 8002710:	a201      	add	r2, pc, #4	@ (adr r2, 8002718 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	0800274d 	.word	0x0800274d
 800271c:	08002b1d 	.word	0x08002b1d
 8002720:	08002b1d 	.word	0x08002b1d
 8002724:	08002b1d 	.word	0x08002b1d
 8002728:	08002755 	.word	0x08002755
 800272c:	08002b1d 	.word	0x08002b1d
 8002730:	08002b1d 	.word	0x08002b1d
 8002734:	08002b1d 	.word	0x08002b1d
 8002738:	0800275d 	.word	0x0800275d
 800273c:	08002b1d 	.word	0x08002b1d
 8002740:	08002b1d 	.word	0x08002b1d
 8002744:	08002b1d 	.word	0x08002b1d
 8002748:	0800294d 	.word	0x0800294d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800274c:	4bb9      	ldr	r3, [pc, #740]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x358>)
 800274e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002752:	e1e7      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002754:	4bb8      	ldr	r3, [pc, #736]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002756:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800275a:	e1e3      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800275c:	4bb4      	ldr	r3, [pc, #720]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002764:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002768:	4bb1      	ldr	r3, [pc, #708]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d071      	beq.n	8002858 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002774:	4bae      	ldr	r3, [pc, #696]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	099b      	lsrs	r3, r3, #6
 800277a:	2200      	movs	r2, #0
 800277c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002780:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002784:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800278c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002790:	2300      	movs	r3, #0
 8002792:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800279a:	4622      	mov	r2, r4
 800279c:	462b      	mov	r3, r5
 800279e:	f04f 0000 	mov.w	r0, #0
 80027a2:	f04f 0100 	mov.w	r1, #0
 80027a6:	0159      	lsls	r1, r3, #5
 80027a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ac:	0150      	lsls	r0, r2, #5
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4621      	mov	r1, r4
 80027b4:	1a51      	subs	r1, r2, r1
 80027b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80027b8:	4629      	mov	r1, r5
 80027ba:	eb63 0301 	sbc.w	r3, r3, r1
 80027be:	647b      	str	r3, [r7, #68]	@ 0x44
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80027cc:	4649      	mov	r1, r9
 80027ce:	018b      	lsls	r3, r1, #6
 80027d0:	4641      	mov	r1, r8
 80027d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d6:	4641      	mov	r1, r8
 80027d8:	018a      	lsls	r2, r1, #6
 80027da:	4641      	mov	r1, r8
 80027dc:	1a51      	subs	r1, r2, r1
 80027de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027e0:	4649      	mov	r1, r9
 80027e2:	eb63 0301 	sbc.w	r3, r3, r1
 80027e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027f4:	4649      	mov	r1, r9
 80027f6:	00cb      	lsls	r3, r1, #3
 80027f8:	4641      	mov	r1, r8
 80027fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027fe:	4641      	mov	r1, r8
 8002800:	00ca      	lsls	r2, r1, #3
 8002802:	4610      	mov	r0, r2
 8002804:	4619      	mov	r1, r3
 8002806:	4603      	mov	r3, r0
 8002808:	4622      	mov	r2, r4
 800280a:	189b      	adds	r3, r3, r2
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
 800280e:	462b      	mov	r3, r5
 8002810:	460a      	mov	r2, r1
 8002812:	eb42 0303 	adc.w	r3, r2, r3
 8002816:	637b      	str	r3, [r7, #52]	@ 0x34
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002824:	4629      	mov	r1, r5
 8002826:	024b      	lsls	r3, r1, #9
 8002828:	4621      	mov	r1, r4
 800282a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800282e:	4621      	mov	r1, r4
 8002830:	024a      	lsls	r2, r1, #9
 8002832:	4610      	mov	r0, r2
 8002834:	4619      	mov	r1, r3
 8002836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800283a:	2200      	movs	r2, #0
 800283c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002840:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002844:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002848:	f7fd fd32 	bl	80002b0 <__aeabi_uldivmod>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4613      	mov	r3, r2
 8002852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002856:	e067      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002858:	4b75      	ldr	r3, [pc, #468]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	2200      	movs	r2, #0
 8002860:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002864:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002868:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800286c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002870:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002872:	2300      	movs	r3, #0
 8002874:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002876:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800287a:	4622      	mov	r2, r4
 800287c:	462b      	mov	r3, r5
 800287e:	f04f 0000 	mov.w	r0, #0
 8002882:	f04f 0100 	mov.w	r1, #0
 8002886:	0159      	lsls	r1, r3, #5
 8002888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800288c:	0150      	lsls	r0, r2, #5
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4621      	mov	r1, r4
 8002894:	1a51      	subs	r1, r2, r1
 8002896:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002898:	4629      	mov	r1, r5
 800289a:	eb63 0301 	sbc.w	r3, r3, r1
 800289e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f04f 0300 	mov.w	r3, #0
 80028a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80028ac:	4649      	mov	r1, r9
 80028ae:	018b      	lsls	r3, r1, #6
 80028b0:	4641      	mov	r1, r8
 80028b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028b6:	4641      	mov	r1, r8
 80028b8:	018a      	lsls	r2, r1, #6
 80028ba:	4641      	mov	r1, r8
 80028bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80028c0:	4649      	mov	r1, r9
 80028c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	f04f 0300 	mov.w	r3, #0
 80028ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028da:	4692      	mov	sl, r2
 80028dc:	469b      	mov	fp, r3
 80028de:	4623      	mov	r3, r4
 80028e0:	eb1a 0303 	adds.w	r3, sl, r3
 80028e4:	623b      	str	r3, [r7, #32]
 80028e6:	462b      	mov	r3, r5
 80028e8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028fa:	4629      	mov	r1, r5
 80028fc:	028b      	lsls	r3, r1, #10
 80028fe:	4621      	mov	r1, r4
 8002900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002904:	4621      	mov	r1, r4
 8002906:	028a      	lsls	r2, r1, #10
 8002908:	4610      	mov	r0, r2
 800290a:	4619      	mov	r1, r3
 800290c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002910:	2200      	movs	r2, #0
 8002912:	673b      	str	r3, [r7, #112]	@ 0x70
 8002914:	677a      	str	r2, [r7, #116]	@ 0x74
 8002916:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800291a:	f7fd fcc9 	bl	80002b0 <__aeabi_uldivmod>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4613      	mov	r3, r2
 8002924:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002928:	4b41      	ldr	r3, [pc, #260]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	0c1b      	lsrs	r3, r3, #16
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800293a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800293e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002942:	fbb2 f3f3 	udiv	r3, r2, r3
 8002946:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800294a:	e0eb      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4b38      	ldr	r3, [pc, #224]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002954:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002958:	4b35      	ldr	r3, [pc, #212]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d06b      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002964:	4b32      	ldr	r3, [pc, #200]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x354>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	099b      	lsrs	r3, r3, #6
 800296a:	2200      	movs	r2, #0
 800296c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800296e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002976:	663b      	str	r3, [r7, #96]	@ 0x60
 8002978:	2300      	movs	r3, #0
 800297a:	667b      	str	r3, [r7, #100]	@ 0x64
 800297c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002980:	4622      	mov	r2, r4
 8002982:	462b      	mov	r3, r5
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	0159      	lsls	r1, r3, #5
 800298e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002992:	0150      	lsls	r0, r2, #5
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4621      	mov	r1, r4
 800299a:	1a51      	subs	r1, r2, r1
 800299c:	61b9      	str	r1, [r7, #24]
 800299e:	4629      	mov	r1, r5
 80029a0:	eb63 0301 	sbc.w	r3, r3, r1
 80029a4:	61fb      	str	r3, [r7, #28]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80029b2:	4659      	mov	r1, fp
 80029b4:	018b      	lsls	r3, r1, #6
 80029b6:	4651      	mov	r1, sl
 80029b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029bc:	4651      	mov	r1, sl
 80029be:	018a      	lsls	r2, r1, #6
 80029c0:	4651      	mov	r1, sl
 80029c2:	ebb2 0801 	subs.w	r8, r2, r1
 80029c6:	4659      	mov	r1, fp
 80029c8:	eb63 0901 	sbc.w	r9, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029e0:	4690      	mov	r8, r2
 80029e2:	4699      	mov	r9, r3
 80029e4:	4623      	mov	r3, r4
 80029e6:	eb18 0303 	adds.w	r3, r8, r3
 80029ea:	613b      	str	r3, [r7, #16]
 80029ec:	462b      	mov	r3, r5
 80029ee:	eb49 0303 	adc.w	r3, r9, r3
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002a00:	4629      	mov	r1, r5
 8002a02:	024b      	lsls	r3, r1, #9
 8002a04:	4621      	mov	r1, r4
 8002a06:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	024a      	lsls	r2, r1, #9
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a16:	2200      	movs	r2, #0
 8002a18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a1a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002a1c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002a20:	f7fd fc46 	bl	80002b0 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4613      	mov	r3, r2
 8002a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a2e:	e065      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x420>
 8002a30:	40023800 	.word	0x40023800
 8002a34:	00f42400 	.word	0x00f42400
 8002a38:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	2200      	movs	r2, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	4611      	mov	r1, r2
 8002a48:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a4e:	2300      	movs	r3, #0
 8002a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a52:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a56:	4642      	mov	r2, r8
 8002a58:	464b      	mov	r3, r9
 8002a5a:	f04f 0000 	mov.w	r0, #0
 8002a5e:	f04f 0100 	mov.w	r1, #0
 8002a62:	0159      	lsls	r1, r3, #5
 8002a64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a68:	0150      	lsls	r0, r2, #5
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4641      	mov	r1, r8
 8002a70:	1a51      	subs	r1, r2, r1
 8002a72:	60b9      	str	r1, [r7, #8]
 8002a74:	4649      	mov	r1, r9
 8002a76:	eb63 0301 	sbc.w	r3, r3, r1
 8002a7a:	60fb      	str	r3, [r7, #12]
 8002a7c:	f04f 0200 	mov.w	r2, #0
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a88:	4659      	mov	r1, fp
 8002a8a:	018b      	lsls	r3, r1, #6
 8002a8c:	4651      	mov	r1, sl
 8002a8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a92:	4651      	mov	r1, sl
 8002a94:	018a      	lsls	r2, r1, #6
 8002a96:	4651      	mov	r1, sl
 8002a98:	1a54      	subs	r4, r2, r1
 8002a9a:	4659      	mov	r1, fp
 8002a9c:	eb63 0501 	sbc.w	r5, r3, r1
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	00eb      	lsls	r3, r5, #3
 8002aaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002aae:	00e2      	lsls	r2, r4, #3
 8002ab0:	4614      	mov	r4, r2
 8002ab2:	461d      	mov	r5, r3
 8002ab4:	4643      	mov	r3, r8
 8002ab6:	18e3      	adds	r3, r4, r3
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	464b      	mov	r3, r9
 8002abc:	eb45 0303 	adc.w	r3, r5, r3
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ace:	4629      	mov	r1, r5
 8002ad0:	028b      	lsls	r3, r1, #10
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad8:	4621      	mov	r1, r4
 8002ada:	028a      	lsls	r2, r1, #10
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002ae8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002aea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002aee:	f7fd fbdf 	bl	80002b0 <__aeabi_uldivmod>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4613      	mov	r3, r2
 8002af8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002afc:	4b0d      	ldr	r3, [pc, #52]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x458>)
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	0f1b      	lsrs	r3, r3, #28
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002b0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b1a:	e003      	b.n	8002b24 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002b22:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b24:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	37b8      	adds	r7, #184	@ 0xb8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b32:	bf00      	nop
 8002b34:	40023800 	.word	0x40023800
 8002b38:	00f42400 	.word	0x00f42400

08002b3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d101      	bne.n	8002b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e28d      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8083 	beq.w	8002c62 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b5c:	4b94      	ldr	r3, [pc, #592]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f003 030c 	and.w	r3, r3, #12
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d019      	beq.n	8002b9c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b68:	4b91      	ldr	r3, [pc, #580]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d106      	bne.n	8002b82 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b74:	4b8e      	ldr	r3, [pc, #568]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b80:	d00c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b82:	4b8b      	ldr	r3, [pc, #556]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8e:	4b88      	ldr	r3, [pc, #544]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b9c:	4b84      	ldr	r3, [pc, #528]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d05b      	beq.n	8002c60 <HAL_RCC_OscConfig+0x124>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d157      	bne.n	8002c60 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e25a      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002bbc:	d106      	bne.n	8002bcc <HAL_RCC_OscConfig+0x90>
 8002bbe:	4b7c      	ldr	r3, [pc, #496]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a7b      	ldr	r2, [pc, #492]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bc8:	6013      	str	r3, [r2, #0]
 8002bca:	e01d      	b.n	8002c08 <HAL_RCC_OscConfig+0xcc>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002bd4:	d10c      	bne.n	8002bf0 <HAL_RCC_OscConfig+0xb4>
 8002bd6:	4b76      	ldr	r3, [pc, #472]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a75      	ldr	r2, [pc, #468]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	4b73      	ldr	r3, [pc, #460]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a72      	ldr	r2, [pc, #456]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0xcc>
 8002bf0:	4b6f      	ldr	r3, [pc, #444]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a6e      	ldr	r2, [pc, #440]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	4b6c      	ldr	r3, [pc, #432]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a6b      	ldr	r2, [pc, #428]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d013      	beq.n	8002c38 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c10:	f7fe f972 	bl	8000ef8 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe f96e 	bl	8000ef8 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	@ 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e21f      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2a:	4b61      	ldr	r3, [pc, #388]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCC_OscConfig+0xdc>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe f95e 	bl	8000ef8 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c40:	f7fe f95a 	bl	8000ef8 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	@ 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e20b      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c52:	4b57      	ldr	r3, [pc, #348]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x104>
 8002c5e:	e000      	b.n	8002c62 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d06f      	beq.n	8002d4e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c6e:	4b50      	ldr	r3, [pc, #320]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d017      	beq.n	8002caa <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c82:	2b08      	cmp	r3, #8
 8002c84:	d105      	bne.n	8002c92 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c86:	4b4a      	ldr	r3, [pc, #296]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00b      	beq.n	8002caa <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c92:	4b47      	ldr	r3, [pc, #284]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c9a:	2b0c      	cmp	r3, #12
 8002c9c:	d11c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c9e:	4b44      	ldr	r3, [pc, #272]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d116      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d005      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x186>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1d3      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	00db      	lsls	r3, r3, #3
 8002cd0:	4937      	ldr	r1, [pc, #220]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cd6:	e03a      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d020      	beq.n	8002d22 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ce0:	4b34      	ldr	r3, [pc, #208]	@ (8002db4 <HAL_RCC_OscConfig+0x278>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe f907 	bl	8000ef8 <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fe f903 	bl	8000ef8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e1b4      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d00:	4b2b      	ldr	r3, [pc, #172]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0c:	4b28      	ldr	r3, [pc, #160]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4925      	ldr	r1, [pc, #148]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	600b      	str	r3, [r1, #0]
 8002d20:	e015      	b.n	8002d4e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d22:	4b24      	ldr	r3, [pc, #144]	@ (8002db4 <HAL_RCC_OscConfig+0x278>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d28:	f7fe f8e6 	bl	8000ef8 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d30:	f7fe f8e2 	bl	8000ef8 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e193      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d42:	4b1b      	ldr	r3, [pc, #108]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d036      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d016      	beq.n	8002d90 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d62:	4b15      	ldr	r3, [pc, #84]	@ (8002db8 <HAL_RCC_OscConfig+0x27c>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d68:	f7fe f8c6 	bl	8000ef8 <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d70:	f7fe f8c2 	bl	8000ef8 <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e173      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_RCC_OscConfig+0x274>)
 8002d84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d0f0      	beq.n	8002d70 <HAL_RCC_OscConfig+0x234>
 8002d8e:	e01b      	b.n	8002dc8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d90:	4b09      	ldr	r3, [pc, #36]	@ (8002db8 <HAL_RCC_OscConfig+0x27c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7fe f8af 	bl	8000ef8 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d9c:	e00e      	b.n	8002dbc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9e:	f7fe f8ab 	bl	8000ef8 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d907      	bls.n	8002dbc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e15c      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
 8002db0:	40023800 	.word	0x40023800
 8002db4:	42470000 	.word	0x42470000
 8002db8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dbc:	4b8a      	ldr	r3, [pc, #552]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1ea      	bne.n	8002d9e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 8097 	beq.w	8002f04 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dda:	4b83      	ldr	r3, [pc, #524]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	4b7f      	ldr	r3, [pc, #508]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	4a7e      	ldr	r2, [pc, #504]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002df0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002df6:	4b7c      	ldr	r3, [pc, #496]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dfe:	60bb      	str	r3, [r7, #8]
 8002e00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e02:	2301      	movs	r3, #1
 8002e04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	4b79      	ldr	r3, [pc, #484]	@ (8002fec <HAL_RCC_OscConfig+0x4b0>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d118      	bne.n	8002e44 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e12:	4b76      	ldr	r3, [pc, #472]	@ (8002fec <HAL_RCC_OscConfig+0x4b0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a75      	ldr	r2, [pc, #468]	@ (8002fec <HAL_RCC_OscConfig+0x4b0>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e1e:	f7fe f86b 	bl	8000ef8 <HAL_GetTick>
 8002e22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e24:	e008      	b.n	8002e38 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7fe f867 	bl	8000ef8 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e118      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e38:	4b6c      	ldr	r3, [pc, #432]	@ (8002fec <HAL_RCC_OscConfig+0x4b0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d106      	bne.n	8002e5a <HAL_RCC_OscConfig+0x31e>
 8002e4c:	4b66      	ldr	r3, [pc, #408]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e50:	4a65      	ldr	r2, [pc, #404]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e58:	e01c      	b.n	8002e94 <HAL_RCC_OscConfig+0x358>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	2b05      	cmp	r3, #5
 8002e60:	d10c      	bne.n	8002e7c <HAL_RCC_OscConfig+0x340>
 8002e62:	4b61      	ldr	r3, [pc, #388]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	4a60      	ldr	r2, [pc, #384]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e68:	f043 0304 	orr.w	r3, r3, #4
 8002e6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e6e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e72:	4a5d      	ldr	r2, [pc, #372]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e74:	f043 0301 	orr.w	r3, r3, #1
 8002e78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e7a:	e00b      	b.n	8002e94 <HAL_RCC_OscConfig+0x358>
 8002e7c:	4b5a      	ldr	r3, [pc, #360]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e80:	4a59      	ldr	r2, [pc, #356]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e88:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e8c:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002e8e:	f023 0304 	bic.w	r3, r3, #4
 8002e92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d015      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe f82c 	bl	8000ef8 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe f828 	bl	8000ef8 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0d7      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b4b      	ldr	r3, [pc, #300]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x368>
 8002ec6:	e014      	b.n	8002ef2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec8:	f7fe f816 	bl	8000ef8 <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ece:	e00a      	b.n	8002ee6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed0:	f7fe f812 	bl	8000ef8 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e0c1      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee6:	4b40      	ldr	r3, [pc, #256]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1ee      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ef2:	7dfb      	ldrb	r3, [r7, #23]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d105      	bne.n	8002f04 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002efa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efc:	4a3a      	ldr	r2, [pc, #232]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	f000 80ad 	beq.w	8003068 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f0e:	4b36      	ldr	r3, [pc, #216]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b08      	cmp	r3, #8
 8002f18:	d060      	beq.n	8002fdc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d145      	bne.n	8002fae <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f22:	4b33      	ldr	r3, [pc, #204]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b4>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fd ffe6 	bl	8000ef8 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2e:	e008      	b.n	8002f42 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f30:	f7fd ffe2 	bl	8000ef8 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	2b02      	cmp	r3, #2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e093      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f42:	4b29      	ldr	r3, [pc, #164]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d1f0      	bne.n	8002f30 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69da      	ldr	r2, [r3, #28]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	019b      	lsls	r3, r3, #6
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	085b      	lsrs	r3, r3, #1
 8002f66:	3b01      	subs	r3, #1
 8002f68:	041b      	lsls	r3, r3, #16
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f70:	061b      	lsls	r3, r3, #24
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	071b      	lsls	r3, r3, #28
 8002f7a:	491b      	ldr	r1, [pc, #108]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b4>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f86:	f7fd ffb7 	bl	8000ef8 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f8e:	f7fd ffb3 	bl	8000ef8 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e064      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa0:	4b11      	ldr	r3, [pc, #68]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x452>
 8002fac:	e05c      	b.n	8003068 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fae:	4b10      	ldr	r3, [pc, #64]	@ (8002ff0 <HAL_RCC_OscConfig+0x4b4>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fd ffa0 	bl	8000ef8 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fbc:	f7fd ff9c 	bl	8000ef8 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04d      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fce:	4b06      	ldr	r3, [pc, #24]	@ (8002fe8 <HAL_RCC_OscConfig+0x4ac>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x480>
 8002fda:	e045      	b.n	8003068 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d107      	bne.n	8002ff4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e040      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40007000 	.word	0x40007000
 8002ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8003074 <HAL_RCC_OscConfig+0x538>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d030      	beq.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d129      	bne.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d122      	bne.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003024:	4013      	ands	r3, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800302a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800302c:	4293      	cmp	r3, r2
 800302e:	d119      	bne.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003040:	429a      	cmp	r2, r3
 8003042:	d10f      	bne.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003050:	429a      	cmp	r2, r3
 8003052:	d107      	bne.n	8003064 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e000      	b.n	800306a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800

08003078 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e042      	b.n	8003110 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d106      	bne.n	80030a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7fd fdda 	bl	8000c58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2224      	movs	r2, #36	@ 0x24
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f82b 	bl	8003118 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80030d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	695a      	ldr	r2, [r3, #20]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80030e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800310e:	2300      	movs	r3, #0
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800311c:	b0c0      	sub	sp, #256	@ 0x100
 800311e:	af00      	add	r7, sp, #0
 8003120:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003134:	68d9      	ldr	r1, [r3, #12]
 8003136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	ea40 0301 	orr.w	r3, r0, r1
 8003140:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	431a      	orrs	r2, r3
 8003150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	431a      	orrs	r2, r3
 8003158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003170:	f021 010c 	bic.w	r1, r1, #12
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800317e:	430b      	orrs	r3, r1
 8003180:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	6999      	ldr	r1, [r3, #24]
 8003194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	ea40 0301 	orr.w	r3, r0, r1
 800319e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b8f      	ldr	r3, [pc, #572]	@ (80033e4 <UART_SetConfig+0x2cc>)
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d005      	beq.n	80031b8 <UART_SetConfig+0xa0>
 80031ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b8d      	ldr	r3, [pc, #564]	@ (80033e8 <UART_SetConfig+0x2d0>)
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d104      	bne.n	80031c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031b8:	f7ff fa7c 	bl	80026b4 <HAL_RCC_GetPCLK2Freq>
 80031bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031c0:	e003      	b.n	80031ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031c2:	f7ff fa63 	bl	800268c <HAL_RCC_GetPCLK1Freq>
 80031c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031d4:	f040 810c 	bne.w	80033f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031dc:	2200      	movs	r2, #0
 80031de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031ea:	4622      	mov	r2, r4
 80031ec:	462b      	mov	r3, r5
 80031ee:	1891      	adds	r1, r2, r2
 80031f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031f2:	415b      	adcs	r3, r3
 80031f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031fa:	4621      	mov	r1, r4
 80031fc:	eb12 0801 	adds.w	r8, r2, r1
 8003200:	4629      	mov	r1, r5
 8003202:	eb43 0901 	adc.w	r9, r3, r1
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	f04f 0300 	mov.w	r3, #0
 800320e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003212:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003216:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800321a:	4690      	mov	r8, r2
 800321c:	4699      	mov	r9, r3
 800321e:	4623      	mov	r3, r4
 8003220:	eb18 0303 	adds.w	r3, r8, r3
 8003224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003228:	462b      	mov	r3, r5
 800322a:	eb49 0303 	adc.w	r3, r9, r3
 800322e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800323e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003242:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003246:	460b      	mov	r3, r1
 8003248:	18db      	adds	r3, r3, r3
 800324a:	653b      	str	r3, [r7, #80]	@ 0x50
 800324c:	4613      	mov	r3, r2
 800324e:	eb42 0303 	adc.w	r3, r2, r3
 8003252:	657b      	str	r3, [r7, #84]	@ 0x54
 8003254:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003258:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800325c:	f7fd f828 	bl	80002b0 <__aeabi_uldivmod>
 8003260:	4602      	mov	r2, r0
 8003262:	460b      	mov	r3, r1
 8003264:	4b61      	ldr	r3, [pc, #388]	@ (80033ec <UART_SetConfig+0x2d4>)
 8003266:	fba3 2302 	umull	r2, r3, r3, r2
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	011c      	lsls	r4, r3, #4
 800326e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003272:	2200      	movs	r2, #0
 8003274:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003278:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800327c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003280:	4642      	mov	r2, r8
 8003282:	464b      	mov	r3, r9
 8003284:	1891      	adds	r1, r2, r2
 8003286:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003288:	415b      	adcs	r3, r3
 800328a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800328c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003290:	4641      	mov	r1, r8
 8003292:	eb12 0a01 	adds.w	sl, r2, r1
 8003296:	4649      	mov	r1, r9
 8003298:	eb43 0b01 	adc.w	fp, r3, r1
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032b0:	4692      	mov	sl, r2
 80032b2:	469b      	mov	fp, r3
 80032b4:	4643      	mov	r3, r8
 80032b6:	eb1a 0303 	adds.w	r3, sl, r3
 80032ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032be:	464b      	mov	r3, r9
 80032c0:	eb4b 0303 	adc.w	r3, fp, r3
 80032c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032dc:	460b      	mov	r3, r1
 80032de:	18db      	adds	r3, r3, r3
 80032e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e2:	4613      	mov	r3, r2
 80032e4:	eb42 0303 	adc.w	r3, r2, r3
 80032e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80032ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80032f2:	f7fc ffdd 	bl	80002b0 <__aeabi_uldivmod>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4611      	mov	r1, r2
 80032fc:	4b3b      	ldr	r3, [pc, #236]	@ (80033ec <UART_SetConfig+0x2d4>)
 80032fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2264      	movs	r2, #100	@ 0x64
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	1acb      	subs	r3, r1, r3
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003312:	4b36      	ldr	r3, [pc, #216]	@ (80033ec <UART_SetConfig+0x2d4>)
 8003314:	fba3 2302 	umull	r2, r3, r3, r2
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003320:	441c      	add	r4, r3
 8003322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800332c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003330:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003334:	4642      	mov	r2, r8
 8003336:	464b      	mov	r3, r9
 8003338:	1891      	adds	r1, r2, r2
 800333a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800333c:	415b      	adcs	r3, r3
 800333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003340:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003344:	4641      	mov	r1, r8
 8003346:	1851      	adds	r1, r2, r1
 8003348:	6339      	str	r1, [r7, #48]	@ 0x30
 800334a:	4649      	mov	r1, r9
 800334c:	414b      	adcs	r3, r1
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	f04f 0300 	mov.w	r3, #0
 8003358:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800335c:	4659      	mov	r1, fp
 800335e:	00cb      	lsls	r3, r1, #3
 8003360:	4651      	mov	r1, sl
 8003362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003366:	4651      	mov	r1, sl
 8003368:	00ca      	lsls	r2, r1, #3
 800336a:	4610      	mov	r0, r2
 800336c:	4619      	mov	r1, r3
 800336e:	4603      	mov	r3, r0
 8003370:	4642      	mov	r2, r8
 8003372:	189b      	adds	r3, r3, r2
 8003374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003378:	464b      	mov	r3, r9
 800337a:	460a      	mov	r2, r1
 800337c:	eb42 0303 	adc.w	r3, r2, r3
 8003380:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003390:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003394:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003398:	460b      	mov	r3, r1
 800339a:	18db      	adds	r3, r3, r3
 800339c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800339e:	4613      	mov	r3, r2
 80033a0:	eb42 0303 	adc.w	r3, r2, r3
 80033a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033ae:	f7fc ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <UART_SetConfig+0x2d4>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	@ 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	3332      	adds	r3, #50	@ 0x32
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <UART_SetConfig+0x2d4>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 0207 	and.w	r2, r3, #7
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4422      	add	r2, r4
 80033de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033e0:	e106      	b.n	80035f0 <UART_SetConfig+0x4d8>
 80033e2:	bf00      	nop
 80033e4:	40011000 	.word	0x40011000
 80033e8:	40011400 	.word	0x40011400
 80033ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f4:	2200      	movs	r2, #0
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80033fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80033fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003402:	4642      	mov	r2, r8
 8003404:	464b      	mov	r3, r9
 8003406:	1891      	adds	r1, r2, r2
 8003408:	6239      	str	r1, [r7, #32]
 800340a:	415b      	adcs	r3, r3
 800340c:	627b      	str	r3, [r7, #36]	@ 0x24
 800340e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003412:	4641      	mov	r1, r8
 8003414:	1854      	adds	r4, r2, r1
 8003416:	4649      	mov	r1, r9
 8003418:	eb43 0501 	adc.w	r5, r3, r1
 800341c:	f04f 0200 	mov.w	r2, #0
 8003420:	f04f 0300 	mov.w	r3, #0
 8003424:	00eb      	lsls	r3, r5, #3
 8003426:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800342a:	00e2      	lsls	r2, r4, #3
 800342c:	4614      	mov	r4, r2
 800342e:	461d      	mov	r5, r3
 8003430:	4643      	mov	r3, r8
 8003432:	18e3      	adds	r3, r4, r3
 8003434:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003438:	464b      	mov	r3, r9
 800343a:	eb45 0303 	adc.w	r3, r5, r3
 800343e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800344e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	f04f 0300 	mov.w	r3, #0
 800345a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800345e:	4629      	mov	r1, r5
 8003460:	008b      	lsls	r3, r1, #2
 8003462:	4621      	mov	r1, r4
 8003464:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003468:	4621      	mov	r1, r4
 800346a:	008a      	lsls	r2, r1, #2
 800346c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003470:	f7fc ff1e 	bl	80002b0 <__aeabi_uldivmod>
 8003474:	4602      	mov	r2, r0
 8003476:	460b      	mov	r3, r1
 8003478:	4b60      	ldr	r3, [pc, #384]	@ (80035fc <UART_SetConfig+0x4e4>)
 800347a:	fba3 2302 	umull	r2, r3, r3, r2
 800347e:	095b      	lsrs	r3, r3, #5
 8003480:	011c      	lsls	r4, r3, #4
 8003482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003486:	2200      	movs	r2, #0
 8003488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800348c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003490:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003494:	4642      	mov	r2, r8
 8003496:	464b      	mov	r3, r9
 8003498:	1891      	adds	r1, r2, r2
 800349a:	61b9      	str	r1, [r7, #24]
 800349c:	415b      	adcs	r3, r3
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034a4:	4641      	mov	r1, r8
 80034a6:	1851      	adds	r1, r2, r1
 80034a8:	6139      	str	r1, [r7, #16]
 80034aa:	4649      	mov	r1, r9
 80034ac:	414b      	adcs	r3, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034bc:	4659      	mov	r1, fp
 80034be:	00cb      	lsls	r3, r1, #3
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034c6:	4651      	mov	r1, sl
 80034c8:	00ca      	lsls	r2, r1, #3
 80034ca:	4610      	mov	r0, r2
 80034cc:	4619      	mov	r1, r3
 80034ce:	4603      	mov	r3, r0
 80034d0:	4642      	mov	r2, r8
 80034d2:	189b      	adds	r3, r3, r2
 80034d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034d8:	464b      	mov	r3, r9
 80034da:	460a      	mov	r2, r1
 80034dc:	eb42 0303 	adc.w	r3, r2, r3
 80034e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80034f0:	f04f 0200 	mov.w	r2, #0
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80034fc:	4649      	mov	r1, r9
 80034fe:	008b      	lsls	r3, r1, #2
 8003500:	4641      	mov	r1, r8
 8003502:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003506:	4641      	mov	r1, r8
 8003508:	008a      	lsls	r2, r1, #2
 800350a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800350e:	f7fc fecf 	bl	80002b0 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4611      	mov	r1, r2
 8003518:	4b38      	ldr	r3, [pc, #224]	@ (80035fc <UART_SetConfig+0x4e4>)
 800351a:	fba3 2301 	umull	r2, r3, r3, r1
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2264      	movs	r2, #100	@ 0x64
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	3332      	adds	r3, #50	@ 0x32
 800352c:	4a33      	ldr	r2, [pc, #204]	@ (80035fc <UART_SetConfig+0x4e4>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003538:	441c      	add	r4, r3
 800353a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800353e:	2200      	movs	r2, #0
 8003540:	673b      	str	r3, [r7, #112]	@ 0x70
 8003542:	677a      	str	r2, [r7, #116]	@ 0x74
 8003544:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003548:	4642      	mov	r2, r8
 800354a:	464b      	mov	r3, r9
 800354c:	1891      	adds	r1, r2, r2
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	415b      	adcs	r3, r3
 8003552:	60fb      	str	r3, [r7, #12]
 8003554:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003558:	4641      	mov	r1, r8
 800355a:	1851      	adds	r1, r2, r1
 800355c:	6039      	str	r1, [r7, #0]
 800355e:	4649      	mov	r1, r9
 8003560:	414b      	adcs	r3, r1
 8003562:	607b      	str	r3, [r7, #4]
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	f04f 0300 	mov.w	r3, #0
 800356c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003570:	4659      	mov	r1, fp
 8003572:	00cb      	lsls	r3, r1, #3
 8003574:	4651      	mov	r1, sl
 8003576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800357a:	4651      	mov	r1, sl
 800357c:	00ca      	lsls	r2, r1, #3
 800357e:	4610      	mov	r0, r2
 8003580:	4619      	mov	r1, r3
 8003582:	4603      	mov	r3, r0
 8003584:	4642      	mov	r2, r8
 8003586:	189b      	adds	r3, r3, r2
 8003588:	66bb      	str	r3, [r7, #104]	@ 0x68
 800358a:	464b      	mov	r3, r9
 800358c:	460a      	mov	r2, r1
 800358e:	eb42 0303 	adc.w	r3, r2, r3
 8003592:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	663b      	str	r3, [r7, #96]	@ 0x60
 800359e:	667a      	str	r2, [r7, #100]	@ 0x64
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035ac:	4649      	mov	r1, r9
 80035ae:	008b      	lsls	r3, r1, #2
 80035b0:	4641      	mov	r1, r8
 80035b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035b6:	4641      	mov	r1, r8
 80035b8:	008a      	lsls	r2, r1, #2
 80035ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035be:	f7fc fe77 	bl	80002b0 <__aeabi_uldivmod>
 80035c2:	4602      	mov	r2, r0
 80035c4:	460b      	mov	r3, r1
 80035c6:	4b0d      	ldr	r3, [pc, #52]	@ (80035fc <UART_SetConfig+0x4e4>)
 80035c8:	fba3 1302 	umull	r1, r3, r3, r2
 80035cc:	095b      	lsrs	r3, r3, #5
 80035ce:	2164      	movs	r1, #100	@ 0x64
 80035d0:	fb01 f303 	mul.w	r3, r1, r3
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	3332      	adds	r3, #50	@ 0x32
 80035da:	4a08      	ldr	r2, [pc, #32]	@ (80035fc <UART_SetConfig+0x4e4>)
 80035dc:	fba2 2303 	umull	r2, r3, r2, r3
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	f003 020f 	and.w	r2, r3, #15
 80035e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4422      	add	r2, r4
 80035ee:	609a      	str	r2, [r3, #8]
}
 80035f0:	bf00      	nop
 80035f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80035f6:	46bd      	mov	sp, r7
 80035f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035fc:	51eb851f 	.word	0x51eb851f

08003600 <siprintf>:
 8003600:	b40e      	push	{r1, r2, r3}
 8003602:	b500      	push	{lr}
 8003604:	b09c      	sub	sp, #112	@ 0x70
 8003606:	ab1d      	add	r3, sp, #116	@ 0x74
 8003608:	9002      	str	r0, [sp, #8]
 800360a:	9006      	str	r0, [sp, #24]
 800360c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003610:	4809      	ldr	r0, [pc, #36]	@ (8003638 <siprintf+0x38>)
 8003612:	9107      	str	r1, [sp, #28]
 8003614:	9104      	str	r1, [sp, #16]
 8003616:	4909      	ldr	r1, [pc, #36]	@ (800363c <siprintf+0x3c>)
 8003618:	f853 2b04 	ldr.w	r2, [r3], #4
 800361c:	9105      	str	r1, [sp, #20]
 800361e:	6800      	ldr	r0, [r0, #0]
 8003620:	9301      	str	r3, [sp, #4]
 8003622:	a902      	add	r1, sp, #8
 8003624:	f000 f994 	bl	8003950 <_svfiprintf_r>
 8003628:	9b02      	ldr	r3, [sp, #8]
 800362a:	2200      	movs	r2, #0
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	b01c      	add	sp, #112	@ 0x70
 8003630:	f85d eb04 	ldr.w	lr, [sp], #4
 8003634:	b003      	add	sp, #12
 8003636:	4770      	bx	lr
 8003638:	2000000c 	.word	0x2000000c
 800363c:	ffff0208 	.word	0xffff0208

08003640 <memset>:
 8003640:	4402      	add	r2, r0
 8003642:	4603      	mov	r3, r0
 8003644:	4293      	cmp	r3, r2
 8003646:	d100      	bne.n	800364a <memset+0xa>
 8003648:	4770      	bx	lr
 800364a:	f803 1b01 	strb.w	r1, [r3], #1
 800364e:	e7f9      	b.n	8003644 <memset+0x4>

08003650 <__errno>:
 8003650:	4b01      	ldr	r3, [pc, #4]	@ (8003658 <__errno+0x8>)
 8003652:	6818      	ldr	r0, [r3, #0]
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	2000000c 	.word	0x2000000c

0800365c <__libc_init_array>:
 800365c:	b570      	push	{r4, r5, r6, lr}
 800365e:	4d0d      	ldr	r5, [pc, #52]	@ (8003694 <__libc_init_array+0x38>)
 8003660:	4c0d      	ldr	r4, [pc, #52]	@ (8003698 <__libc_init_array+0x3c>)
 8003662:	1b64      	subs	r4, r4, r5
 8003664:	10a4      	asrs	r4, r4, #2
 8003666:	2600      	movs	r6, #0
 8003668:	42a6      	cmp	r6, r4
 800366a:	d109      	bne.n	8003680 <__libc_init_array+0x24>
 800366c:	4d0b      	ldr	r5, [pc, #44]	@ (800369c <__libc_init_array+0x40>)
 800366e:	4c0c      	ldr	r4, [pc, #48]	@ (80036a0 <__libc_init_array+0x44>)
 8003670:	f000 fc66 	bl	8003f40 <_init>
 8003674:	1b64      	subs	r4, r4, r5
 8003676:	10a4      	asrs	r4, r4, #2
 8003678:	2600      	movs	r6, #0
 800367a:	42a6      	cmp	r6, r4
 800367c:	d105      	bne.n	800368a <__libc_init_array+0x2e>
 800367e:	bd70      	pop	{r4, r5, r6, pc}
 8003680:	f855 3b04 	ldr.w	r3, [r5], #4
 8003684:	4798      	blx	r3
 8003686:	3601      	adds	r6, #1
 8003688:	e7ee      	b.n	8003668 <__libc_init_array+0xc>
 800368a:	f855 3b04 	ldr.w	r3, [r5], #4
 800368e:	4798      	blx	r3
 8003690:	3601      	adds	r6, #1
 8003692:	e7f2      	b.n	800367a <__libc_init_array+0x1e>
 8003694:	08003fe8 	.word	0x08003fe8
 8003698:	08003fe8 	.word	0x08003fe8
 800369c:	08003fe8 	.word	0x08003fe8
 80036a0:	08003fec 	.word	0x08003fec

080036a4 <__retarget_lock_acquire_recursive>:
 80036a4:	4770      	bx	lr

080036a6 <__retarget_lock_release_recursive>:
 80036a6:	4770      	bx	lr

080036a8 <_free_r>:
 80036a8:	b538      	push	{r3, r4, r5, lr}
 80036aa:	4605      	mov	r5, r0
 80036ac:	2900      	cmp	r1, #0
 80036ae:	d041      	beq.n	8003734 <_free_r+0x8c>
 80036b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036b4:	1f0c      	subs	r4, r1, #4
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	bfb8      	it	lt
 80036ba:	18e4      	addlt	r4, r4, r3
 80036bc:	f000 f8e0 	bl	8003880 <__malloc_lock>
 80036c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003738 <_free_r+0x90>)
 80036c2:	6813      	ldr	r3, [r2, #0]
 80036c4:	b933      	cbnz	r3, 80036d4 <_free_r+0x2c>
 80036c6:	6063      	str	r3, [r4, #4]
 80036c8:	6014      	str	r4, [r2, #0]
 80036ca:	4628      	mov	r0, r5
 80036cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80036d0:	f000 b8dc 	b.w	800388c <__malloc_unlock>
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	d908      	bls.n	80036ea <_free_r+0x42>
 80036d8:	6820      	ldr	r0, [r4, #0]
 80036da:	1821      	adds	r1, r4, r0
 80036dc:	428b      	cmp	r3, r1
 80036de:	bf01      	itttt	eq
 80036e0:	6819      	ldreq	r1, [r3, #0]
 80036e2:	685b      	ldreq	r3, [r3, #4]
 80036e4:	1809      	addeq	r1, r1, r0
 80036e6:	6021      	streq	r1, [r4, #0]
 80036e8:	e7ed      	b.n	80036c6 <_free_r+0x1e>
 80036ea:	461a      	mov	r2, r3
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	b10b      	cbz	r3, 80036f4 <_free_r+0x4c>
 80036f0:	42a3      	cmp	r3, r4
 80036f2:	d9fa      	bls.n	80036ea <_free_r+0x42>
 80036f4:	6811      	ldr	r1, [r2, #0]
 80036f6:	1850      	adds	r0, r2, r1
 80036f8:	42a0      	cmp	r0, r4
 80036fa:	d10b      	bne.n	8003714 <_free_r+0x6c>
 80036fc:	6820      	ldr	r0, [r4, #0]
 80036fe:	4401      	add	r1, r0
 8003700:	1850      	adds	r0, r2, r1
 8003702:	4283      	cmp	r3, r0
 8003704:	6011      	str	r1, [r2, #0]
 8003706:	d1e0      	bne.n	80036ca <_free_r+0x22>
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	6053      	str	r3, [r2, #4]
 800370e:	4408      	add	r0, r1
 8003710:	6010      	str	r0, [r2, #0]
 8003712:	e7da      	b.n	80036ca <_free_r+0x22>
 8003714:	d902      	bls.n	800371c <_free_r+0x74>
 8003716:	230c      	movs	r3, #12
 8003718:	602b      	str	r3, [r5, #0]
 800371a:	e7d6      	b.n	80036ca <_free_r+0x22>
 800371c:	6820      	ldr	r0, [r4, #0]
 800371e:	1821      	adds	r1, r4, r0
 8003720:	428b      	cmp	r3, r1
 8003722:	bf04      	itt	eq
 8003724:	6819      	ldreq	r1, [r3, #0]
 8003726:	685b      	ldreq	r3, [r3, #4]
 8003728:	6063      	str	r3, [r4, #4]
 800372a:	bf04      	itt	eq
 800372c:	1809      	addeq	r1, r1, r0
 800372e:	6021      	streq	r1, [r4, #0]
 8003730:	6054      	str	r4, [r2, #4]
 8003732:	e7ca      	b.n	80036ca <_free_r+0x22>
 8003734:	bd38      	pop	{r3, r4, r5, pc}
 8003736:	bf00      	nop
 8003738:	20000280 	.word	0x20000280

0800373c <sbrk_aligned>:
 800373c:	b570      	push	{r4, r5, r6, lr}
 800373e:	4e0f      	ldr	r6, [pc, #60]	@ (800377c <sbrk_aligned+0x40>)
 8003740:	460c      	mov	r4, r1
 8003742:	6831      	ldr	r1, [r6, #0]
 8003744:	4605      	mov	r5, r0
 8003746:	b911      	cbnz	r1, 800374e <sbrk_aligned+0x12>
 8003748:	f000 fba6 	bl	8003e98 <_sbrk_r>
 800374c:	6030      	str	r0, [r6, #0]
 800374e:	4621      	mov	r1, r4
 8003750:	4628      	mov	r0, r5
 8003752:	f000 fba1 	bl	8003e98 <_sbrk_r>
 8003756:	1c43      	adds	r3, r0, #1
 8003758:	d103      	bne.n	8003762 <sbrk_aligned+0x26>
 800375a:	f04f 34ff 	mov.w	r4, #4294967295
 800375e:	4620      	mov	r0, r4
 8003760:	bd70      	pop	{r4, r5, r6, pc}
 8003762:	1cc4      	adds	r4, r0, #3
 8003764:	f024 0403 	bic.w	r4, r4, #3
 8003768:	42a0      	cmp	r0, r4
 800376a:	d0f8      	beq.n	800375e <sbrk_aligned+0x22>
 800376c:	1a21      	subs	r1, r4, r0
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fb92 	bl	8003e98 <_sbrk_r>
 8003774:	3001      	adds	r0, #1
 8003776:	d1f2      	bne.n	800375e <sbrk_aligned+0x22>
 8003778:	e7ef      	b.n	800375a <sbrk_aligned+0x1e>
 800377a:	bf00      	nop
 800377c:	2000027c 	.word	0x2000027c

08003780 <_malloc_r>:
 8003780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003784:	1ccd      	adds	r5, r1, #3
 8003786:	f025 0503 	bic.w	r5, r5, #3
 800378a:	3508      	adds	r5, #8
 800378c:	2d0c      	cmp	r5, #12
 800378e:	bf38      	it	cc
 8003790:	250c      	movcc	r5, #12
 8003792:	2d00      	cmp	r5, #0
 8003794:	4606      	mov	r6, r0
 8003796:	db01      	blt.n	800379c <_malloc_r+0x1c>
 8003798:	42a9      	cmp	r1, r5
 800379a:	d904      	bls.n	80037a6 <_malloc_r+0x26>
 800379c:	230c      	movs	r3, #12
 800379e:	6033      	str	r3, [r6, #0]
 80037a0:	2000      	movs	r0, #0
 80037a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800387c <_malloc_r+0xfc>
 80037aa:	f000 f869 	bl	8003880 <__malloc_lock>
 80037ae:	f8d8 3000 	ldr.w	r3, [r8]
 80037b2:	461c      	mov	r4, r3
 80037b4:	bb44      	cbnz	r4, 8003808 <_malloc_r+0x88>
 80037b6:	4629      	mov	r1, r5
 80037b8:	4630      	mov	r0, r6
 80037ba:	f7ff ffbf 	bl	800373c <sbrk_aligned>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	4604      	mov	r4, r0
 80037c2:	d158      	bne.n	8003876 <_malloc_r+0xf6>
 80037c4:	f8d8 4000 	ldr.w	r4, [r8]
 80037c8:	4627      	mov	r7, r4
 80037ca:	2f00      	cmp	r7, #0
 80037cc:	d143      	bne.n	8003856 <_malloc_r+0xd6>
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	d04b      	beq.n	800386a <_malloc_r+0xea>
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	4639      	mov	r1, r7
 80037d6:	4630      	mov	r0, r6
 80037d8:	eb04 0903 	add.w	r9, r4, r3
 80037dc:	f000 fb5c 	bl	8003e98 <_sbrk_r>
 80037e0:	4581      	cmp	r9, r0
 80037e2:	d142      	bne.n	800386a <_malloc_r+0xea>
 80037e4:	6821      	ldr	r1, [r4, #0]
 80037e6:	1a6d      	subs	r5, r5, r1
 80037e8:	4629      	mov	r1, r5
 80037ea:	4630      	mov	r0, r6
 80037ec:	f7ff ffa6 	bl	800373c <sbrk_aligned>
 80037f0:	3001      	adds	r0, #1
 80037f2:	d03a      	beq.n	800386a <_malloc_r+0xea>
 80037f4:	6823      	ldr	r3, [r4, #0]
 80037f6:	442b      	add	r3, r5
 80037f8:	6023      	str	r3, [r4, #0]
 80037fa:	f8d8 3000 	ldr.w	r3, [r8]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	bb62      	cbnz	r2, 800385c <_malloc_r+0xdc>
 8003802:	f8c8 7000 	str.w	r7, [r8]
 8003806:	e00f      	b.n	8003828 <_malloc_r+0xa8>
 8003808:	6822      	ldr	r2, [r4, #0]
 800380a:	1b52      	subs	r2, r2, r5
 800380c:	d420      	bmi.n	8003850 <_malloc_r+0xd0>
 800380e:	2a0b      	cmp	r2, #11
 8003810:	d917      	bls.n	8003842 <_malloc_r+0xc2>
 8003812:	1961      	adds	r1, r4, r5
 8003814:	42a3      	cmp	r3, r4
 8003816:	6025      	str	r5, [r4, #0]
 8003818:	bf18      	it	ne
 800381a:	6059      	strne	r1, [r3, #4]
 800381c:	6863      	ldr	r3, [r4, #4]
 800381e:	bf08      	it	eq
 8003820:	f8c8 1000 	streq.w	r1, [r8]
 8003824:	5162      	str	r2, [r4, r5]
 8003826:	604b      	str	r3, [r1, #4]
 8003828:	4630      	mov	r0, r6
 800382a:	f000 f82f 	bl	800388c <__malloc_unlock>
 800382e:	f104 000b 	add.w	r0, r4, #11
 8003832:	1d23      	adds	r3, r4, #4
 8003834:	f020 0007 	bic.w	r0, r0, #7
 8003838:	1ac2      	subs	r2, r0, r3
 800383a:	bf1c      	itt	ne
 800383c:	1a1b      	subne	r3, r3, r0
 800383e:	50a3      	strne	r3, [r4, r2]
 8003840:	e7af      	b.n	80037a2 <_malloc_r+0x22>
 8003842:	6862      	ldr	r2, [r4, #4]
 8003844:	42a3      	cmp	r3, r4
 8003846:	bf0c      	ite	eq
 8003848:	f8c8 2000 	streq.w	r2, [r8]
 800384c:	605a      	strne	r2, [r3, #4]
 800384e:	e7eb      	b.n	8003828 <_malloc_r+0xa8>
 8003850:	4623      	mov	r3, r4
 8003852:	6864      	ldr	r4, [r4, #4]
 8003854:	e7ae      	b.n	80037b4 <_malloc_r+0x34>
 8003856:	463c      	mov	r4, r7
 8003858:	687f      	ldr	r7, [r7, #4]
 800385a:	e7b6      	b.n	80037ca <_malloc_r+0x4a>
 800385c:	461a      	mov	r2, r3
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	42a3      	cmp	r3, r4
 8003862:	d1fb      	bne.n	800385c <_malloc_r+0xdc>
 8003864:	2300      	movs	r3, #0
 8003866:	6053      	str	r3, [r2, #4]
 8003868:	e7de      	b.n	8003828 <_malloc_r+0xa8>
 800386a:	230c      	movs	r3, #12
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f80c 	bl	800388c <__malloc_unlock>
 8003874:	e794      	b.n	80037a0 <_malloc_r+0x20>
 8003876:	6005      	str	r5, [r0, #0]
 8003878:	e7d6      	b.n	8003828 <_malloc_r+0xa8>
 800387a:	bf00      	nop
 800387c:	20000280 	.word	0x20000280

08003880 <__malloc_lock>:
 8003880:	4801      	ldr	r0, [pc, #4]	@ (8003888 <__malloc_lock+0x8>)
 8003882:	f7ff bf0f 	b.w	80036a4 <__retarget_lock_acquire_recursive>
 8003886:	bf00      	nop
 8003888:	20000278 	.word	0x20000278

0800388c <__malloc_unlock>:
 800388c:	4801      	ldr	r0, [pc, #4]	@ (8003894 <__malloc_unlock+0x8>)
 800388e:	f7ff bf0a 	b.w	80036a6 <__retarget_lock_release_recursive>
 8003892:	bf00      	nop
 8003894:	20000278 	.word	0x20000278

08003898 <__ssputs_r>:
 8003898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800389c:	688e      	ldr	r6, [r1, #8]
 800389e:	461f      	mov	r7, r3
 80038a0:	42be      	cmp	r6, r7
 80038a2:	680b      	ldr	r3, [r1, #0]
 80038a4:	4682      	mov	sl, r0
 80038a6:	460c      	mov	r4, r1
 80038a8:	4690      	mov	r8, r2
 80038aa:	d82d      	bhi.n	8003908 <__ssputs_r+0x70>
 80038ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038b0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80038b4:	d026      	beq.n	8003904 <__ssputs_r+0x6c>
 80038b6:	6965      	ldr	r5, [r4, #20]
 80038b8:	6909      	ldr	r1, [r1, #16]
 80038ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038be:	eba3 0901 	sub.w	r9, r3, r1
 80038c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038c6:	1c7b      	adds	r3, r7, #1
 80038c8:	444b      	add	r3, r9
 80038ca:	106d      	asrs	r5, r5, #1
 80038cc:	429d      	cmp	r5, r3
 80038ce:	bf38      	it	cc
 80038d0:	461d      	movcc	r5, r3
 80038d2:	0553      	lsls	r3, r2, #21
 80038d4:	d527      	bpl.n	8003926 <__ssputs_r+0x8e>
 80038d6:	4629      	mov	r1, r5
 80038d8:	f7ff ff52 	bl	8003780 <_malloc_r>
 80038dc:	4606      	mov	r6, r0
 80038de:	b360      	cbz	r0, 800393a <__ssputs_r+0xa2>
 80038e0:	6921      	ldr	r1, [r4, #16]
 80038e2:	464a      	mov	r2, r9
 80038e4:	f000 fae8 	bl	8003eb8 <memcpy>
 80038e8:	89a3      	ldrh	r3, [r4, #12]
 80038ea:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80038ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038f2:	81a3      	strh	r3, [r4, #12]
 80038f4:	6126      	str	r6, [r4, #16]
 80038f6:	6165      	str	r5, [r4, #20]
 80038f8:	444e      	add	r6, r9
 80038fa:	eba5 0509 	sub.w	r5, r5, r9
 80038fe:	6026      	str	r6, [r4, #0]
 8003900:	60a5      	str	r5, [r4, #8]
 8003902:	463e      	mov	r6, r7
 8003904:	42be      	cmp	r6, r7
 8003906:	d900      	bls.n	800390a <__ssputs_r+0x72>
 8003908:	463e      	mov	r6, r7
 800390a:	6820      	ldr	r0, [r4, #0]
 800390c:	4632      	mov	r2, r6
 800390e:	4641      	mov	r1, r8
 8003910:	f000 faa8 	bl	8003e64 <memmove>
 8003914:	68a3      	ldr	r3, [r4, #8]
 8003916:	1b9b      	subs	r3, r3, r6
 8003918:	60a3      	str	r3, [r4, #8]
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	4433      	add	r3, r6
 800391e:	6023      	str	r3, [r4, #0]
 8003920:	2000      	movs	r0, #0
 8003922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003926:	462a      	mov	r2, r5
 8003928:	f000 fad4 	bl	8003ed4 <_realloc_r>
 800392c:	4606      	mov	r6, r0
 800392e:	2800      	cmp	r0, #0
 8003930:	d1e0      	bne.n	80038f4 <__ssputs_r+0x5c>
 8003932:	6921      	ldr	r1, [r4, #16]
 8003934:	4650      	mov	r0, sl
 8003936:	f7ff feb7 	bl	80036a8 <_free_r>
 800393a:	230c      	movs	r3, #12
 800393c:	f8ca 3000 	str.w	r3, [sl]
 8003940:	89a3      	ldrh	r3, [r4, #12]
 8003942:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	f04f 30ff 	mov.w	r0, #4294967295
 800394c:	e7e9      	b.n	8003922 <__ssputs_r+0x8a>
	...

08003950 <_svfiprintf_r>:
 8003950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003954:	4698      	mov	r8, r3
 8003956:	898b      	ldrh	r3, [r1, #12]
 8003958:	061b      	lsls	r3, r3, #24
 800395a:	b09d      	sub	sp, #116	@ 0x74
 800395c:	4607      	mov	r7, r0
 800395e:	460d      	mov	r5, r1
 8003960:	4614      	mov	r4, r2
 8003962:	d510      	bpl.n	8003986 <_svfiprintf_r+0x36>
 8003964:	690b      	ldr	r3, [r1, #16]
 8003966:	b973      	cbnz	r3, 8003986 <_svfiprintf_r+0x36>
 8003968:	2140      	movs	r1, #64	@ 0x40
 800396a:	f7ff ff09 	bl	8003780 <_malloc_r>
 800396e:	6028      	str	r0, [r5, #0]
 8003970:	6128      	str	r0, [r5, #16]
 8003972:	b930      	cbnz	r0, 8003982 <_svfiprintf_r+0x32>
 8003974:	230c      	movs	r3, #12
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	f04f 30ff 	mov.w	r0, #4294967295
 800397c:	b01d      	add	sp, #116	@ 0x74
 800397e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003982:	2340      	movs	r3, #64	@ 0x40
 8003984:	616b      	str	r3, [r5, #20]
 8003986:	2300      	movs	r3, #0
 8003988:	9309      	str	r3, [sp, #36]	@ 0x24
 800398a:	2320      	movs	r3, #32
 800398c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003990:	f8cd 800c 	str.w	r8, [sp, #12]
 8003994:	2330      	movs	r3, #48	@ 0x30
 8003996:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b34 <_svfiprintf_r+0x1e4>
 800399a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800399e:	f04f 0901 	mov.w	r9, #1
 80039a2:	4623      	mov	r3, r4
 80039a4:	469a      	mov	sl, r3
 80039a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039aa:	b10a      	cbz	r2, 80039b0 <_svfiprintf_r+0x60>
 80039ac:	2a25      	cmp	r2, #37	@ 0x25
 80039ae:	d1f9      	bne.n	80039a4 <_svfiprintf_r+0x54>
 80039b0:	ebba 0b04 	subs.w	fp, sl, r4
 80039b4:	d00b      	beq.n	80039ce <_svfiprintf_r+0x7e>
 80039b6:	465b      	mov	r3, fp
 80039b8:	4622      	mov	r2, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	4638      	mov	r0, r7
 80039be:	f7ff ff6b 	bl	8003898 <__ssputs_r>
 80039c2:	3001      	adds	r0, #1
 80039c4:	f000 80a7 	beq.w	8003b16 <_svfiprintf_r+0x1c6>
 80039c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80039ca:	445a      	add	r2, fp
 80039cc:	9209      	str	r2, [sp, #36]	@ 0x24
 80039ce:	f89a 3000 	ldrb.w	r3, [sl]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 809f 	beq.w	8003b16 <_svfiprintf_r+0x1c6>
 80039d8:	2300      	movs	r3, #0
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039e2:	f10a 0a01 	add.w	sl, sl, #1
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	9307      	str	r3, [sp, #28]
 80039ea:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80039ee:	931a      	str	r3, [sp, #104]	@ 0x68
 80039f0:	4654      	mov	r4, sl
 80039f2:	2205      	movs	r2, #5
 80039f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039f8:	484e      	ldr	r0, [pc, #312]	@ (8003b34 <_svfiprintf_r+0x1e4>)
 80039fa:	f7fc fc09 	bl	8000210 <memchr>
 80039fe:	9a04      	ldr	r2, [sp, #16]
 8003a00:	b9d8      	cbnz	r0, 8003a3a <_svfiprintf_r+0xea>
 8003a02:	06d0      	lsls	r0, r2, #27
 8003a04:	bf44      	itt	mi
 8003a06:	2320      	movmi	r3, #32
 8003a08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a0c:	0711      	lsls	r1, r2, #28
 8003a0e:	bf44      	itt	mi
 8003a10:	232b      	movmi	r3, #43	@ 0x2b
 8003a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a16:	f89a 3000 	ldrb.w	r3, [sl]
 8003a1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a1c:	d015      	beq.n	8003a4a <_svfiprintf_r+0xfa>
 8003a1e:	9a07      	ldr	r2, [sp, #28]
 8003a20:	4654      	mov	r4, sl
 8003a22:	2000      	movs	r0, #0
 8003a24:	f04f 0c0a 	mov.w	ip, #10
 8003a28:	4621      	mov	r1, r4
 8003a2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a2e:	3b30      	subs	r3, #48	@ 0x30
 8003a30:	2b09      	cmp	r3, #9
 8003a32:	d94b      	bls.n	8003acc <_svfiprintf_r+0x17c>
 8003a34:	b1b0      	cbz	r0, 8003a64 <_svfiprintf_r+0x114>
 8003a36:	9207      	str	r2, [sp, #28]
 8003a38:	e014      	b.n	8003a64 <_svfiprintf_r+0x114>
 8003a3a:	eba0 0308 	sub.w	r3, r0, r8
 8003a3e:	fa09 f303 	lsl.w	r3, r9, r3
 8003a42:	4313      	orrs	r3, r2
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	46a2      	mov	sl, r4
 8003a48:	e7d2      	b.n	80039f0 <_svfiprintf_r+0xa0>
 8003a4a:	9b03      	ldr	r3, [sp, #12]
 8003a4c:	1d19      	adds	r1, r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	9103      	str	r1, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfbb      	ittet	lt
 8003a56:	425b      	neglt	r3, r3
 8003a58:	f042 0202 	orrlt.w	r2, r2, #2
 8003a5c:	9307      	strge	r3, [sp, #28]
 8003a5e:	9307      	strlt	r3, [sp, #28]
 8003a60:	bfb8      	it	lt
 8003a62:	9204      	strlt	r2, [sp, #16]
 8003a64:	7823      	ldrb	r3, [r4, #0]
 8003a66:	2b2e      	cmp	r3, #46	@ 0x2e
 8003a68:	d10a      	bne.n	8003a80 <_svfiprintf_r+0x130>
 8003a6a:	7863      	ldrb	r3, [r4, #1]
 8003a6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a6e:	d132      	bne.n	8003ad6 <_svfiprintf_r+0x186>
 8003a70:	9b03      	ldr	r3, [sp, #12]
 8003a72:	1d1a      	adds	r2, r3, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	9203      	str	r2, [sp, #12]
 8003a78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003a7c:	3402      	adds	r4, #2
 8003a7e:	9305      	str	r3, [sp, #20]
 8003a80:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003b44 <_svfiprintf_r+0x1f4>
 8003a84:	7821      	ldrb	r1, [r4, #0]
 8003a86:	2203      	movs	r2, #3
 8003a88:	4650      	mov	r0, sl
 8003a8a:	f7fc fbc1 	bl	8000210 <memchr>
 8003a8e:	b138      	cbz	r0, 8003aa0 <_svfiprintf_r+0x150>
 8003a90:	9b04      	ldr	r3, [sp, #16]
 8003a92:	eba0 000a 	sub.w	r0, r0, sl
 8003a96:	2240      	movs	r2, #64	@ 0x40
 8003a98:	4082      	lsls	r2, r0
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	3401      	adds	r4, #1
 8003a9e:	9304      	str	r3, [sp, #16]
 8003aa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003aa4:	4824      	ldr	r0, [pc, #144]	@ (8003b38 <_svfiprintf_r+0x1e8>)
 8003aa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003aaa:	2206      	movs	r2, #6
 8003aac:	f7fc fbb0 	bl	8000210 <memchr>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d036      	beq.n	8003b22 <_svfiprintf_r+0x1d2>
 8003ab4:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <_svfiprintf_r+0x1ec>)
 8003ab6:	bb1b      	cbnz	r3, 8003b00 <_svfiprintf_r+0x1b0>
 8003ab8:	9b03      	ldr	r3, [sp, #12]
 8003aba:	3307      	adds	r3, #7
 8003abc:	f023 0307 	bic.w	r3, r3, #7
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	9303      	str	r3, [sp, #12]
 8003ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ac6:	4433      	add	r3, r6
 8003ac8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003aca:	e76a      	b.n	80039a2 <_svfiprintf_r+0x52>
 8003acc:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ad0:	460c      	mov	r4, r1
 8003ad2:	2001      	movs	r0, #1
 8003ad4:	e7a8      	b.n	8003a28 <_svfiprintf_r+0xd8>
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	3401      	adds	r4, #1
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	4619      	mov	r1, r3
 8003ade:	f04f 0c0a 	mov.w	ip, #10
 8003ae2:	4620      	mov	r0, r4
 8003ae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ae8:	3a30      	subs	r2, #48	@ 0x30
 8003aea:	2a09      	cmp	r2, #9
 8003aec:	d903      	bls.n	8003af6 <_svfiprintf_r+0x1a6>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0c6      	beq.n	8003a80 <_svfiprintf_r+0x130>
 8003af2:	9105      	str	r1, [sp, #20]
 8003af4:	e7c4      	b.n	8003a80 <_svfiprintf_r+0x130>
 8003af6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003afa:	4604      	mov	r4, r0
 8003afc:	2301      	movs	r3, #1
 8003afe:	e7f0      	b.n	8003ae2 <_svfiprintf_r+0x192>
 8003b00:	ab03      	add	r3, sp, #12
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	462a      	mov	r2, r5
 8003b06:	4b0e      	ldr	r3, [pc, #56]	@ (8003b40 <_svfiprintf_r+0x1f0>)
 8003b08:	a904      	add	r1, sp, #16
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	f3af 8000 	nop.w
 8003b10:	1c42      	adds	r2, r0, #1
 8003b12:	4606      	mov	r6, r0
 8003b14:	d1d6      	bne.n	8003ac4 <_svfiprintf_r+0x174>
 8003b16:	89ab      	ldrh	r3, [r5, #12]
 8003b18:	065b      	lsls	r3, r3, #25
 8003b1a:	f53f af2d 	bmi.w	8003978 <_svfiprintf_r+0x28>
 8003b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b20:	e72c      	b.n	800397c <_svfiprintf_r+0x2c>
 8003b22:	ab03      	add	r3, sp, #12
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	462a      	mov	r2, r5
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <_svfiprintf_r+0x1f0>)
 8003b2a:	a904      	add	r1, sp, #16
 8003b2c:	4638      	mov	r0, r7
 8003b2e:	f000 f879 	bl	8003c24 <_printf_i>
 8003b32:	e7ed      	b.n	8003b10 <_svfiprintf_r+0x1c0>
 8003b34:	08003fac 	.word	0x08003fac
 8003b38:	08003fb6 	.word	0x08003fb6
 8003b3c:	00000000 	.word	0x00000000
 8003b40:	08003899 	.word	0x08003899
 8003b44:	08003fb2 	.word	0x08003fb2

08003b48 <_printf_common>:
 8003b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b4c:	4616      	mov	r6, r2
 8003b4e:	4698      	mov	r8, r3
 8003b50:	688a      	ldr	r2, [r1, #8]
 8003b52:	690b      	ldr	r3, [r1, #16]
 8003b54:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	bfb8      	it	lt
 8003b5c:	4613      	movlt	r3, r2
 8003b5e:	6033      	str	r3, [r6, #0]
 8003b60:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003b64:	4607      	mov	r7, r0
 8003b66:	460c      	mov	r4, r1
 8003b68:	b10a      	cbz	r2, 8003b6e <_printf_common+0x26>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	6033      	str	r3, [r6, #0]
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	0699      	lsls	r1, r3, #26
 8003b72:	bf42      	ittt	mi
 8003b74:	6833      	ldrmi	r3, [r6, #0]
 8003b76:	3302      	addmi	r3, #2
 8003b78:	6033      	strmi	r3, [r6, #0]
 8003b7a:	6825      	ldr	r5, [r4, #0]
 8003b7c:	f015 0506 	ands.w	r5, r5, #6
 8003b80:	d106      	bne.n	8003b90 <_printf_common+0x48>
 8003b82:	f104 0a19 	add.w	sl, r4, #25
 8003b86:	68e3      	ldr	r3, [r4, #12]
 8003b88:	6832      	ldr	r2, [r6, #0]
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	42ab      	cmp	r3, r5
 8003b8e:	dc26      	bgt.n	8003bde <_printf_common+0x96>
 8003b90:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003b94:	6822      	ldr	r2, [r4, #0]
 8003b96:	3b00      	subs	r3, #0
 8003b98:	bf18      	it	ne
 8003b9a:	2301      	movne	r3, #1
 8003b9c:	0692      	lsls	r2, r2, #26
 8003b9e:	d42b      	bmi.n	8003bf8 <_printf_common+0xb0>
 8003ba0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003ba4:	4641      	mov	r1, r8
 8003ba6:	4638      	mov	r0, r7
 8003ba8:	47c8      	blx	r9
 8003baa:	3001      	adds	r0, #1
 8003bac:	d01e      	beq.n	8003bec <_printf_common+0xa4>
 8003bae:	6823      	ldr	r3, [r4, #0]
 8003bb0:	6922      	ldr	r2, [r4, #16]
 8003bb2:	f003 0306 	and.w	r3, r3, #6
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	bf02      	ittt	eq
 8003bba:	68e5      	ldreq	r5, [r4, #12]
 8003bbc:	6833      	ldreq	r3, [r6, #0]
 8003bbe:	1aed      	subeq	r5, r5, r3
 8003bc0:	68a3      	ldr	r3, [r4, #8]
 8003bc2:	bf0c      	ite	eq
 8003bc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bc8:	2500      	movne	r5, #0
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	bfc4      	itt	gt
 8003bce:	1a9b      	subgt	r3, r3, r2
 8003bd0:	18ed      	addgt	r5, r5, r3
 8003bd2:	2600      	movs	r6, #0
 8003bd4:	341a      	adds	r4, #26
 8003bd6:	42b5      	cmp	r5, r6
 8003bd8:	d11a      	bne.n	8003c10 <_printf_common+0xc8>
 8003bda:	2000      	movs	r0, #0
 8003bdc:	e008      	b.n	8003bf0 <_printf_common+0xa8>
 8003bde:	2301      	movs	r3, #1
 8003be0:	4652      	mov	r2, sl
 8003be2:	4641      	mov	r1, r8
 8003be4:	4638      	mov	r0, r7
 8003be6:	47c8      	blx	r9
 8003be8:	3001      	adds	r0, #1
 8003bea:	d103      	bne.n	8003bf4 <_printf_common+0xac>
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bf4:	3501      	adds	r5, #1
 8003bf6:	e7c6      	b.n	8003b86 <_printf_common+0x3e>
 8003bf8:	18e1      	adds	r1, r4, r3
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	2030      	movs	r0, #48	@ 0x30
 8003bfe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c02:	4422      	add	r2, r4
 8003c04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c0c:	3302      	adds	r3, #2
 8003c0e:	e7c7      	b.n	8003ba0 <_printf_common+0x58>
 8003c10:	2301      	movs	r3, #1
 8003c12:	4622      	mov	r2, r4
 8003c14:	4641      	mov	r1, r8
 8003c16:	4638      	mov	r0, r7
 8003c18:	47c8      	blx	r9
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	d0e6      	beq.n	8003bec <_printf_common+0xa4>
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7d9      	b.n	8003bd6 <_printf_common+0x8e>
	...

08003c24 <_printf_i>:
 8003c24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c28:	7e0f      	ldrb	r7, [r1, #24]
 8003c2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c2c:	2f78      	cmp	r7, #120	@ 0x78
 8003c2e:	4691      	mov	r9, r2
 8003c30:	4680      	mov	r8, r0
 8003c32:	460c      	mov	r4, r1
 8003c34:	469a      	mov	sl, r3
 8003c36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c3a:	d807      	bhi.n	8003c4c <_printf_i+0x28>
 8003c3c:	2f62      	cmp	r7, #98	@ 0x62
 8003c3e:	d80a      	bhi.n	8003c56 <_printf_i+0x32>
 8003c40:	2f00      	cmp	r7, #0
 8003c42:	f000 80d2 	beq.w	8003dea <_printf_i+0x1c6>
 8003c46:	2f58      	cmp	r7, #88	@ 0x58
 8003c48:	f000 80b9 	beq.w	8003dbe <_printf_i+0x19a>
 8003c4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003c50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003c54:	e03a      	b.n	8003ccc <_printf_i+0xa8>
 8003c56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003c5a:	2b15      	cmp	r3, #21
 8003c5c:	d8f6      	bhi.n	8003c4c <_printf_i+0x28>
 8003c5e:	a101      	add	r1, pc, #4	@ (adr r1, 8003c64 <_printf_i+0x40>)
 8003c60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c64:	08003cbd 	.word	0x08003cbd
 8003c68:	08003cd1 	.word	0x08003cd1
 8003c6c:	08003c4d 	.word	0x08003c4d
 8003c70:	08003c4d 	.word	0x08003c4d
 8003c74:	08003c4d 	.word	0x08003c4d
 8003c78:	08003c4d 	.word	0x08003c4d
 8003c7c:	08003cd1 	.word	0x08003cd1
 8003c80:	08003c4d 	.word	0x08003c4d
 8003c84:	08003c4d 	.word	0x08003c4d
 8003c88:	08003c4d 	.word	0x08003c4d
 8003c8c:	08003c4d 	.word	0x08003c4d
 8003c90:	08003dd1 	.word	0x08003dd1
 8003c94:	08003cfb 	.word	0x08003cfb
 8003c98:	08003d8b 	.word	0x08003d8b
 8003c9c:	08003c4d 	.word	0x08003c4d
 8003ca0:	08003c4d 	.word	0x08003c4d
 8003ca4:	08003df3 	.word	0x08003df3
 8003ca8:	08003c4d 	.word	0x08003c4d
 8003cac:	08003cfb 	.word	0x08003cfb
 8003cb0:	08003c4d 	.word	0x08003c4d
 8003cb4:	08003c4d 	.word	0x08003c4d
 8003cb8:	08003d93 	.word	0x08003d93
 8003cbc:	6833      	ldr	r3, [r6, #0]
 8003cbe:	1d1a      	adds	r2, r3, #4
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6032      	str	r2, [r6, #0]
 8003cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e09d      	b.n	8003e0c <_printf_i+0x1e8>
 8003cd0:	6833      	ldr	r3, [r6, #0]
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	1d19      	adds	r1, r3, #4
 8003cd6:	6031      	str	r1, [r6, #0]
 8003cd8:	0606      	lsls	r6, r0, #24
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0xbc>
 8003cdc:	681d      	ldr	r5, [r3, #0]
 8003cde:	e003      	b.n	8003ce8 <_printf_i+0xc4>
 8003ce0:	0645      	lsls	r5, r0, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0xb8>
 8003ce4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	da03      	bge.n	8003cf4 <_printf_i+0xd0>
 8003cec:	232d      	movs	r3, #45	@ 0x2d
 8003cee:	426d      	negs	r5, r5
 8003cf0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cf4:	4859      	ldr	r0, [pc, #356]	@ (8003e5c <_printf_i+0x238>)
 8003cf6:	230a      	movs	r3, #10
 8003cf8:	e011      	b.n	8003d1e <_printf_i+0xfa>
 8003cfa:	6821      	ldr	r1, [r4, #0]
 8003cfc:	6833      	ldr	r3, [r6, #0]
 8003cfe:	0608      	lsls	r0, r1, #24
 8003d00:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d04:	d402      	bmi.n	8003d0c <_printf_i+0xe8>
 8003d06:	0649      	lsls	r1, r1, #25
 8003d08:	bf48      	it	mi
 8003d0a:	b2ad      	uxthmi	r5, r5
 8003d0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d0e:	4853      	ldr	r0, [pc, #332]	@ (8003e5c <_printf_i+0x238>)
 8003d10:	6033      	str	r3, [r6, #0]
 8003d12:	bf14      	ite	ne
 8003d14:	230a      	movne	r3, #10
 8003d16:	2308      	moveq	r3, #8
 8003d18:	2100      	movs	r1, #0
 8003d1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d1e:	6866      	ldr	r6, [r4, #4]
 8003d20:	60a6      	str	r6, [r4, #8]
 8003d22:	2e00      	cmp	r6, #0
 8003d24:	bfa2      	ittt	ge
 8003d26:	6821      	ldrge	r1, [r4, #0]
 8003d28:	f021 0104 	bicge.w	r1, r1, #4
 8003d2c:	6021      	strge	r1, [r4, #0]
 8003d2e:	b90d      	cbnz	r5, 8003d34 <_printf_i+0x110>
 8003d30:	2e00      	cmp	r6, #0
 8003d32:	d04b      	beq.n	8003dcc <_printf_i+0x1a8>
 8003d34:	4616      	mov	r6, r2
 8003d36:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d3a:	fb03 5711 	mls	r7, r3, r1, r5
 8003d3e:	5dc7      	ldrb	r7, [r0, r7]
 8003d40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d44:	462f      	mov	r7, r5
 8003d46:	42bb      	cmp	r3, r7
 8003d48:	460d      	mov	r5, r1
 8003d4a:	d9f4      	bls.n	8003d36 <_printf_i+0x112>
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d10b      	bne.n	8003d68 <_printf_i+0x144>
 8003d50:	6823      	ldr	r3, [r4, #0]
 8003d52:	07df      	lsls	r7, r3, #31
 8003d54:	d508      	bpl.n	8003d68 <_printf_i+0x144>
 8003d56:	6923      	ldr	r3, [r4, #16]
 8003d58:	6861      	ldr	r1, [r4, #4]
 8003d5a:	4299      	cmp	r1, r3
 8003d5c:	bfde      	ittt	le
 8003d5e:	2330      	movle	r3, #48	@ 0x30
 8003d60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d68:	1b92      	subs	r2, r2, r6
 8003d6a:	6122      	str	r2, [r4, #16]
 8003d6c:	f8cd a000 	str.w	sl, [sp]
 8003d70:	464b      	mov	r3, r9
 8003d72:	aa03      	add	r2, sp, #12
 8003d74:	4621      	mov	r1, r4
 8003d76:	4640      	mov	r0, r8
 8003d78:	f7ff fee6 	bl	8003b48 <_printf_common>
 8003d7c:	3001      	adds	r0, #1
 8003d7e:	d14a      	bne.n	8003e16 <_printf_i+0x1f2>
 8003d80:	f04f 30ff 	mov.w	r0, #4294967295
 8003d84:	b004      	add	sp, #16
 8003d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d8a:	6823      	ldr	r3, [r4, #0]
 8003d8c:	f043 0320 	orr.w	r3, r3, #32
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	4833      	ldr	r0, [pc, #204]	@ (8003e60 <_printf_i+0x23c>)
 8003d94:	2778      	movs	r7, #120	@ 0x78
 8003d96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003d9a:	6823      	ldr	r3, [r4, #0]
 8003d9c:	6831      	ldr	r1, [r6, #0]
 8003d9e:	061f      	lsls	r7, r3, #24
 8003da0:	f851 5b04 	ldr.w	r5, [r1], #4
 8003da4:	d402      	bmi.n	8003dac <_printf_i+0x188>
 8003da6:	065f      	lsls	r7, r3, #25
 8003da8:	bf48      	it	mi
 8003daa:	b2ad      	uxthmi	r5, r5
 8003dac:	6031      	str	r1, [r6, #0]
 8003dae:	07d9      	lsls	r1, r3, #31
 8003db0:	bf44      	itt	mi
 8003db2:	f043 0320 	orrmi.w	r3, r3, #32
 8003db6:	6023      	strmi	r3, [r4, #0]
 8003db8:	b11d      	cbz	r5, 8003dc2 <_printf_i+0x19e>
 8003dba:	2310      	movs	r3, #16
 8003dbc:	e7ac      	b.n	8003d18 <_printf_i+0xf4>
 8003dbe:	4827      	ldr	r0, [pc, #156]	@ (8003e5c <_printf_i+0x238>)
 8003dc0:	e7e9      	b.n	8003d96 <_printf_i+0x172>
 8003dc2:	6823      	ldr	r3, [r4, #0]
 8003dc4:	f023 0320 	bic.w	r3, r3, #32
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	e7f6      	b.n	8003dba <_printf_i+0x196>
 8003dcc:	4616      	mov	r6, r2
 8003dce:	e7bd      	b.n	8003d4c <_printf_i+0x128>
 8003dd0:	6833      	ldr	r3, [r6, #0]
 8003dd2:	6825      	ldr	r5, [r4, #0]
 8003dd4:	6961      	ldr	r1, [r4, #20]
 8003dd6:	1d18      	adds	r0, r3, #4
 8003dd8:	6030      	str	r0, [r6, #0]
 8003dda:	062e      	lsls	r6, r5, #24
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	d501      	bpl.n	8003de4 <_printf_i+0x1c0>
 8003de0:	6019      	str	r1, [r3, #0]
 8003de2:	e002      	b.n	8003dea <_printf_i+0x1c6>
 8003de4:	0668      	lsls	r0, r5, #25
 8003de6:	d5fb      	bpl.n	8003de0 <_printf_i+0x1bc>
 8003de8:	8019      	strh	r1, [r3, #0]
 8003dea:	2300      	movs	r3, #0
 8003dec:	6123      	str	r3, [r4, #16]
 8003dee:	4616      	mov	r6, r2
 8003df0:	e7bc      	b.n	8003d6c <_printf_i+0x148>
 8003df2:	6833      	ldr	r3, [r6, #0]
 8003df4:	1d1a      	adds	r2, r3, #4
 8003df6:	6032      	str	r2, [r6, #0]
 8003df8:	681e      	ldr	r6, [r3, #0]
 8003dfa:	6862      	ldr	r2, [r4, #4]
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f7fc fa06 	bl	8000210 <memchr>
 8003e04:	b108      	cbz	r0, 8003e0a <_printf_i+0x1e6>
 8003e06:	1b80      	subs	r0, r0, r6
 8003e08:	6060      	str	r0, [r4, #4]
 8003e0a:	6863      	ldr	r3, [r4, #4]
 8003e0c:	6123      	str	r3, [r4, #16]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e14:	e7aa      	b.n	8003d6c <_printf_i+0x148>
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	4632      	mov	r2, r6
 8003e1a:	4649      	mov	r1, r9
 8003e1c:	4640      	mov	r0, r8
 8003e1e:	47d0      	blx	sl
 8003e20:	3001      	adds	r0, #1
 8003e22:	d0ad      	beq.n	8003d80 <_printf_i+0x15c>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	d413      	bmi.n	8003e52 <_printf_i+0x22e>
 8003e2a:	68e0      	ldr	r0, [r4, #12]
 8003e2c:	9b03      	ldr	r3, [sp, #12]
 8003e2e:	4298      	cmp	r0, r3
 8003e30:	bfb8      	it	lt
 8003e32:	4618      	movlt	r0, r3
 8003e34:	e7a6      	b.n	8003d84 <_printf_i+0x160>
 8003e36:	2301      	movs	r3, #1
 8003e38:	4632      	mov	r2, r6
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	4640      	mov	r0, r8
 8003e3e:	47d0      	blx	sl
 8003e40:	3001      	adds	r0, #1
 8003e42:	d09d      	beq.n	8003d80 <_printf_i+0x15c>
 8003e44:	3501      	adds	r5, #1
 8003e46:	68e3      	ldr	r3, [r4, #12]
 8003e48:	9903      	ldr	r1, [sp, #12]
 8003e4a:	1a5b      	subs	r3, r3, r1
 8003e4c:	42ab      	cmp	r3, r5
 8003e4e:	dcf2      	bgt.n	8003e36 <_printf_i+0x212>
 8003e50:	e7eb      	b.n	8003e2a <_printf_i+0x206>
 8003e52:	2500      	movs	r5, #0
 8003e54:	f104 0619 	add.w	r6, r4, #25
 8003e58:	e7f5      	b.n	8003e46 <_printf_i+0x222>
 8003e5a:	bf00      	nop
 8003e5c:	08003fbd 	.word	0x08003fbd
 8003e60:	08003fce 	.word	0x08003fce

08003e64 <memmove>:
 8003e64:	4288      	cmp	r0, r1
 8003e66:	b510      	push	{r4, lr}
 8003e68:	eb01 0402 	add.w	r4, r1, r2
 8003e6c:	d902      	bls.n	8003e74 <memmove+0x10>
 8003e6e:	4284      	cmp	r4, r0
 8003e70:	4623      	mov	r3, r4
 8003e72:	d807      	bhi.n	8003e84 <memmove+0x20>
 8003e74:	1e43      	subs	r3, r0, #1
 8003e76:	42a1      	cmp	r1, r4
 8003e78:	d008      	beq.n	8003e8c <memmove+0x28>
 8003e7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e82:	e7f8      	b.n	8003e76 <memmove+0x12>
 8003e84:	4402      	add	r2, r0
 8003e86:	4601      	mov	r1, r0
 8003e88:	428a      	cmp	r2, r1
 8003e8a:	d100      	bne.n	8003e8e <memmove+0x2a>
 8003e8c:	bd10      	pop	{r4, pc}
 8003e8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003e96:	e7f7      	b.n	8003e88 <memmove+0x24>

08003e98 <_sbrk_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	4d06      	ldr	r5, [pc, #24]	@ (8003eb4 <_sbrk_r+0x1c>)
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	602b      	str	r3, [r5, #0]
 8003ea4:	f7fc ff50 	bl	8000d48 <_sbrk>
 8003ea8:	1c43      	adds	r3, r0, #1
 8003eaa:	d102      	bne.n	8003eb2 <_sbrk_r+0x1a>
 8003eac:	682b      	ldr	r3, [r5, #0]
 8003eae:	b103      	cbz	r3, 8003eb2 <_sbrk_r+0x1a>
 8003eb0:	6023      	str	r3, [r4, #0]
 8003eb2:	bd38      	pop	{r3, r4, r5, pc}
 8003eb4:	20000274 	.word	0x20000274

08003eb8 <memcpy>:
 8003eb8:	440a      	add	r2, r1
 8003eba:	4291      	cmp	r1, r2
 8003ebc:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ec0:	d100      	bne.n	8003ec4 <memcpy+0xc>
 8003ec2:	4770      	bx	lr
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003eca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ece:	4291      	cmp	r1, r2
 8003ed0:	d1f9      	bne.n	8003ec6 <memcpy+0xe>
 8003ed2:	bd10      	pop	{r4, pc}

08003ed4 <_realloc_r>:
 8003ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ed8:	4680      	mov	r8, r0
 8003eda:	4615      	mov	r5, r2
 8003edc:	460c      	mov	r4, r1
 8003ede:	b921      	cbnz	r1, 8003eea <_realloc_r+0x16>
 8003ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ee4:	4611      	mov	r1, r2
 8003ee6:	f7ff bc4b 	b.w	8003780 <_malloc_r>
 8003eea:	b92a      	cbnz	r2, 8003ef8 <_realloc_r+0x24>
 8003eec:	f7ff fbdc 	bl	80036a8 <_free_r>
 8003ef0:	2400      	movs	r4, #0
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ef8:	f000 f81a 	bl	8003f30 <_malloc_usable_size_r>
 8003efc:	4285      	cmp	r5, r0
 8003efe:	4606      	mov	r6, r0
 8003f00:	d802      	bhi.n	8003f08 <_realloc_r+0x34>
 8003f02:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003f06:	d8f4      	bhi.n	8003ef2 <_realloc_r+0x1e>
 8003f08:	4629      	mov	r1, r5
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	f7ff fc38 	bl	8003780 <_malloc_r>
 8003f10:	4607      	mov	r7, r0
 8003f12:	2800      	cmp	r0, #0
 8003f14:	d0ec      	beq.n	8003ef0 <_realloc_r+0x1c>
 8003f16:	42b5      	cmp	r5, r6
 8003f18:	462a      	mov	r2, r5
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	bf28      	it	cs
 8003f1e:	4632      	movcs	r2, r6
 8003f20:	f7ff ffca 	bl	8003eb8 <memcpy>
 8003f24:	4621      	mov	r1, r4
 8003f26:	4640      	mov	r0, r8
 8003f28:	f7ff fbbe 	bl	80036a8 <_free_r>
 8003f2c:	463c      	mov	r4, r7
 8003f2e:	e7e0      	b.n	8003ef2 <_realloc_r+0x1e>

08003f30 <_malloc_usable_size_r>:
 8003f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f34:	1f18      	subs	r0, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbc      	itt	lt
 8003f3a:	580b      	ldrlt	r3, [r1, r0]
 8003f3c:	18c0      	addlt	r0, r0, r3
 8003f3e:	4770      	bx	lr

08003f40 <_init>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr

08003f4c <_fini>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr
