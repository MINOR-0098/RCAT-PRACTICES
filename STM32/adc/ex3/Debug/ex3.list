
ex3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003414  08003414  00004414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800344c  0800344c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  0800344c  0800344c  0000444c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003454  08003454  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003454  08003454  00004454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003458  08003458  00004458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800345c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20000068  080034c4  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080034c4  0000526c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009992  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a43  00000000  00000000  0000ea2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000878  00000000  00000000  00010470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000672  00000000  00000000  00010ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000230a9  00000000  00000000  0001135a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b299  00000000  00000000  00034403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b30  00000000  00000000  0003f69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001161cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002808  00000000  00000000  00116210  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00118a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000068 	.word	0x20000068
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080033fc 	.word	0x080033fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000006c 	.word	0x2000006c
 8000200:	080033fc 	.word	0x080033fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004fc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000500:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000504:	f003 0301 	and.w	r3, r3, #1
 8000508:	2b00      	cmp	r3, #0
 800050a:	d013      	beq.n	8000534 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800050c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000510:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000514:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00b      	beq.n	8000534 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800051c:	e000      	b.n	8000520 <ITM_SendChar+0x2c>
    {
      __NOP();
 800051e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000520:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d0f9      	beq.n	800051e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800052a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000534:	687b      	ldr	r3, [r7, #4]
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_write>:
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include <stdio.h>
int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffc9 	bl	80004f4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb36 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f830 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f918 	bl	80007bc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f8ec 	bl	8000768 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000590:	f000 f898 	bl	80006c4 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000594:	4810      	ldr	r0, [pc, #64]	@ (80005d8 <main+0x5c>)
 8000596:	f000 fc05 	bl	8000da4 <HAL_ADC_Start>
	  value=HAL_ADC_GetValue(&hadc1);
 800059a:	480f      	ldr	r0, [pc, #60]	@ (80005d8 <main+0x5c>)
 800059c:	f000 fd07 	bl	8000fae <HAL_ADC_GetValue>
 80005a0:	4603      	mov	r3, r0
 80005a2:	461a      	mov	r2, r3
 80005a4:	4b0d      	ldr	r3, [pc, #52]	@ (80005dc <main+0x60>)
 80005a6:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <main+0x5c>)
 80005aa:	f000 fccd 	bl	8000f48 <HAL_ADC_Stop>
	  HAL_Delay(200);
 80005ae:	20c8      	movs	r0, #200	@ 0xc8
 80005b0:	f000 fb90 	bl	8000cd4 <HAL_Delay>
	  if(value<1000)
 80005b4:	4b09      	ldr	r3, [pc, #36]	@ (80005dc <main+0x60>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80005bc:	da02      	bge.n	80005c4 <main+0x48>
	  {
		  printf("MOISTURE LOW \n");
 80005be:	4808      	ldr	r0, [pc, #32]	@ (80005e0 <main+0x64>)
 80005c0:	f002 fb88 	bl	8002cd4 <puts>
	  }
	  if(value>3000)
 80005c4:	4b05      	ldr	r3, [pc, #20]	@ (80005dc <main+0x60>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80005cc:	4293      	cmp	r3, r2
 80005ce:	dde1      	ble.n	8000594 <main+0x18>
	  {
		  printf("MOISTURE HIGH \n");
 80005d0:	4804      	ldr	r0, [pc, #16]	@ (80005e4 <main+0x68>)
 80005d2:	f002 fb7f 	bl	8002cd4 <puts>
	  HAL_ADC_Start(&hadc1);
 80005d6:	e7dd      	b.n	8000594 <main+0x18>
 80005d8:	20000084 	.word	0x20000084
 80005dc:	20000114 	.word	0x20000114
 80005e0:	08003414 	.word	0x08003414
 80005e4:	08003424 	.word	0x08003424

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b094      	sub	sp, #80	@ 0x50
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 031c 	add.w	r3, r7, #28
 80005f2:	2234      	movs	r2, #52	@ 0x34
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f002 fc4c 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	f107 0308 	add.w	r3, r7, #8
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b2a      	ldr	r3, [pc, #168]	@ (80006bc <SystemClock_Config+0xd4>)
 8000612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000614:	4a29      	ldr	r2, [pc, #164]	@ (80006bc <SystemClock_Config+0xd4>)
 8000616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800061a:	6413      	str	r3, [r2, #64]	@ 0x40
 800061c:	4b27      	ldr	r3, [pc, #156]	@ (80006bc <SystemClock_Config+0xd4>)
 800061e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000628:	2300      	movs	r3, #0
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <SystemClock_Config+0xd8>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000634:	4a22      	ldr	r2, [pc, #136]	@ (80006c0 <SystemClock_Config+0xd8>)
 8000636:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b20      	ldr	r3, [pc, #128]	@ (80006c0 <SystemClock_Config+0xd8>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000644:	603b      	str	r3, [r7, #0]
 8000646:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000648:	2302      	movs	r3, #2
 800064a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800064c:	2301      	movs	r3, #1
 800064e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000650:	2310      	movs	r3, #16
 8000652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	2302      	movs	r3, #2
 8000656:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000658:	2300      	movs	r3, #0
 800065a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800065c:	2310      	movs	r3, #16
 800065e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000660:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000664:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000666:	2304      	movs	r3, #4
 8000668:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066e:	2302      	movs	r3, #2
 8000670:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4618      	mov	r0, r3
 8000678:	f001 fcb2 	bl	8001fe0 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000682:	f000 f909 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2302      	movs	r3, #2
 800068c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000696:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2102      	movs	r1, #2
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 f952 	bl	800194c <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006ae:	f000 f8f3 	bl	8000898 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	@ 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ca:	463b      	mov	r3, r7
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d6:	4b21      	ldr	r3, [pc, #132]	@ (800075c <MX_ADC1_Init+0x98>)
 80006d8:	4a21      	ldr	r2, [pc, #132]	@ (8000760 <MX_ADC1_Init+0x9c>)
 80006da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006dc:	4b1f      	ldr	r3, [pc, #124]	@ (800075c <MX_ADC1_Init+0x98>)
 80006de:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80006e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e4:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <MX_ADC1_Init+0x98>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <MX_ADC1_Init+0x98>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006f0:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_ADC1_Init+0x98>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f6:	4b19      	ldr	r3, [pc, #100]	@ (800075c <MX_ADC1_Init+0x98>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_ADC1_Init+0x98>)
 8000700:	2200      	movs	r2, #0
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_ADC1_Init+0x98>)
 8000706:	4a17      	ldr	r2, [pc, #92]	@ (8000764 <MX_ADC1_Init+0xa0>)
 8000708:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800070a:	4b14      	ldr	r3, [pc, #80]	@ (800075c <MX_ADC1_Init+0x98>)
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_ADC1_Init+0x98>)
 8000712:	2201      	movs	r2, #1
 8000714:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000716:	4b11      	ldr	r3, [pc, #68]	@ (800075c <MX_ADC1_Init+0x98>)
 8000718:	2200      	movs	r2, #0
 800071a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_ADC1_Init+0x98>)
 8000720:	2201      	movs	r2, #1
 8000722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_ADC1_Init+0x98>)
 8000726:	f000 faf9 	bl	8000d1c <HAL_ADC_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000730:	f000 f8b2 	bl	8000898 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000734:	2301      	movs	r3, #1
 8000736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000738:	2301      	movs	r3, #1
 800073a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	4805      	ldr	r0, [pc, #20]	@ (800075c <MX_ADC1_Init+0x98>)
 8000746:	f000 fc3f 	bl	8000fc8 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000750:	f000 f8a2 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000084 	.word	0x20000084
 8000760:	40012000 	.word	0x40012000
 8000764:	0f000001 	.word	0x0f000001

08000768 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800076c:	4b11      	ldr	r3, [pc, #68]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800076e:	4a12      	ldr	r2, [pc, #72]	@ (80007b8 <MX_USART2_UART_Init+0x50>)
 8000770:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000772:	4b10      	ldr	r3, [pc, #64]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000774:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000778:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000780:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800078e:	220c      	movs	r2, #12
 8000790:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000792:	4b08      	ldr	r3, [pc, #32]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000798:	4b06      	ldr	r3, [pc, #24]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	@ (80007b4 <MX_USART2_UART_Init+0x4c>)
 80007a0:	f001 febc 	bl	800251c <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007aa:	f000 f875 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000cc 	.word	0x200000cc
 80007b8:	40004400 	.word	0x40004400

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08a      	sub	sp, #40	@ 0x28
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
 80007d6:	4b2d      	ldr	r3, [pc, #180]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a2c      	ldr	r2, [pc, #176]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b2a      	ldr	r3, [pc, #168]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	60fb      	str	r3, [r7, #12]
 80007f2:	4b26      	ldr	r3, [pc, #152]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a25      	ldr	r2, [pc, #148]	@ (800088c <MX_GPIO_Init+0xd0>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b23      	ldr	r3, [pc, #140]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a1e      	ldr	r2, [pc, #120]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b18      	ldr	r3, [pc, #96]	@ (800088c <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b15      	ldr	r3, [pc, #84]	@ (800088c <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	2120      	movs	r1, #32
 8000846:	4812      	ldr	r0, [pc, #72]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000848:	f001 f866 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000852:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000856:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	4619      	mov	r1, r3
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_GPIO_Init+0xd8>)
 8000864:	f000 fec4 	bl	80015f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000868:	2320      	movs	r3, #32
 800086a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0314 	add.w	r3, r7, #20
 800087c:	4619      	mov	r1, r3
 800087e:	4804      	ldr	r0, [pc, #16]	@ (8000890 <MX_GPIO_Init+0xd4>)
 8000880:	f000 feb6 	bl	80015f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000884:	bf00      	nop
 8000886:	3728      	adds	r7, #40	@ 0x28
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40020000 	.word	0x40020000
 8000894:	40020800 	.word	0x40020800

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008e2:	2007      	movs	r0, #7
 80008e4:	f000 fe50 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40023800 	.word	0x40023800

080008f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b08a      	sub	sp, #40	@ 0x28
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
 8000904:	605a      	str	r2, [r3, #4]
 8000906:	609a      	str	r2, [r3, #8]
 8000908:	60da      	str	r2, [r3, #12]
 800090a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a17      	ldr	r2, [pc, #92]	@ (8000970 <HAL_ADC_MspInit+0x7c>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d127      	bne.n	8000966 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800091e:	4a15      	ldr	r2, [pc, #84]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000920:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000924:	6453      	str	r3, [r2, #68]	@ 0x44
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b0f      	ldr	r3, [pc, #60]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a0e      	ldr	r2, [pc, #56]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b0c      	ldr	r3, [pc, #48]	@ (8000974 <HAL_ADC_MspInit+0x80>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800094e:	2302      	movs	r3, #2
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000952:	2303      	movs	r3, #3
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	4619      	mov	r1, r3
 8000960:	4805      	ldr	r0, [pc, #20]	@ (8000978 <HAL_ADC_MspInit+0x84>)
 8000962:	f000 fe45 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000966:	bf00      	nop
 8000968:	3728      	adds	r7, #40	@ 0x28
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40012000 	.word	0x40012000
 8000974:	40023800 	.word	0x40023800
 8000978:	40020000 	.word	0x40020000

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	@ 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	@ (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12b      	bne.n	80009f6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80009d6:	230c      	movs	r3, #12
 80009d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009e6:	2307      	movs	r3, #7
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 0314 	add.w	r3, r7, #20
 80009ee:	4619      	mov	r1, r3
 80009f0:	4805      	ldr	r0, [pc, #20]	@ (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f2:	f000 fdfd 	bl	80015f0 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80009f6:	bf00      	nop
 80009f8:	3728      	adds	r7, #40	@ 0x28
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40004400 	.word	0x40004400
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a10:	bf00      	nop
 8000a12:	e7fd      	b.n	8000a10 <NMI_Handler+0x4>

08000a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a18:	bf00      	nop
 8000a1a:	e7fd      	b.n	8000a18 <HardFault_Handler+0x4>

08000a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <MemManage_Handler+0x4>

08000a24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <BusFault_Handler+0x4>

08000a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <UsageFault_Handler+0x4>

08000a34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a62:	f000 f917 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}

08000a6a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a6a:	b580      	push	{r7, lr}
 8000a6c:	b086      	sub	sp, #24
 8000a6e:	af00      	add	r7, sp, #0
 8000a70:	60f8      	str	r0, [r7, #12]
 8000a72:	60b9      	str	r1, [r7, #8]
 8000a74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
 8000a7a:	e00a      	b.n	8000a92 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a7c:	f3af 8000 	nop.w
 8000a80:	4601      	mov	r1, r0
 8000a82:	68bb      	ldr	r3, [r7, #8]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	60ba      	str	r2, [r7, #8]
 8000a88:	b2ca      	uxtb	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8c:	697b      	ldr	r3, [r7, #20]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	697a      	ldr	r2, [r7, #20]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dbf0      	blt.n	8000a7c <_read+0x12>
  }

  return len;
 8000a9a:	687b      	ldr	r3, [r7, #4]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000aac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000acc:	605a      	str	r2, [r3, #4]
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <_isatty>:

int _isatty(int file)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b085      	sub	sp, #20
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	60f8      	str	r0, [r7, #12]
 8000afa:	60b9      	str	r1, [r7, #8]
 8000afc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr

08000b0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b14:	4a14      	ldr	r2, [pc, #80]	@ (8000b68 <_sbrk+0x5c>)
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <_sbrk+0x60>)
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b20:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <_sbrk+0x64>)
 8000b2a:	4a12      	ldr	r2, [pc, #72]	@ (8000b74 <_sbrk+0x68>)
 8000b2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b2e:	4b10      	ldr	r3, [pc, #64]	@ (8000b70 <_sbrk+0x64>)
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4413      	add	r3, r2
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d207      	bcs.n	8000b4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b3c:	f002 f9f8 	bl	8002f30 <__errno>
 8000b40:	4603      	mov	r3, r0
 8000b42:	220c      	movs	r2, #12
 8000b44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b46:	f04f 33ff 	mov.w	r3, #4294967295
 8000b4a:	e009      	b.n	8000b60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <_sbrk+0x64>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b52:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <_sbrk+0x64>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4413      	add	r3, r2
 8000b5a:	4a05      	ldr	r2, [pc, #20]	@ (8000b70 <_sbrk+0x64>)
 8000b5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20020000 	.word	0x20020000
 8000b6c:	00000400 	.word	0x00000400
 8000b70:	20000118 	.word	0x20000118
 8000b74:	20000270 	.word	0x20000270

08000b78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <SystemInit+0x20>)
 8000b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b82:	4a05      	ldr	r2, [pc, #20]	@ (8000b98 <SystemInit+0x20>)
 8000b84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	e000ed00 	.word	0xe000ed00

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ba0:	f7ff ffea 	bl	8000b78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba4:	480c      	ldr	r0, [pc, #48]	@ (8000bd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ba6:	490d      	ldr	r1, [pc, #52]	@ (8000bdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8000be0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bac:	e002      	b.n	8000bb4 <LoopCopyDataInit>

08000bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb2:	3304      	adds	r3, #4

08000bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb8:	d3f9      	bcc.n	8000bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bba:	4a0a      	ldr	r2, [pc, #40]	@ (8000be4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bbc:	4c0a      	ldr	r4, [pc, #40]	@ (8000be8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc0:	e001      	b.n	8000bc6 <LoopFillZerobss>

08000bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc4:	3204      	adds	r2, #4

08000bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc8:	d3fb      	bcc.n	8000bc2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 f9b7 	bl	8002f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fcd5 	bl	800057c <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000be0:	0800345c 	.word	0x0800345c
  ldr r2, =_sbss
 8000be4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000be8:	2000026c 	.word	0x2000026c

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	@ (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	@ (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 fcb5 	bl	8001588 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe3e 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 fcbf 	bl	80015d6 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f000 fc95 	bl	800159e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	@ (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000000 	.word	0x20000000
 8000c8c:	20000008 	.word	0x20000008
 8000c90:	20000004 	.word	0x20000004

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	2000011c 	.word	0x2000011c

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	@ (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	2000011c 	.word	0x2000011c

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000008 	.word	0x20000008

08000d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e033      	b.n	8000d9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fdda 	bl	80008f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d118      	bne.n	8000d8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d62:	f023 0302 	bic.w	r3, r3, #2
 8000d66:	f043 0202 	orr.w	r2, r3, #2
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fa5c 	bl	800122c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d8a:	e001      	b.n	8000d90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d101      	bne.n	8000dbe <HAL_ADC_Start+0x1a>
 8000dba:	2302      	movs	r3, #2
 8000dbc:	e0b2      	b.n	8000f24 <HAL_ADC_Start+0x180>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	689b      	ldr	r3, [r3, #8]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d018      	beq.n	8000e06 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f042 0201 	orr.w	r2, r2, #1
 8000de2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000de4:	4b52      	ldr	r3, [pc, #328]	@ (8000f30 <HAL_ADC_Start+0x18c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a52      	ldr	r2, [pc, #328]	@ (8000f34 <HAL_ADC_Start+0x190>)
 8000dea:	fba2 2303 	umull	r2, r3, r2, r3
 8000dee:	0c9a      	lsrs	r2, r3, #18
 8000df0:	4613      	mov	r3, r2
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	4413      	add	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000df8:	e002      	b.n	8000e00 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	3b01      	subs	r3, #1
 8000dfe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d1f9      	bne.n	8000dfa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	f003 0301 	and.w	r3, r3, #1
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d17a      	bne.n	8000f0a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e18:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e1c:	f023 0301 	bic.w	r3, r3, #1
 8000e20:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d007      	beq.n	8000e46 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e3e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e52:	d106      	bne.n	8000e62 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e58:	f023 0206 	bic.w	r2, r3, #6
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e60:	e002      	b.n	8000e68 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e70:	4b31      	ldr	r3, [pc, #196]	@ (8000f38 <HAL_ADC_Start+0x194>)
 8000e72:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e7c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 031f 	and.w	r3, r3, #31
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d12a      	bne.n	8000ee0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a2b      	ldr	r2, [pc, #172]	@ (8000f3c <HAL_ADC_Start+0x198>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d015      	beq.n	8000ec0 <HAL_ADC_Start+0x11c>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a29      	ldr	r2, [pc, #164]	@ (8000f40 <HAL_ADC_Start+0x19c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d105      	bne.n	8000eaa <HAL_ADC_Start+0x106>
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <HAL_ADC_Start+0x194>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00a      	beq.n	8000ec0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4a25      	ldr	r2, [pc, #148]	@ (8000f44 <HAL_ADC_Start+0x1a0>)
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	d136      	bne.n	8000f22 <HAL_ADC_Start+0x17e>
 8000eb4:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_ADC_Start+0x194>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f003 0310 	and.w	r3, r3, #16
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d130      	bne.n	8000f22 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d129      	bne.n	8000f22 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000edc:	609a      	str	r2, [r3, #8]
 8000ede:	e020      	b.n	8000f22 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a15      	ldr	r2, [pc, #84]	@ (8000f3c <HAL_ADC_Start+0x198>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d11b      	bne.n	8000f22 <HAL_ADC_Start+0x17e>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d114      	bne.n	8000f22 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	e00b      	b.n	8000f22 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0e:	f043 0210 	orr.w	r2, r3, #16
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000000 	.word	0x20000000
 8000f34:	431bde83 	.word	0x431bde83
 8000f38:	40012300 	.word	0x40012300
 8000f3c:	40012000 	.word	0x40012000
 8000f40:	40012100 	.word	0x40012100
 8000f44:	40012200 	.word	0x40012200

08000f48 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d101      	bne.n	8000f5e <HAL_ADC_Stop+0x16>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e021      	b.n	8000fa2 <HAL_ADC_Stop+0x5a>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2201      	movs	r2, #1
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	689a      	ldr	r2, [r3, #8]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f022 0201 	bic.w	r2, r2, #1
 8000f74:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	f003 0301 	and.w	r3, r3, #1
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d109      	bne.n	8000f98 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f8c:	f023 0301 	bic.w	r3, r3, #1
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
 8000fd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x1c>
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	e113      	b.n	800120c <HAL_ADC_ConfigChannel+0x244>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b09      	cmp	r3, #9
 8000ff2:	d925      	bls.n	8001040 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68d9      	ldr	r1, [r3, #12]
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	b29b      	uxth	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	3b1e      	subs	r3, #30
 800100a:	2207      	movs	r2, #7
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	43da      	mvns	r2, r3
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	400a      	ands	r2, r1
 8001018:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	68d9      	ldr	r1, [r3, #12]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	b29b      	uxth	r3, r3
 800102a:	4618      	mov	r0, r3
 800102c:	4603      	mov	r3, r0
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4403      	add	r3, r0
 8001032:	3b1e      	subs	r3, #30
 8001034:	409a      	lsls	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	e022      	b.n	8001086 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6919      	ldr	r1, [r3, #16]
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	b29b      	uxth	r3, r3
 800104c:	461a      	mov	r2, r3
 800104e:	4613      	mov	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	2207      	movs	r2, #7
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	400a      	ands	r2, r1
 8001062:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6919      	ldr	r1, [r3, #16]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b29b      	uxth	r3, r3
 8001074:	4618      	mov	r0, r3
 8001076:	4603      	mov	r3, r0
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4403      	add	r3, r0
 800107c:	409a      	lsls	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	430a      	orrs	r2, r1
 8001084:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b06      	cmp	r3, #6
 800108c:	d824      	bhi.n	80010d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	3b05      	subs	r3, #5
 80010a0:	221f      	movs	r2, #31
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43da      	mvns	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	400a      	ands	r2, r1
 80010ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4618      	mov	r0, r3
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b05      	subs	r3, #5
 80010ca:	fa00 f203 	lsl.w	r2, r0, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	430a      	orrs	r2, r1
 80010d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010d6:	e04c      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b0c      	cmp	r3, #12
 80010de:	d824      	bhi.n	800112a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	4413      	add	r3, r2
 80010f0:	3b23      	subs	r3, #35	@ 0x23
 80010f2:	221f      	movs	r2, #31
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43da      	mvns	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	400a      	ands	r2, r1
 8001100:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b29b      	uxth	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	3b23      	subs	r3, #35	@ 0x23
 800111c:	fa00 f203 	lsl.w	r2, r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	430a      	orrs	r2, r1
 8001126:	631a      	str	r2, [r3, #48]	@ 0x30
 8001128:	e023      	b.n	8001172 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	3b41      	subs	r3, #65	@ 0x41
 800113c:	221f      	movs	r2, #31
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	400a      	ands	r2, r1
 800114a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	b29b      	uxth	r3, r3
 8001158:	4618      	mov	r0, r3
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	4613      	mov	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	3b41      	subs	r3, #65	@ 0x41
 8001166:	fa00 f203 	lsl.w	r2, r0, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <HAL_ADC_ConfigChannel+0x250>)
 8001174:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a28      	ldr	r2, [pc, #160]	@ (800121c <HAL_ADC_ConfigChannel+0x254>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d10f      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d8>
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b12      	cmp	r3, #18
 8001186:	d10b      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	@ (800121c <HAL_ADC_ConfigChannel+0x254>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12b      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x23a>
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <HAL_ADC_ConfigChannel+0x258>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d003      	beq.n	80011bc <HAL_ADC_ConfigChannel+0x1f4>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b11      	cmp	r3, #17
 80011ba:	d122      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a11      	ldr	r2, [pc, #68]	@ (8001220 <HAL_ADC_ConfigChannel+0x258>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d111      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_ADC_ConfigChannel+0x25c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a11      	ldr	r2, [pc, #68]	@ (8001228 <HAL_ADC_ConfigChannel+0x260>)
 80011e4:	fba2 2303 	umull	r2, r3, r2, r3
 80011e8:	0c9a      	lsrs	r2, r3, #18
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011f4:	e002      	b.n	80011fc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3b01      	subs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1f9      	bne.n	80011f6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40012300 	.word	0x40012300
 800121c:	40012000 	.word	0x40012000
 8001220:	10000012 	.word	0x10000012
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001234:	4b79      	ldr	r3, [pc, #484]	@ (800141c <ADC_Init+0x1f0>)
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	021a      	lsls	r2, r3, #8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012be:	4a58      	ldr	r2, [pc, #352]	@ (8001420 <ADC_Init+0x1f4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d022      	beq.n	800130a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e00f      	b.n	800132a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001328:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0202 	bic.w	r2, r2, #2
 8001338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001366:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	3b01      	subs	r3, #1
 8001384:	035a      	lsls	r2, r3, #13
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	e007      	b.n	80013a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800139e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	051a      	lsls	r2, r3, #20
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013e2:	025a      	lsls	r2, r3, #9
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6899      	ldr	r1, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	029a      	lsls	r2, r3, #10
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	609a      	str	r2, [r3, #8]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40012300 	.word	0x40012300
 8001420:	0f000001 	.word	0x0f000001

08001424 <__NVIC_SetPriorityGrouping>:
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_SetPriority>:
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	6039      	str	r1, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001498:	2b00      	cmp	r3, #0
 800149a:	db0a      	blt.n	80014b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	490c      	ldr	r1, [pc, #48]	@ (80014d4 <__NVIC_SetPriority+0x4c>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	0112      	lsls	r2, r2, #4
 80014a8:	b2d2      	uxtb	r2, r2
 80014aa:	440b      	add	r3, r1
 80014ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80014b0:	e00a      	b.n	80014c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4908      	ldr	r1, [pc, #32]	@ (80014d8 <__NVIC_SetPriority+0x50>)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f003 030f 	and.w	r3, r3, #15
 80014be:	3b04      	subs	r3, #4
 80014c0:	0112      	lsls	r2, r2, #4
 80014c2:	b2d2      	uxtb	r2, r2
 80014c4:	440b      	add	r3, r1
 80014c6:	761a      	strb	r2, [r3, #24]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000e100 	.word	0xe000e100
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <NVIC_EncodePriority>:
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	@ 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_EncodePriority+0x30>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_EncodePriority+0x32>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	69bb      	ldr	r3, [r7, #24]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43da      	mvns	r2, r3
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	401a      	ands	r2, r3
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001524:	f04f 31ff 	mov.w	r1, #4294967295
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	43d9      	mvns	r1, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	4313      	orrs	r3, r2
}
 8001536:	4618      	mov	r0, r3
 8001538:	3724      	adds	r7, #36	@ 0x24
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <SysTick_Config>:
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	3b01      	subs	r3, #1
 8001550:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001554:	d301      	bcc.n	800155a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001556:	2301      	movs	r3, #1
 8001558:	e00f      	b.n	800157a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800155a:	4a0a      	ldr	r2, [pc, #40]	@ (8001584 <SysTick_Config+0x40>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3b01      	subs	r3, #1
 8001560:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001562:	210f      	movs	r1, #15
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f7ff ff8e 	bl	8001488 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800156c:	4b05      	ldr	r3, [pc, #20]	@ (8001584 <SysTick_Config+0x40>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001572:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <SysTick_Config+0x40>)
 8001574:	2207      	movs	r2, #7
 8001576:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	e000e010 	.word	0xe000e010

08001588 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff47 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	4603      	mov	r3, r0
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
 80015aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015b0:	f7ff ff5c 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff ff8e 	bl	80014dc <NVIC_EncodePriority>
 80015c0:	4602      	mov	r2, r0
 80015c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c6:	4611      	mov	r1, r2
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff5d 	bl	8001488 <__NVIC_SetPriority>
}
 80015ce:	bf00      	nop
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffb0 	bl	8001544 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b089      	sub	sp, #36	@ 0x24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015fa:	2300      	movs	r3, #0
 80015fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
 800160a:	e165      	b.n	80018d8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800160c:	2201      	movs	r2, #1
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4013      	ands	r3, r2
 800161e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	429a      	cmp	r2, r3
 8001626:	f040 8154 	bne.w	80018d2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f003 0303 	and.w	r3, r3, #3
 8001632:	2b01      	cmp	r3, #1
 8001634:	d005      	beq.n	8001642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800163e:	2b02      	cmp	r3, #2
 8001640:	d130      	bne.n	80016a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	005b      	lsls	r3, r3, #1
 800164c:	2203      	movs	r2, #3
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	68da      	ldr	r2, [r3, #12]
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001678:	2201      	movs	r2, #1
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	091b      	lsrs	r3, r3, #4
 800168e:	f003 0201 	and.w	r2, r3, #1
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f003 0303 	and.w	r3, r3, #3
 80016ac:	2b03      	cmp	r3, #3
 80016ae:	d017      	beq.n	80016e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	2203      	movs	r2, #3
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d123      	bne.n	8001734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	08da      	lsrs	r2, r3, #3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3208      	adds	r2, #8
 80016f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	220f      	movs	r2, #15
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	691a      	ldr	r2, [r3, #16]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0307 	and.w	r3, r3, #7
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	69b9      	ldr	r1, [r7, #24]
 8001730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	2203      	movs	r2, #3
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0203 	and.w	r2, r3, #3
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001770:	2b00      	cmp	r3, #0
 8001772:	f000 80ae 	beq.w	80018d2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	4b5d      	ldr	r3, [pc, #372]	@ (80018f0 <HAL_GPIO_Init+0x300>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a5c      	ldr	r2, [pc, #368]	@ (80018f0 <HAL_GPIO_Init+0x300>)
 8001780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
 8001786:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <HAL_GPIO_Init+0x300>)
 8001788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800178e:	60fb      	str	r3, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001792:	4a58      	ldr	r2, [pc, #352]	@ (80018f4 <HAL_GPIO_Init+0x304>)
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	089b      	lsrs	r3, r3, #2
 8001798:	3302      	adds	r3, #2
 800179a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	220f      	movs	r2, #15
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4013      	ands	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a4f      	ldr	r2, [pc, #316]	@ (80018f8 <HAL_GPIO_Init+0x308>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d025      	beq.n	800180a <HAL_GPIO_Init+0x21a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a4e      	ldr	r2, [pc, #312]	@ (80018fc <HAL_GPIO_Init+0x30c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d01f      	beq.n	8001806 <HAL_GPIO_Init+0x216>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001900 <HAL_GPIO_Init+0x310>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d019      	beq.n	8001802 <HAL_GPIO_Init+0x212>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001904 <HAL_GPIO_Init+0x314>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d013      	beq.n	80017fe <HAL_GPIO_Init+0x20e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001908 <HAL_GPIO_Init+0x318>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d00d      	beq.n	80017fa <HAL_GPIO_Init+0x20a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a4a      	ldr	r2, [pc, #296]	@ (800190c <HAL_GPIO_Init+0x31c>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x206>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a49      	ldr	r2, [pc, #292]	@ (8001910 <HAL_GPIO_Init+0x320>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_GPIO_Init+0x202>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e00c      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017f2:	2307      	movs	r3, #7
 80017f4:	e00a      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017f6:	2305      	movs	r3, #5
 80017f8:	e008      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017fa:	2304      	movs	r3, #4
 80017fc:	e006      	b.n	800180c <HAL_GPIO_Init+0x21c>
 80017fe:	2303      	movs	r3, #3
 8001800:	e004      	b.n	800180c <HAL_GPIO_Init+0x21c>
 8001802:	2302      	movs	r3, #2
 8001804:	e002      	b.n	800180c <HAL_GPIO_Init+0x21c>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <HAL_GPIO_Init+0x21c>
 800180a:	2300      	movs	r3, #0
 800180c:	69fa      	ldr	r2, [r7, #28]
 800180e:	f002 0203 	and.w	r2, r2, #3
 8001812:	0092      	lsls	r2, r2, #2
 8001814:	4093      	lsls	r3, r2
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4313      	orrs	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	4935      	ldr	r1, [pc, #212]	@ (80018f4 <HAL_GPIO_Init+0x304>)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	3302      	adds	r3, #2
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800182a:	4b3a      	ldr	r3, [pc, #232]	@ (8001914 <HAL_GPIO_Init+0x324>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	43db      	mvns	r3, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4013      	ands	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d003      	beq.n	800184e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800184e:	4a31      	ldr	r2, [pc, #196]	@ (8001914 <HAL_GPIO_Init+0x324>)
 8001850:	69bb      	ldr	r3, [r7, #24]
 8001852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001854:	4b2f      	ldr	r3, [pc, #188]	@ (8001914 <HAL_GPIO_Init+0x324>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4313      	orrs	r3, r2
 8001876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001878:	4a26      	ldr	r2, [pc, #152]	@ (8001914 <HAL_GPIO_Init+0x324>)
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800187e:	4b25      	ldr	r3, [pc, #148]	@ (8001914 <HAL_GPIO_Init+0x324>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001914 <HAL_GPIO_Init+0x324>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001914 <HAL_GPIO_Init+0x324>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018cc:	4a11      	ldr	r2, [pc, #68]	@ (8001914 <HAL_GPIO_Init+0x324>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	3301      	adds	r3, #1
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	2b0f      	cmp	r3, #15
 80018dc:	f67f ae96 	bls.w	800160c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e0:	bf00      	nop
 80018e2:	bf00      	nop
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40013800 	.word	0x40013800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020400 	.word	0x40020400
 8001900:	40020800 	.word	0x40020800
 8001904:	40020c00 	.word	0x40020c00
 8001908:	40021000 	.word	0x40021000
 800190c:	40021400 	.word	0x40021400
 8001910:	40021800 	.word	0x40021800
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d101      	bne.n	8001960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0cc      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 030f 	and.w	r3, r3, #15
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	429a      	cmp	r2, r3
 800196c:	d90c      	bls.n	8001988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196e:	4b65      	ldr	r3, [pc, #404]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001976:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d001      	beq.n	8001988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0b8      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d020      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	d005      	beq.n	80019ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	4a58      	ldr	r2, [pc, #352]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80019aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0308 	and.w	r3, r3, #8
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d005      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4a52      	ldr	r2, [pc, #328]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80019c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	494d      	ldr	r1, [pc, #308]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d044      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d107      	bne.n	80019fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ea:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d119      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e07f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d003      	beq.n	8001a0a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d107      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a0a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d109      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e06f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e067      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a2a:	4b37      	ldr	r3, [pc, #220]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f023 0203 	bic.w	r2, r3, #3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	4934      	ldr	r1, [pc, #208]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7ff f93e 	bl	8000cbc <HAL_GetTick>
 8001a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a42:	e00a      	b.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a44:	f7ff f93a 	bl	8000cbc <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e04f      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f003 020c 	and.w	r2, r3, #12
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1eb      	bne.n	8001a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b25      	ldr	r3, [pc, #148]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 030f 	and.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d20c      	bcs.n	8001a94 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b20      	ldr	r3, [pc, #128]	@ (8001b04 <HAL_RCC_ClockConfig+0x1b8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e032      	b.n	8001afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d008      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aa0:	4b19      	ldr	r3, [pc, #100]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	4916      	ldr	r1, [pc, #88]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001abe:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	490e      	ldr	r1, [pc, #56]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ad2:	f000 f855 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1bc>)
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	490a      	ldr	r1, [pc, #40]	@ (8001b0c <HAL_RCC_ClockConfig+0x1c0>)
 8001ae4:	5ccb      	ldrb	r3, [r1, r3]
 8001ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aea:	4a09      	ldr	r2, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_ClockConfig+0x1c8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f89e 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	08003434 	.word	0x08003434
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000004 	.word	0x20000004

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	@ (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000000 	.word	0x20000000

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b34:	f7ff fff0 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b05      	ldr	r3, [pc, #20]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	0a9b      	lsrs	r3, r3, #10
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	4903      	ldr	r1, [pc, #12]	@ (8001b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b46:	5ccb      	ldrb	r3, [r1, r3]
 8001b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40023800 	.word	0x40023800
 8001b54:	08003444 	.word	0x08003444

08001b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b5c:	f7ff ffdc 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b60:	4602      	mov	r2, r0
 8001b62:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	0b5b      	lsrs	r3, r3, #13
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	4903      	ldr	r1, [pc, #12]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	08003444 	.word	0x08003444

08001b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b84:	b0ae      	sub	sp, #184	@ 0xb8
 8001b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba6:	4bcb      	ldr	r3, [pc, #812]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b0c      	cmp	r3, #12
 8001bb0:	f200 8206 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x440>
 8001bb4:	a201      	add	r2, pc, #4	@ (adr r2, 8001bbc <HAL_RCC_GetSysClockFreq+0x3c>)
 8001bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bba:	bf00      	nop
 8001bbc:	08001bf1 	.word	0x08001bf1
 8001bc0:	08001fc1 	.word	0x08001fc1
 8001bc4:	08001fc1 	.word	0x08001fc1
 8001bc8:	08001fc1 	.word	0x08001fc1
 8001bcc:	08001bf9 	.word	0x08001bf9
 8001bd0:	08001fc1 	.word	0x08001fc1
 8001bd4:	08001fc1 	.word	0x08001fc1
 8001bd8:	08001fc1 	.word	0x08001fc1
 8001bdc:	08001c01 	.word	0x08001c01
 8001be0:	08001fc1 	.word	0x08001fc1
 8001be4:	08001fc1 	.word	0x08001fc1
 8001be8:	08001fc1 	.word	0x08001fc1
 8001bec:	08001df1 	.word	0x08001df1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4bb9      	ldr	r3, [pc, #740]	@ (8001ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8001bf2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bf6:	e1e7      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf8:	4bb8      	ldr	r3, [pc, #736]	@ (8001edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8001bfa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001bfe:	e1e3      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c00:	4bb4      	ldr	r3, [pc, #720]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c0c:	4bb1      	ldr	r3, [pc, #708]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d071      	beq.n	8001cfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c18:	4bae      	ldr	r3, [pc, #696]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	099b      	lsrs	r3, r3, #6
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001c24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001c28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001c2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001c34:	2300      	movs	r3, #0
 8001c36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001c3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001c3e:	4622      	mov	r2, r4
 8001c40:	462b      	mov	r3, r5
 8001c42:	f04f 0000 	mov.w	r0, #0
 8001c46:	f04f 0100 	mov.w	r1, #0
 8001c4a:	0159      	lsls	r1, r3, #5
 8001c4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c50:	0150      	lsls	r0, r2, #5
 8001c52:	4602      	mov	r2, r0
 8001c54:	460b      	mov	r3, r1
 8001c56:	4621      	mov	r1, r4
 8001c58:	1a51      	subs	r1, r2, r1
 8001c5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8001c5c:	4629      	mov	r1, r5
 8001c5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001c70:	4649      	mov	r1, r9
 8001c72:	018b      	lsls	r3, r1, #6
 8001c74:	4641      	mov	r1, r8
 8001c76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c7a:	4641      	mov	r1, r8
 8001c7c:	018a      	lsls	r2, r1, #6
 8001c7e:	4641      	mov	r1, r8
 8001c80:	1a51      	subs	r1, r2, r1
 8001c82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001c84:	4649      	mov	r1, r9
 8001c86:	eb63 0301 	sbc.w	r3, r3, r1
 8001c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	f04f 0300 	mov.w	r3, #0
 8001c94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001c98:	4649      	mov	r1, r9
 8001c9a:	00cb      	lsls	r3, r1, #3
 8001c9c:	4641      	mov	r1, r8
 8001c9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001ca2:	4641      	mov	r1, r8
 8001ca4:	00ca      	lsls	r2, r1, #3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4603      	mov	r3, r0
 8001cac:	4622      	mov	r2, r4
 8001cae:	189b      	adds	r3, r3, r2
 8001cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001cb2:	462b      	mov	r3, r5
 8001cb4:	460a      	mov	r2, r1
 8001cb6:	eb42 0303 	adc.w	r3, r2, r3
 8001cba:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	f04f 0300 	mov.w	r3, #0
 8001cc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001cc8:	4629      	mov	r1, r5
 8001cca:	024b      	lsls	r3, r1, #9
 8001ccc:	4621      	mov	r1, r4
 8001cce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	024a      	lsls	r2, r1, #9
 8001cd6:	4610      	mov	r0, r2
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001ce4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ce8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001cec:	f7fe fa8a 	bl	8000204 <__aeabi_uldivmod>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cfa:	e067      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfc:	4b75      	ldr	r3, [pc, #468]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	099b      	lsrs	r3, r3, #6
 8001d02:	2200      	movs	r2, #0
 8001d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001d08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001d0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001d16:	2300      	movs	r3, #0
 8001d18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001d1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001d1e:	4622      	mov	r2, r4
 8001d20:	462b      	mov	r3, r5
 8001d22:	f04f 0000 	mov.w	r0, #0
 8001d26:	f04f 0100 	mov.w	r1, #0
 8001d2a:	0159      	lsls	r1, r3, #5
 8001d2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d30:	0150      	lsls	r0, r2, #5
 8001d32:	4602      	mov	r2, r0
 8001d34:	460b      	mov	r3, r1
 8001d36:	4621      	mov	r1, r4
 8001d38:	1a51      	subs	r1, r2, r1
 8001d3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001d3c:	4629      	mov	r1, r5
 8001d3e:	eb63 0301 	sbc.w	r3, r3, r1
 8001d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	f04f 0300 	mov.w	r3, #0
 8001d4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001d50:	4649      	mov	r1, r9
 8001d52:	018b      	lsls	r3, r1, #6
 8001d54:	4641      	mov	r1, r8
 8001d56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d5a:	4641      	mov	r1, r8
 8001d5c:	018a      	lsls	r2, r1, #6
 8001d5e:	4641      	mov	r1, r8
 8001d60:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d64:	4649      	mov	r1, r9
 8001d66:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	f04f 0300 	mov.w	r3, #0
 8001d72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001d76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	469b      	mov	fp, r3
 8001d82:	4623      	mov	r3, r4
 8001d84:	eb1a 0303 	adds.w	r3, sl, r3
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	462b      	mov	r3, r5
 8001d8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001d9e:	4629      	mov	r1, r5
 8001da0:	028b      	lsls	r3, r1, #10
 8001da2:	4621      	mov	r1, r4
 8001da4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001da8:	4621      	mov	r1, r4
 8001daa:	028a      	lsls	r2, r1, #10
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001db4:	2200      	movs	r2, #0
 8001db6:	673b      	str	r3, [r7, #112]	@ 0x70
 8001db8:	677a      	str	r2, [r7, #116]	@ 0x74
 8001dba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001dbe:	f7fe fa21 	bl	8000204 <__aeabi_uldivmod>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001dcc:	4b41      	ldr	r3, [pc, #260]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	0c1b      	lsrs	r3, r3, #16
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001dde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001de2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dee:	e0eb      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001df0:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dfc:	4b35      	ldr	r3, [pc, #212]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d06b      	beq.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e08:	4b32      	ldr	r3, [pc, #200]	@ (8001ed4 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	099b      	lsrs	r3, r3, #6
 8001e0e:	2200      	movs	r2, #0
 8001e10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001e12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001e14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001e1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001e24:	4622      	mov	r2, r4
 8001e26:	462b      	mov	r3, r5
 8001e28:	f04f 0000 	mov.w	r0, #0
 8001e2c:	f04f 0100 	mov.w	r1, #0
 8001e30:	0159      	lsls	r1, r3, #5
 8001e32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e36:	0150      	lsls	r0, r2, #5
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	1a51      	subs	r1, r2, r1
 8001e40:	61b9      	str	r1, [r7, #24]
 8001e42:	4629      	mov	r1, r5
 8001e44:	eb63 0301 	sbc.w	r3, r3, r1
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	f04f 0300 	mov.w	r3, #0
 8001e52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001e56:	4659      	mov	r1, fp
 8001e58:	018b      	lsls	r3, r1, #6
 8001e5a:	4651      	mov	r1, sl
 8001e5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e60:	4651      	mov	r1, sl
 8001e62:	018a      	lsls	r2, r1, #6
 8001e64:	4651      	mov	r1, sl
 8001e66:	ebb2 0801 	subs.w	r8, r2, r1
 8001e6a:	4659      	mov	r1, fp
 8001e6c:	eb63 0901 	sbc.w	r9, r3, r1
 8001e70:	f04f 0200 	mov.w	r2, #0
 8001e74:	f04f 0300 	mov.w	r3, #0
 8001e78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e84:	4690      	mov	r8, r2
 8001e86:	4699      	mov	r9, r3
 8001e88:	4623      	mov	r3, r4
 8001e8a:	eb18 0303 	adds.w	r3, r8, r3
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	462b      	mov	r3, r5
 8001e92:	eb49 0303 	adc.w	r3, r9, r3
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	024b      	lsls	r3, r1, #9
 8001ea8:	4621      	mov	r1, r4
 8001eaa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001eae:	4621      	mov	r1, r4
 8001eb0:	024a      	lsls	r2, r1, #9
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001eba:	2200      	movs	r2, #0
 8001ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001ebe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001ec0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001ec4:	f7fe f99e 	bl	8000204 <__aeabi_uldivmod>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	4613      	mov	r3, r2
 8001ece:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ed2:	e065      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x420>
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	099b      	lsrs	r3, r3, #6
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	4611      	mov	r1, r2
 8001eec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ef0:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ef6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001efa:	4642      	mov	r2, r8
 8001efc:	464b      	mov	r3, r9
 8001efe:	f04f 0000 	mov.w	r0, #0
 8001f02:	f04f 0100 	mov.w	r1, #0
 8001f06:	0159      	lsls	r1, r3, #5
 8001f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f0c:	0150      	lsls	r0, r2, #5
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4641      	mov	r1, r8
 8001f14:	1a51      	subs	r1, r2, r1
 8001f16:	60b9      	str	r1, [r7, #8]
 8001f18:	4649      	mov	r1, r9
 8001f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	f04f 0200 	mov.w	r2, #0
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001f2c:	4659      	mov	r1, fp
 8001f2e:	018b      	lsls	r3, r1, #6
 8001f30:	4651      	mov	r1, sl
 8001f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f36:	4651      	mov	r1, sl
 8001f38:	018a      	lsls	r2, r1, #6
 8001f3a:	4651      	mov	r1, sl
 8001f3c:	1a54      	subs	r4, r2, r1
 8001f3e:	4659      	mov	r1, fp
 8001f40:	eb63 0501 	sbc.w	r5, r3, r1
 8001f44:	f04f 0200 	mov.w	r2, #0
 8001f48:	f04f 0300 	mov.w	r3, #0
 8001f4c:	00eb      	lsls	r3, r5, #3
 8001f4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f52:	00e2      	lsls	r2, r4, #3
 8001f54:	4614      	mov	r4, r2
 8001f56:	461d      	mov	r5, r3
 8001f58:	4643      	mov	r3, r8
 8001f5a:	18e3      	adds	r3, r4, r3
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	464b      	mov	r3, r9
 8001f60:	eb45 0303 	adc.w	r3, r5, r3
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	f04f 0200 	mov.w	r2, #0
 8001f6a:	f04f 0300 	mov.w	r3, #0
 8001f6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f72:	4629      	mov	r1, r5
 8001f74:	028b      	lsls	r3, r1, #10
 8001f76:	4621      	mov	r1, r4
 8001f78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f7c:	4621      	mov	r1, r4
 8001f7e:	028a      	lsls	r2, r1, #10
 8001f80:	4610      	mov	r0, r2
 8001f82:	4619      	mov	r1, r3
 8001f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001f88:	2200      	movs	r2, #0
 8001f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001f8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f92:	f7fe f937 	bl	8000204 <__aeabi_uldivmod>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd8 <HAL_RCC_GetSysClockFreq+0x458>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	0f1b      	lsrs	r3, r3, #28
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001fae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001fb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fbe:	e003      	b.n	8001fc8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <HAL_RCC_GetSysClockFreq+0x45c>)
 8001fc2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	37b8      	adds	r7, #184	@ 0xb8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	00f42400 	.word	0x00f42400

08001fe0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e28d      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0301 	and.w	r3, r3, #1
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8083 	beq.w	8002106 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002000:	4b94      	ldr	r3, [pc, #592]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b04      	cmp	r3, #4
 800200a:	d019      	beq.n	8002040 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800200c:	4b91      	ldr	r3, [pc, #580]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 030c 	and.w	r3, r3, #12
        || \
 8002014:	2b08      	cmp	r3, #8
 8002016:	d106      	bne.n	8002026 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002018:	4b8e      	ldr	r3, [pc, #568]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002020:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002024:	d00c      	beq.n	8002040 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002026:	4b8b      	ldr	r3, [pc, #556]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800202e:	2b0c      	cmp	r3, #12
 8002030:	d112      	bne.n	8002058 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002032:	4b88      	ldr	r3, [pc, #544]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800203a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800203e:	d10b      	bne.n	8002058 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	4b84      	ldr	r3, [pc, #528]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d05b      	beq.n	8002104 <HAL_RCC_OscConfig+0x124>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d157      	bne.n	8002104 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e25a      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002060:	d106      	bne.n	8002070 <HAL_RCC_OscConfig+0x90>
 8002062:	4b7c      	ldr	r3, [pc, #496]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a7b      	ldr	r2, [pc, #492]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002068:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	e01d      	b.n	80020ac <HAL_RCC_OscConfig+0xcc>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0xb4>
 800207a:	4b76      	ldr	r3, [pc, #472]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a75      	ldr	r2, [pc, #468]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	4b73      	ldr	r3, [pc, #460]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a72      	ldr	r2, [pc, #456]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800208c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0xcc>
 8002094:	4b6f      	ldr	r3, [pc, #444]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a6e      	ldr	r2, [pc, #440]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800209a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	4b6c      	ldr	r3, [pc, #432]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a6b      	ldr	r2, [pc, #428]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b4:	f7fe fe02 	bl	8000cbc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020bc:	f7fe fdfe 	bl	8000cbc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b64      	cmp	r3, #100	@ 0x64
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e21f      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ce:	4b61      	ldr	r3, [pc, #388]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d0f0      	beq.n	80020bc <HAL_RCC_OscConfig+0xdc>
 80020da:	e014      	b.n	8002106 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020dc:	f7fe fdee 	bl	8000cbc <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020e4:	f7fe fdea 	bl	8000cbc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b64      	cmp	r3, #100	@ 0x64
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e20b      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020f6:	4b57      	ldr	r3, [pc, #348]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x104>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06f      	beq.n	80021f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002112:	4b50      	ldr	r3, [pc, #320]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b00      	cmp	r3, #0
 800211c:	d017      	beq.n	800214e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800211e:	4b4d      	ldr	r3, [pc, #308]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
        || \
 8002126:	2b08      	cmp	r3, #8
 8002128:	d105      	bne.n	8002136 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800212a:	4b4a      	ldr	r3, [pc, #296]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002136:	4b47      	ldr	r3, [pc, #284]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800213e:	2b0c      	cmp	r3, #12
 8002140:	d11c      	bne.n	800217c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002142:	4b44      	ldr	r3, [pc, #272]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800214a:	2b00      	cmp	r3, #0
 800214c:	d116      	bne.n	800217c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214e:	4b41      	ldr	r3, [pc, #260]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_RCC_OscConfig+0x186>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d001      	beq.n	8002166 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e1d3      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002166:	4b3b      	ldr	r3, [pc, #236]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4937      	ldr	r1, [pc, #220]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002176:	4313      	orrs	r3, r2
 8002178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	e03a      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002184:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x278>)
 8002186:	2201      	movs	r2, #1
 8002188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe fd97 	bl	8000cbc <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002192:	f7fe fd93 	bl	8000cbc <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e1b4      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b0:	4b28      	ldr	r3, [pc, #160]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4925      	ldr	r1, [pc, #148]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]
 80021c4:	e015      	b.n	80021f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_RCC_OscConfig+0x278>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fd76 	bl	8000cbc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d4:	f7fe fd72 	bl	8000cbc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e193      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d036      	beq.n	800226c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	@ (800225c <HAL_RCC_OscConfig+0x27c>)
 8002208:	2201      	movs	r2, #1
 800220a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800220c:	f7fe fd56 	bl	8000cbc <HAL_GetTick>
 8002210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002214:	f7fe fd52 	bl	8000cbc <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e173      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002226:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <HAL_RCC_OscConfig+0x274>)
 8002228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800222a:	f003 0302 	and.w	r3, r3, #2
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x234>
 8002232:	e01b      	b.n	800226c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002234:	4b09      	ldr	r3, [pc, #36]	@ (800225c <HAL_RCC_OscConfig+0x27c>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223a:	f7fe fd3f 	bl	8000cbc <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	e00e      	b.n	8002260 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002242:	f7fe fd3b 	bl	8000cbc <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d907      	bls.n	8002260 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e15c      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
 8002254:	40023800 	.word	0x40023800
 8002258:	42470000 	.word	0x42470000
 800225c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002260:	4b8a      	ldr	r3, [pc, #552]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002262:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1ea      	bne.n	8002242 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8097 	beq.w	80023a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227a:	2300      	movs	r3, #0
 800227c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800227e:	4b83      	ldr	r3, [pc, #524]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10f      	bne.n	80022aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	4b7f      	ldr	r3, [pc, #508]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	4a7e      	ldr	r2, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	6413      	str	r3, [r2, #64]	@ 0x40
 800229a:	4b7c      	ldr	r3, [pc, #496]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	60bb      	str	r3, [r7, #8]
 80022a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022a6:	2301      	movs	r3, #1
 80022a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022aa:	4b79      	ldr	r3, [pc, #484]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d118      	bne.n	80022e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022b6:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a75      	ldr	r2, [pc, #468]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022c2:	f7fe fcfb 	bl	8000cbc <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ca:	f7fe fcf7 	bl	8000cbc <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e118      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002490 <HAL_RCC_OscConfig+0x4b0>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d0f0      	beq.n	80022ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d106      	bne.n	80022fe <HAL_RCC_OscConfig+0x31e>
 80022f0:	4b66      	ldr	r3, [pc, #408]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80022f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f4:	4a65      	ldr	r2, [pc, #404]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80022fc:	e01c      	b.n	8002338 <HAL_RCC_OscConfig+0x358>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b05      	cmp	r3, #5
 8002304:	d10c      	bne.n	8002320 <HAL_RCC_OscConfig+0x340>
 8002306:	4b61      	ldr	r3, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230a:	4a60      	ldr	r2, [pc, #384]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800230c:	f043 0304 	orr.w	r3, r3, #4
 8002310:	6713      	str	r3, [r2, #112]	@ 0x70
 8002312:	4b5e      	ldr	r3, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002314:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002316:	4a5d      	ldr	r2, [pc, #372]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6713      	str	r3, [r2, #112]	@ 0x70
 800231e:	e00b      	b.n	8002338 <HAL_RCC_OscConfig+0x358>
 8002320:	4b5a      	ldr	r3, [pc, #360]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002322:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002324:	4a59      	ldr	r2, [pc, #356]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002326:	f023 0301 	bic.w	r3, r3, #1
 800232a:	6713      	str	r3, [r2, #112]	@ 0x70
 800232c:	4b57      	ldr	r3, [pc, #348]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002330:	4a56      	ldr	r2, [pc, #344]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002332:	f023 0304 	bic.w	r3, r3, #4
 8002336:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d015      	beq.n	800236c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002340:	f7fe fcbc 	bl	8000cbc <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002346:	e00a      	b.n	800235e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002348:	f7fe fcb8 	bl	8000cbc <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e0d7      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	4b4b      	ldr	r3, [pc, #300]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0ee      	beq.n	8002348 <HAL_RCC_OscConfig+0x368>
 800236a:	e014      	b.n	8002396 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800236c:	f7fe fca6 	bl	8000cbc <HAL_GetTick>
 8002370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002372:	e00a      	b.n	800238a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002374:	f7fe fca2 	bl	8000cbc <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e0c1      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	4b40      	ldr	r3, [pc, #256]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800238c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1ee      	bne.n	8002374 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d105      	bne.n	80023a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239c:	4b3b      	ldr	r3, [pc, #236]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	4a3a      	ldr	r2, [pc, #232]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 80ad 	beq.w	800250c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023b2:	4b36      	ldr	r3, [pc, #216]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b08      	cmp	r3, #8
 80023bc:	d060      	beq.n	8002480 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d145      	bne.n	8002452 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c6:	4b33      	ldr	r3, [pc, #204]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fc76 	bl	8000cbc <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fc72 	bl	8000cbc <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e093      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fc47 	bl	8000cbc <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7fe fc43 	bl	8000cbc <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e064      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x452>
 8002450:	e05c      	b.n	800250c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	@ (8002494 <HAL_RCC_OscConfig+0x4b4>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002458:	f7fe fc30 	bl	8000cbc <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fc2c 	bl	8000cbc <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e04d      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_RCC_OscConfig+0x4ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x480>
 800247e:	e045      	b.n	800250c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e040      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
 8002494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002498:	4b1f      	ldr	r3, [pc, #124]	@ (8002518 <HAL_RCC_OscConfig+0x538>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d030      	beq.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d129      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d122      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024c2:	68fa      	ldr	r2, [r7, #12]
 80024c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c8:	4013      	ands	r3, r2
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d119      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024de:	085b      	lsrs	r3, r3, #1
 80024e0:	3b01      	subs	r3, #1
 80024e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d10f      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e042      	b.n	80025b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d106      	bne.n	8002548 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f7fe fa1a 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2224      	movs	r2, #36	@ 0x24
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800255e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f82b 	bl	80025bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002574:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	695a      	ldr	r2, [r3, #20]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002584:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002594:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2220      	movs	r2, #32
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025c0:	b0c0      	sub	sp, #256	@ 0x100
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80025d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025d8:	68d9      	ldr	r1, [r3, #12]
 80025da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	ea40 0301 	orr.w	r3, r0, r1
 80025e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80025e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	431a      	orrs	r2, r3
 80025f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4313      	orrs	r3, r2
 8002604:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002614:	f021 010c 	bic.w	r1, r1, #12
 8002618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002622:	430b      	orrs	r3, r1
 8002624:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002636:	6999      	ldr	r1, [r3, #24]
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	ea40 0301 	orr.w	r3, r0, r1
 8002642:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b8f      	ldr	r3, [pc, #572]	@ (8002888 <UART_SetConfig+0x2cc>)
 800264c:	429a      	cmp	r2, r3
 800264e:	d005      	beq.n	800265c <UART_SetConfig+0xa0>
 8002650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	4b8d      	ldr	r3, [pc, #564]	@ (800288c <UART_SetConfig+0x2d0>)
 8002658:	429a      	cmp	r2, r3
 800265a:	d104      	bne.n	8002666 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800265c:	f7ff fa7c 	bl	8001b58 <HAL_RCC_GetPCLK2Freq>
 8002660:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002664:	e003      	b.n	800266e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002666:	f7ff fa63 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 800266a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800266e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002672:	69db      	ldr	r3, [r3, #28]
 8002674:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002678:	f040 810c 	bne.w	8002894 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800267c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002680:	2200      	movs	r2, #0
 8002682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002686:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800268a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800268e:	4622      	mov	r2, r4
 8002690:	462b      	mov	r3, r5
 8002692:	1891      	adds	r1, r2, r2
 8002694:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002696:	415b      	adcs	r3, r3
 8002698:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800269a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800269e:	4621      	mov	r1, r4
 80026a0:	eb12 0801 	adds.w	r8, r2, r1
 80026a4:	4629      	mov	r1, r5
 80026a6:	eb43 0901 	adc.w	r9, r3, r1
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	f04f 0300 	mov.w	r3, #0
 80026b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026be:	4690      	mov	r8, r2
 80026c0:	4699      	mov	r9, r3
 80026c2:	4623      	mov	r3, r4
 80026c4:	eb18 0303 	adds.w	r3, r8, r3
 80026c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80026cc:	462b      	mov	r3, r5
 80026ce:	eb49 0303 	adc.w	r3, r9, r3
 80026d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80026d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80026e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80026e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80026ea:	460b      	mov	r3, r1
 80026ec:	18db      	adds	r3, r3, r3
 80026ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80026f0:	4613      	mov	r3, r2
 80026f2:	eb42 0303 	adc.w	r3, r2, r3
 80026f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80026f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80026fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002700:	f7fd fd80 	bl	8000204 <__aeabi_uldivmod>
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <UART_SetConfig+0x2d4>)
 800270a:	fba3 2302 	umull	r2, r3, r3, r2
 800270e:	095b      	lsrs	r3, r3, #5
 8002710:	011c      	lsls	r4, r3, #4
 8002712:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002716:	2200      	movs	r2, #0
 8002718:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800271c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002720:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002724:	4642      	mov	r2, r8
 8002726:	464b      	mov	r3, r9
 8002728:	1891      	adds	r1, r2, r2
 800272a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800272c:	415b      	adcs	r3, r3
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002730:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002734:	4641      	mov	r1, r8
 8002736:	eb12 0a01 	adds.w	sl, r2, r1
 800273a:	4649      	mov	r1, r9
 800273c:	eb43 0b01 	adc.w	fp, r3, r1
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800274c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002754:	4692      	mov	sl, r2
 8002756:	469b      	mov	fp, r3
 8002758:	4643      	mov	r3, r8
 800275a:	eb1a 0303 	adds.w	r3, sl, r3
 800275e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002762:	464b      	mov	r3, r9
 8002764:	eb4b 0303 	adc.w	r3, fp, r3
 8002768:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800276c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002778:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800277c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002780:	460b      	mov	r3, r1
 8002782:	18db      	adds	r3, r3, r3
 8002784:	643b      	str	r3, [r7, #64]	@ 0x40
 8002786:	4613      	mov	r3, r2
 8002788:	eb42 0303 	adc.w	r3, r2, r3
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
 800278e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002792:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002796:	f7fd fd35 	bl	8000204 <__aeabi_uldivmod>
 800279a:	4602      	mov	r2, r0
 800279c:	460b      	mov	r3, r1
 800279e:	4611      	mov	r1, r2
 80027a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002890 <UART_SetConfig+0x2d4>)
 80027a2:	fba3 2301 	umull	r2, r3, r3, r1
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	2264      	movs	r2, #100	@ 0x64
 80027aa:	fb02 f303 	mul.w	r3, r2, r3
 80027ae:	1acb      	subs	r3, r1, r3
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80027b6:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <UART_SetConfig+0x2d4>)
 80027b8:	fba3 2302 	umull	r2, r3, r3, r2
 80027bc:	095b      	lsrs	r3, r3, #5
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80027c4:	441c      	add	r4, r3
 80027c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027ca:	2200      	movs	r2, #0
 80027cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80027d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80027d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80027d8:	4642      	mov	r2, r8
 80027da:	464b      	mov	r3, r9
 80027dc:	1891      	adds	r1, r2, r2
 80027de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80027e0:	415b      	adcs	r3, r3
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80027e8:	4641      	mov	r1, r8
 80027ea:	1851      	adds	r1, r2, r1
 80027ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80027ee:	4649      	mov	r1, r9
 80027f0:	414b      	adcs	r3, r1
 80027f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	f04f 0300 	mov.w	r3, #0
 80027fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002800:	4659      	mov	r1, fp
 8002802:	00cb      	lsls	r3, r1, #3
 8002804:	4651      	mov	r1, sl
 8002806:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800280a:	4651      	mov	r1, sl
 800280c:	00ca      	lsls	r2, r1, #3
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	4603      	mov	r3, r0
 8002814:	4642      	mov	r2, r8
 8002816:	189b      	adds	r3, r3, r2
 8002818:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800281c:	464b      	mov	r3, r9
 800281e:	460a      	mov	r2, r1
 8002820:	eb42 0303 	adc.w	r3, r2, r3
 8002824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002834:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002838:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800283c:	460b      	mov	r3, r1
 800283e:	18db      	adds	r3, r3, r3
 8002840:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002842:	4613      	mov	r3, r2
 8002844:	eb42 0303 	adc.w	r3, r2, r3
 8002848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800284a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800284e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002852:	f7fd fcd7 	bl	8000204 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <UART_SetConfig+0x2d4>)
 800285c:	fba3 1302 	umull	r1, r3, r3, r2
 8002860:	095b      	lsrs	r3, r3, #5
 8002862:	2164      	movs	r1, #100	@ 0x64
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	00db      	lsls	r3, r3, #3
 800286c:	3332      	adds	r3, #50	@ 0x32
 800286e:	4a08      	ldr	r2, [pc, #32]	@ (8002890 <UART_SetConfig+0x2d4>)
 8002870:	fba2 2303 	umull	r2, r3, r2, r3
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	f003 0207 	and.w	r2, r3, #7
 800287a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4422      	add	r2, r4
 8002882:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002884:	e106      	b.n	8002a94 <UART_SetConfig+0x4d8>
 8002886:	bf00      	nop
 8002888:	40011000 	.word	0x40011000
 800288c:	40011400 	.word	0x40011400
 8002890:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002898:	2200      	movs	r2, #0
 800289a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800289e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80028a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80028a6:	4642      	mov	r2, r8
 80028a8:	464b      	mov	r3, r9
 80028aa:	1891      	adds	r1, r2, r2
 80028ac:	6239      	str	r1, [r7, #32]
 80028ae:	415b      	adcs	r3, r3
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80028b6:	4641      	mov	r1, r8
 80028b8:	1854      	adds	r4, r2, r1
 80028ba:	4649      	mov	r1, r9
 80028bc:	eb43 0501 	adc.w	r5, r3, r1
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	00eb      	lsls	r3, r5, #3
 80028ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028ce:	00e2      	lsls	r2, r4, #3
 80028d0:	4614      	mov	r4, r2
 80028d2:	461d      	mov	r5, r3
 80028d4:	4643      	mov	r3, r8
 80028d6:	18e3      	adds	r3, r4, r3
 80028d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028dc:	464b      	mov	r3, r9
 80028de:	eb45 0303 	adc.w	r3, r5, r3
 80028e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80028e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80028f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80028f6:	f04f 0200 	mov.w	r2, #0
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002902:	4629      	mov	r1, r5
 8002904:	008b      	lsls	r3, r1, #2
 8002906:	4621      	mov	r1, r4
 8002908:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800290c:	4621      	mov	r1, r4
 800290e:	008a      	lsls	r2, r1, #2
 8002910:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002914:	f7fd fc76 	bl	8000204 <__aeabi_uldivmod>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4b60      	ldr	r3, [pc, #384]	@ (8002aa0 <UART_SetConfig+0x4e4>)
 800291e:	fba3 2302 	umull	r2, r3, r3, r2
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	011c      	lsls	r4, r3, #4
 8002926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800292a:	2200      	movs	r2, #0
 800292c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002930:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002934:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002938:	4642      	mov	r2, r8
 800293a:	464b      	mov	r3, r9
 800293c:	1891      	adds	r1, r2, r2
 800293e:	61b9      	str	r1, [r7, #24]
 8002940:	415b      	adcs	r3, r3
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002948:	4641      	mov	r1, r8
 800294a:	1851      	adds	r1, r2, r1
 800294c:	6139      	str	r1, [r7, #16]
 800294e:	4649      	mov	r1, r9
 8002950:	414b      	adcs	r3, r1
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f04f 0200 	mov.w	r2, #0
 8002958:	f04f 0300 	mov.w	r3, #0
 800295c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002960:	4659      	mov	r1, fp
 8002962:	00cb      	lsls	r3, r1, #3
 8002964:	4651      	mov	r1, sl
 8002966:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800296a:	4651      	mov	r1, sl
 800296c:	00ca      	lsls	r2, r1, #3
 800296e:	4610      	mov	r0, r2
 8002970:	4619      	mov	r1, r3
 8002972:	4603      	mov	r3, r0
 8002974:	4642      	mov	r2, r8
 8002976:	189b      	adds	r3, r3, r2
 8002978:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800297c:	464b      	mov	r3, r9
 800297e:	460a      	mov	r2, r1
 8002980:	eb42 0303 	adc.w	r3, r2, r3
 8002984:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2200      	movs	r2, #0
 8002990:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002992:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002994:	f04f 0200 	mov.w	r2, #0
 8002998:	f04f 0300 	mov.w	r3, #0
 800299c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80029a0:	4649      	mov	r1, r9
 80029a2:	008b      	lsls	r3, r1, #2
 80029a4:	4641      	mov	r1, r8
 80029a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029aa:	4641      	mov	r1, r8
 80029ac:	008a      	lsls	r2, r1, #2
 80029ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80029b2:	f7fd fc27 	bl	8000204 <__aeabi_uldivmod>
 80029b6:	4602      	mov	r2, r0
 80029b8:	460b      	mov	r3, r1
 80029ba:	4611      	mov	r1, r2
 80029bc:	4b38      	ldr	r3, [pc, #224]	@ (8002aa0 <UART_SetConfig+0x4e4>)
 80029be:	fba3 2301 	umull	r2, r3, r3, r1
 80029c2:	095b      	lsrs	r3, r3, #5
 80029c4:	2264      	movs	r2, #100	@ 0x64
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	1acb      	subs	r3, r1, r3
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	3332      	adds	r3, #50	@ 0x32
 80029d0:	4a33      	ldr	r2, [pc, #204]	@ (8002aa0 <UART_SetConfig+0x4e4>)
 80029d2:	fba2 2303 	umull	r2, r3, r2, r3
 80029d6:	095b      	lsrs	r3, r3, #5
 80029d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029dc:	441c      	add	r4, r3
 80029de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e2:	2200      	movs	r2, #0
 80029e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80029e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80029e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80029ec:	4642      	mov	r2, r8
 80029ee:	464b      	mov	r3, r9
 80029f0:	1891      	adds	r1, r2, r2
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	415b      	adcs	r3, r3
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029fc:	4641      	mov	r1, r8
 80029fe:	1851      	adds	r1, r2, r1
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	4649      	mov	r1, r9
 8002a04:	414b      	adcs	r3, r1
 8002a06:	607b      	str	r3, [r7, #4]
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002a14:	4659      	mov	r1, fp
 8002a16:	00cb      	lsls	r3, r1, #3
 8002a18:	4651      	mov	r1, sl
 8002a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a1e:	4651      	mov	r1, sl
 8002a20:	00ca      	lsls	r2, r1, #3
 8002a22:	4610      	mov	r0, r2
 8002a24:	4619      	mov	r1, r3
 8002a26:	4603      	mov	r3, r0
 8002a28:	4642      	mov	r2, r8
 8002a2a:	189b      	adds	r3, r3, r2
 8002a2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a2e:	464b      	mov	r3, r9
 8002a30:	460a      	mov	r2, r1
 8002a32:	eb42 0303 	adc.w	r3, r2, r3
 8002a36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a42:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a44:	f04f 0200 	mov.w	r2, #0
 8002a48:	f04f 0300 	mov.w	r3, #0
 8002a4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002a50:	4649      	mov	r1, r9
 8002a52:	008b      	lsls	r3, r1, #2
 8002a54:	4641      	mov	r1, r8
 8002a56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a5a:	4641      	mov	r1, r8
 8002a5c:	008a      	lsls	r2, r1, #2
 8002a5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002a62:	f7fd fbcf 	bl	8000204 <__aeabi_uldivmod>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <UART_SetConfig+0x4e4>)
 8002a6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	2164      	movs	r1, #100	@ 0x64
 8002a74:	fb01 f303 	mul.w	r3, r1, r3
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	3332      	adds	r3, #50	@ 0x32
 8002a7e:	4a08      	ldr	r2, [pc, #32]	@ (8002aa0 <UART_SetConfig+0x4e4>)
 8002a80:	fba2 2303 	umull	r2, r3, r2, r3
 8002a84:	095b      	lsrs	r3, r3, #5
 8002a86:	f003 020f 	and.w	r2, r3, #15
 8002a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4422      	add	r2, r4
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aa0:	51eb851f 	.word	0x51eb851f

08002aa4 <std>:
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	b510      	push	{r4, lr}
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8002aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002ab2:	6083      	str	r3, [r0, #8]
 8002ab4:	8181      	strh	r1, [r0, #12]
 8002ab6:	6643      	str	r3, [r0, #100]	@ 0x64
 8002ab8:	81c2      	strh	r2, [r0, #14]
 8002aba:	6183      	str	r3, [r0, #24]
 8002abc:	4619      	mov	r1, r3
 8002abe:	2208      	movs	r2, #8
 8002ac0:	305c      	adds	r0, #92	@ 0x5c
 8002ac2:	f000 f9e7 	bl	8002e94 <memset>
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <std+0x58>)
 8002ac8:	6263      	str	r3, [r4, #36]	@ 0x24
 8002aca:	4b0d      	ldr	r3, [pc, #52]	@ (8002b00 <std+0x5c>)
 8002acc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <std+0x60>)
 8002ad0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8002b08 <std+0x64>)
 8002ad4:	6323      	str	r3, [r4, #48]	@ 0x30
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b0c <std+0x68>)
 8002ad8:	6224      	str	r4, [r4, #32]
 8002ada:	429c      	cmp	r4, r3
 8002adc:	d006      	beq.n	8002aec <std+0x48>
 8002ade:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002ae2:	4294      	cmp	r4, r2
 8002ae4:	d002      	beq.n	8002aec <std+0x48>
 8002ae6:	33d0      	adds	r3, #208	@ 0xd0
 8002ae8:	429c      	cmp	r4, r3
 8002aea:	d105      	bne.n	8002af8 <std+0x54>
 8002aec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af4:	f000 ba46 	b.w	8002f84 <__retarget_lock_init_recursive>
 8002af8:	bd10      	pop	{r4, pc}
 8002afa:	bf00      	nop
 8002afc:	08002ce5 	.word	0x08002ce5
 8002b00:	08002d07 	.word	0x08002d07
 8002b04:	08002d3f 	.word	0x08002d3f
 8002b08:	08002d63 	.word	0x08002d63
 8002b0c:	20000120 	.word	0x20000120

08002b10 <stdio_exit_handler>:
 8002b10:	4a02      	ldr	r2, [pc, #8]	@ (8002b1c <stdio_exit_handler+0xc>)
 8002b12:	4903      	ldr	r1, [pc, #12]	@ (8002b20 <stdio_exit_handler+0x10>)
 8002b14:	4803      	ldr	r0, [pc, #12]	@ (8002b24 <stdio_exit_handler+0x14>)
 8002b16:	f000 b869 	b.w	8002bec <_fwalk_sglue>
 8002b1a:	bf00      	nop
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	08003285 	.word	0x08003285
 8002b24:	2000001c 	.word	0x2000001c

08002b28 <cleanup_stdio>:
 8002b28:	6841      	ldr	r1, [r0, #4]
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <cleanup_stdio+0x34>)
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	4604      	mov	r4, r0
 8002b32:	d001      	beq.n	8002b38 <cleanup_stdio+0x10>
 8002b34:	f000 fba6 	bl	8003284 <_fflush_r>
 8002b38:	68a1      	ldr	r1, [r4, #8]
 8002b3a:	4b09      	ldr	r3, [pc, #36]	@ (8002b60 <cleanup_stdio+0x38>)
 8002b3c:	4299      	cmp	r1, r3
 8002b3e:	d002      	beq.n	8002b46 <cleanup_stdio+0x1e>
 8002b40:	4620      	mov	r0, r4
 8002b42:	f000 fb9f 	bl	8003284 <_fflush_r>
 8002b46:	68e1      	ldr	r1, [r4, #12]
 8002b48:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <cleanup_stdio+0x3c>)
 8002b4a:	4299      	cmp	r1, r3
 8002b4c:	d004      	beq.n	8002b58 <cleanup_stdio+0x30>
 8002b4e:	4620      	mov	r0, r4
 8002b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b54:	f000 bb96 	b.w	8003284 <_fflush_r>
 8002b58:	bd10      	pop	{r4, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000120 	.word	0x20000120
 8002b60:	20000188 	.word	0x20000188
 8002b64:	200001f0 	.word	0x200001f0

08002b68 <global_stdio_init.part.0>:
 8002b68:	b510      	push	{r4, lr}
 8002b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <global_stdio_init.part.0+0x30>)
 8002b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8002b9c <global_stdio_init.part.0+0x34>)
 8002b6e:	4a0c      	ldr	r2, [pc, #48]	@ (8002ba0 <global_stdio_init.part.0+0x38>)
 8002b70:	601a      	str	r2, [r3, #0]
 8002b72:	4620      	mov	r0, r4
 8002b74:	2200      	movs	r2, #0
 8002b76:	2104      	movs	r1, #4
 8002b78:	f7ff ff94 	bl	8002aa4 <std>
 8002b7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002b80:	2201      	movs	r2, #1
 8002b82:	2109      	movs	r1, #9
 8002b84:	f7ff ff8e 	bl	8002aa4 <std>
 8002b88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002b92:	2112      	movs	r1, #18
 8002b94:	f7ff bf86 	b.w	8002aa4 <std>
 8002b98:	20000258 	.word	0x20000258
 8002b9c:	20000120 	.word	0x20000120
 8002ba0:	08002b11 	.word	0x08002b11

08002ba4 <__sfp_lock_acquire>:
 8002ba4:	4801      	ldr	r0, [pc, #4]	@ (8002bac <__sfp_lock_acquire+0x8>)
 8002ba6:	f000 b9ee 	b.w	8002f86 <__retarget_lock_acquire_recursive>
 8002baa:	bf00      	nop
 8002bac:	20000261 	.word	0x20000261

08002bb0 <__sfp_lock_release>:
 8002bb0:	4801      	ldr	r0, [pc, #4]	@ (8002bb8 <__sfp_lock_release+0x8>)
 8002bb2:	f000 b9e9 	b.w	8002f88 <__retarget_lock_release_recursive>
 8002bb6:	bf00      	nop
 8002bb8:	20000261 	.word	0x20000261

08002bbc <__sinit>:
 8002bbc:	b510      	push	{r4, lr}
 8002bbe:	4604      	mov	r4, r0
 8002bc0:	f7ff fff0 	bl	8002ba4 <__sfp_lock_acquire>
 8002bc4:	6a23      	ldr	r3, [r4, #32]
 8002bc6:	b11b      	cbz	r3, 8002bd0 <__sinit+0x14>
 8002bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bcc:	f7ff bff0 	b.w	8002bb0 <__sfp_lock_release>
 8002bd0:	4b04      	ldr	r3, [pc, #16]	@ (8002be4 <__sinit+0x28>)
 8002bd2:	6223      	str	r3, [r4, #32]
 8002bd4:	4b04      	ldr	r3, [pc, #16]	@ (8002be8 <__sinit+0x2c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f5      	bne.n	8002bc8 <__sinit+0xc>
 8002bdc:	f7ff ffc4 	bl	8002b68 <global_stdio_init.part.0>
 8002be0:	e7f2      	b.n	8002bc8 <__sinit+0xc>
 8002be2:	bf00      	nop
 8002be4:	08002b29 	.word	0x08002b29
 8002be8:	20000258 	.word	0x20000258

08002bec <_fwalk_sglue>:
 8002bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bf0:	4607      	mov	r7, r0
 8002bf2:	4688      	mov	r8, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	2600      	movs	r6, #0
 8002bf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002bfc:	f1b9 0901 	subs.w	r9, r9, #1
 8002c00:	d505      	bpl.n	8002c0e <_fwalk_sglue+0x22>
 8002c02:	6824      	ldr	r4, [r4, #0]
 8002c04:	2c00      	cmp	r4, #0
 8002c06:	d1f7      	bne.n	8002bf8 <_fwalk_sglue+0xc>
 8002c08:	4630      	mov	r0, r6
 8002c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002c0e:	89ab      	ldrh	r3, [r5, #12]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d907      	bls.n	8002c24 <_fwalk_sglue+0x38>
 8002c14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	d003      	beq.n	8002c24 <_fwalk_sglue+0x38>
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	4638      	mov	r0, r7
 8002c20:	47c0      	blx	r8
 8002c22:	4306      	orrs	r6, r0
 8002c24:	3568      	adds	r5, #104	@ 0x68
 8002c26:	e7e9      	b.n	8002bfc <_fwalk_sglue+0x10>

08002c28 <_puts_r>:
 8002c28:	6a03      	ldr	r3, [r0, #32]
 8002c2a:	b570      	push	{r4, r5, r6, lr}
 8002c2c:	6884      	ldr	r4, [r0, #8]
 8002c2e:	4605      	mov	r5, r0
 8002c30:	460e      	mov	r6, r1
 8002c32:	b90b      	cbnz	r3, 8002c38 <_puts_r+0x10>
 8002c34:	f7ff ffc2 	bl	8002bbc <__sinit>
 8002c38:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c3a:	07db      	lsls	r3, r3, #31
 8002c3c:	d405      	bmi.n	8002c4a <_puts_r+0x22>
 8002c3e:	89a3      	ldrh	r3, [r4, #12]
 8002c40:	0598      	lsls	r0, r3, #22
 8002c42:	d402      	bmi.n	8002c4a <_puts_r+0x22>
 8002c44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c46:	f000 f99e 	bl	8002f86 <__retarget_lock_acquire_recursive>
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	0719      	lsls	r1, r3, #28
 8002c4e:	d502      	bpl.n	8002c56 <_puts_r+0x2e>
 8002c50:	6923      	ldr	r3, [r4, #16]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d135      	bne.n	8002cc2 <_puts_r+0x9a>
 8002c56:	4621      	mov	r1, r4
 8002c58:	4628      	mov	r0, r5
 8002c5a:	f000 f8c5 	bl	8002de8 <__swsetup_r>
 8002c5e:	b380      	cbz	r0, 8002cc2 <_puts_r+0x9a>
 8002c60:	f04f 35ff 	mov.w	r5, #4294967295
 8002c64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002c66:	07da      	lsls	r2, r3, #31
 8002c68:	d405      	bmi.n	8002c76 <_puts_r+0x4e>
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	059b      	lsls	r3, r3, #22
 8002c6e:	d402      	bmi.n	8002c76 <_puts_r+0x4e>
 8002c70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002c72:	f000 f989 	bl	8002f88 <__retarget_lock_release_recursive>
 8002c76:	4628      	mov	r0, r5
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da04      	bge.n	8002c88 <_puts_r+0x60>
 8002c7e:	69a2      	ldr	r2, [r4, #24]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	dc17      	bgt.n	8002cb4 <_puts_r+0x8c>
 8002c84:	290a      	cmp	r1, #10
 8002c86:	d015      	beq.n	8002cb4 <_puts_r+0x8c>
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	6022      	str	r2, [r4, #0]
 8002c8e:	7019      	strb	r1, [r3, #0]
 8002c90:	68a3      	ldr	r3, [r4, #8]
 8002c92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c96:	3b01      	subs	r3, #1
 8002c98:	60a3      	str	r3, [r4, #8]
 8002c9a:	2900      	cmp	r1, #0
 8002c9c:	d1ed      	bne.n	8002c7a <_puts_r+0x52>
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	da11      	bge.n	8002cc6 <_puts_r+0x9e>
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	4628      	mov	r0, r5
 8002ca8:	f000 f85f 	bl	8002d6a <__swbuf_r>
 8002cac:	3001      	adds	r0, #1
 8002cae:	d0d7      	beq.n	8002c60 <_puts_r+0x38>
 8002cb0:	250a      	movs	r5, #10
 8002cb2:	e7d7      	b.n	8002c64 <_puts_r+0x3c>
 8002cb4:	4622      	mov	r2, r4
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	f000 f857 	bl	8002d6a <__swbuf_r>
 8002cbc:	3001      	adds	r0, #1
 8002cbe:	d1e7      	bne.n	8002c90 <_puts_r+0x68>
 8002cc0:	e7ce      	b.n	8002c60 <_puts_r+0x38>
 8002cc2:	3e01      	subs	r6, #1
 8002cc4:	e7e4      	b.n	8002c90 <_puts_r+0x68>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	6022      	str	r2, [r4, #0]
 8002ccc:	220a      	movs	r2, #10
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e7ee      	b.n	8002cb0 <_puts_r+0x88>
	...

08002cd4 <puts>:
 8002cd4:	4b02      	ldr	r3, [pc, #8]	@ (8002ce0 <puts+0xc>)
 8002cd6:	4601      	mov	r1, r0
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	f7ff bfa5 	b.w	8002c28 <_puts_r>
 8002cde:	bf00      	nop
 8002ce0:	20000018 	.word	0x20000018

08002ce4 <__sread>:
 8002ce4:	b510      	push	{r4, lr}
 8002ce6:	460c      	mov	r4, r1
 8002ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cec:	f000 f8fc 	bl	8002ee8 <_read_r>
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	bfab      	itete	ge
 8002cf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002cf6:	89a3      	ldrhlt	r3, [r4, #12]
 8002cf8:	181b      	addge	r3, r3, r0
 8002cfa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002cfe:	bfac      	ite	ge
 8002d00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d02:	81a3      	strhlt	r3, [r4, #12]
 8002d04:	bd10      	pop	{r4, pc}

08002d06 <__swrite>:
 8002d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d0a:	461f      	mov	r7, r3
 8002d0c:	898b      	ldrh	r3, [r1, #12]
 8002d0e:	05db      	lsls	r3, r3, #23
 8002d10:	4605      	mov	r5, r0
 8002d12:	460c      	mov	r4, r1
 8002d14:	4616      	mov	r6, r2
 8002d16:	d505      	bpl.n	8002d24 <__swrite+0x1e>
 8002d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f000 f8d0 	bl	8002ec4 <_lseek_r>
 8002d24:	89a3      	ldrh	r3, [r4, #12]
 8002d26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d2e:	81a3      	strh	r3, [r4, #12]
 8002d30:	4632      	mov	r2, r6
 8002d32:	463b      	mov	r3, r7
 8002d34:	4628      	mov	r0, r5
 8002d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d3a:	f000 b8e7 	b.w	8002f0c <_write_r>

08002d3e <__sseek>:
 8002d3e:	b510      	push	{r4, lr}
 8002d40:	460c      	mov	r4, r1
 8002d42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d46:	f000 f8bd 	bl	8002ec4 <_lseek_r>
 8002d4a:	1c43      	adds	r3, r0, #1
 8002d4c:	89a3      	ldrh	r3, [r4, #12]
 8002d4e:	bf15      	itete	ne
 8002d50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d5a:	81a3      	strheq	r3, [r4, #12]
 8002d5c:	bf18      	it	ne
 8002d5e:	81a3      	strhne	r3, [r4, #12]
 8002d60:	bd10      	pop	{r4, pc}

08002d62 <__sclose>:
 8002d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d66:	f000 b89d 	b.w	8002ea4 <_close_r>

08002d6a <__swbuf_r>:
 8002d6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d6c:	460e      	mov	r6, r1
 8002d6e:	4614      	mov	r4, r2
 8002d70:	4605      	mov	r5, r0
 8002d72:	b118      	cbz	r0, 8002d7c <__swbuf_r+0x12>
 8002d74:	6a03      	ldr	r3, [r0, #32]
 8002d76:	b90b      	cbnz	r3, 8002d7c <__swbuf_r+0x12>
 8002d78:	f7ff ff20 	bl	8002bbc <__sinit>
 8002d7c:	69a3      	ldr	r3, [r4, #24]
 8002d7e:	60a3      	str	r3, [r4, #8]
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	071a      	lsls	r2, r3, #28
 8002d84:	d501      	bpl.n	8002d8a <__swbuf_r+0x20>
 8002d86:	6923      	ldr	r3, [r4, #16]
 8002d88:	b943      	cbnz	r3, 8002d9c <__swbuf_r+0x32>
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	4628      	mov	r0, r5
 8002d8e:	f000 f82b 	bl	8002de8 <__swsetup_r>
 8002d92:	b118      	cbz	r0, 8002d9c <__swbuf_r+0x32>
 8002d94:	f04f 37ff 	mov.w	r7, #4294967295
 8002d98:	4638      	mov	r0, r7
 8002d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002d9c:	6823      	ldr	r3, [r4, #0]
 8002d9e:	6922      	ldr	r2, [r4, #16]
 8002da0:	1a98      	subs	r0, r3, r2
 8002da2:	6963      	ldr	r3, [r4, #20]
 8002da4:	b2f6      	uxtb	r6, r6
 8002da6:	4283      	cmp	r3, r0
 8002da8:	4637      	mov	r7, r6
 8002daa:	dc05      	bgt.n	8002db8 <__swbuf_r+0x4e>
 8002dac:	4621      	mov	r1, r4
 8002dae:	4628      	mov	r0, r5
 8002db0:	f000 fa68 	bl	8003284 <_fflush_r>
 8002db4:	2800      	cmp	r0, #0
 8002db6:	d1ed      	bne.n	8002d94 <__swbuf_r+0x2a>
 8002db8:	68a3      	ldr	r3, [r4, #8]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	60a3      	str	r3, [r4, #8]
 8002dbe:	6823      	ldr	r3, [r4, #0]
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	6022      	str	r2, [r4, #0]
 8002dc4:	701e      	strb	r6, [r3, #0]
 8002dc6:	6962      	ldr	r2, [r4, #20]
 8002dc8:	1c43      	adds	r3, r0, #1
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d004      	beq.n	8002dd8 <__swbuf_r+0x6e>
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	07db      	lsls	r3, r3, #31
 8002dd2:	d5e1      	bpl.n	8002d98 <__swbuf_r+0x2e>
 8002dd4:	2e0a      	cmp	r6, #10
 8002dd6:	d1df      	bne.n	8002d98 <__swbuf_r+0x2e>
 8002dd8:	4621      	mov	r1, r4
 8002dda:	4628      	mov	r0, r5
 8002ddc:	f000 fa52 	bl	8003284 <_fflush_r>
 8002de0:	2800      	cmp	r0, #0
 8002de2:	d0d9      	beq.n	8002d98 <__swbuf_r+0x2e>
 8002de4:	e7d6      	b.n	8002d94 <__swbuf_r+0x2a>
	...

08002de8 <__swsetup_r>:
 8002de8:	b538      	push	{r3, r4, r5, lr}
 8002dea:	4b29      	ldr	r3, [pc, #164]	@ (8002e90 <__swsetup_r+0xa8>)
 8002dec:	4605      	mov	r5, r0
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	460c      	mov	r4, r1
 8002df2:	b118      	cbz	r0, 8002dfc <__swsetup_r+0x14>
 8002df4:	6a03      	ldr	r3, [r0, #32]
 8002df6:	b90b      	cbnz	r3, 8002dfc <__swsetup_r+0x14>
 8002df8:	f7ff fee0 	bl	8002bbc <__sinit>
 8002dfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e00:	0719      	lsls	r1, r3, #28
 8002e02:	d422      	bmi.n	8002e4a <__swsetup_r+0x62>
 8002e04:	06da      	lsls	r2, r3, #27
 8002e06:	d407      	bmi.n	8002e18 <__swsetup_r+0x30>
 8002e08:	2209      	movs	r2, #9
 8002e0a:	602a      	str	r2, [r5, #0]
 8002e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e10:	81a3      	strh	r3, [r4, #12]
 8002e12:	f04f 30ff 	mov.w	r0, #4294967295
 8002e16:	e033      	b.n	8002e80 <__swsetup_r+0x98>
 8002e18:	0758      	lsls	r0, r3, #29
 8002e1a:	d512      	bpl.n	8002e42 <__swsetup_r+0x5a>
 8002e1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002e1e:	b141      	cbz	r1, 8002e32 <__swsetup_r+0x4a>
 8002e20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002e24:	4299      	cmp	r1, r3
 8002e26:	d002      	beq.n	8002e2e <__swsetup_r+0x46>
 8002e28:	4628      	mov	r0, r5
 8002e2a:	f000 f8af 	bl	8002f8c <_free_r>
 8002e2e:	2300      	movs	r3, #0
 8002e30:	6363      	str	r3, [r4, #52]	@ 0x34
 8002e32:	89a3      	ldrh	r3, [r4, #12]
 8002e34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002e38:	81a3      	strh	r3, [r4, #12]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	6063      	str	r3, [r4, #4]
 8002e3e:	6923      	ldr	r3, [r4, #16]
 8002e40:	6023      	str	r3, [r4, #0]
 8002e42:	89a3      	ldrh	r3, [r4, #12]
 8002e44:	f043 0308 	orr.w	r3, r3, #8
 8002e48:	81a3      	strh	r3, [r4, #12]
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	b94b      	cbnz	r3, 8002e62 <__swsetup_r+0x7a>
 8002e4e:	89a3      	ldrh	r3, [r4, #12]
 8002e50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d003      	beq.n	8002e62 <__swsetup_r+0x7a>
 8002e5a:	4621      	mov	r1, r4
 8002e5c:	4628      	mov	r0, r5
 8002e5e:	f000 fa5f 	bl	8003320 <__smakebuf_r>
 8002e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e66:	f013 0201 	ands.w	r2, r3, #1
 8002e6a:	d00a      	beq.n	8002e82 <__swsetup_r+0x9a>
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60a2      	str	r2, [r4, #8]
 8002e70:	6962      	ldr	r2, [r4, #20]
 8002e72:	4252      	negs	r2, r2
 8002e74:	61a2      	str	r2, [r4, #24]
 8002e76:	6922      	ldr	r2, [r4, #16]
 8002e78:	b942      	cbnz	r2, 8002e8c <__swsetup_r+0xa4>
 8002e7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002e7e:	d1c5      	bne.n	8002e0c <__swsetup_r+0x24>
 8002e80:	bd38      	pop	{r3, r4, r5, pc}
 8002e82:	0799      	lsls	r1, r3, #30
 8002e84:	bf58      	it	pl
 8002e86:	6962      	ldrpl	r2, [r4, #20]
 8002e88:	60a2      	str	r2, [r4, #8]
 8002e8a:	e7f4      	b.n	8002e76 <__swsetup_r+0x8e>
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	e7f7      	b.n	8002e80 <__swsetup_r+0x98>
 8002e90:	20000018 	.word	0x20000018

08002e94 <memset>:
 8002e94:	4402      	add	r2, r0
 8002e96:	4603      	mov	r3, r0
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <_close_r>:
 8002ea4:	b538      	push	{r3, r4, r5, lr}
 8002ea6:	4d06      	ldr	r5, [pc, #24]	@ (8002ec0 <_close_r+0x1c>)
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4608      	mov	r0, r1
 8002eae:	602b      	str	r3, [r5, #0]
 8002eb0:	f7fd fdf8 	bl	8000aa4 <_close>
 8002eb4:	1c43      	adds	r3, r0, #1
 8002eb6:	d102      	bne.n	8002ebe <_close_r+0x1a>
 8002eb8:	682b      	ldr	r3, [r5, #0]
 8002eba:	b103      	cbz	r3, 8002ebe <_close_r+0x1a>
 8002ebc:	6023      	str	r3, [r4, #0]
 8002ebe:	bd38      	pop	{r3, r4, r5, pc}
 8002ec0:	2000025c 	.word	0x2000025c

08002ec4 <_lseek_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	4d07      	ldr	r5, [pc, #28]	@ (8002ee4 <_lseek_r+0x20>)
 8002ec8:	4604      	mov	r4, r0
 8002eca:	4608      	mov	r0, r1
 8002ecc:	4611      	mov	r1, r2
 8002ece:	2200      	movs	r2, #0
 8002ed0:	602a      	str	r2, [r5, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	f7fd fe0d 	bl	8000af2 <_lseek>
 8002ed8:	1c43      	adds	r3, r0, #1
 8002eda:	d102      	bne.n	8002ee2 <_lseek_r+0x1e>
 8002edc:	682b      	ldr	r3, [r5, #0]
 8002ede:	b103      	cbz	r3, 8002ee2 <_lseek_r+0x1e>
 8002ee0:	6023      	str	r3, [r4, #0]
 8002ee2:	bd38      	pop	{r3, r4, r5, pc}
 8002ee4:	2000025c 	.word	0x2000025c

08002ee8 <_read_r>:
 8002ee8:	b538      	push	{r3, r4, r5, lr}
 8002eea:	4d07      	ldr	r5, [pc, #28]	@ (8002f08 <_read_r+0x20>)
 8002eec:	4604      	mov	r4, r0
 8002eee:	4608      	mov	r0, r1
 8002ef0:	4611      	mov	r1, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	602a      	str	r2, [r5, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f7fd fdb7 	bl	8000a6a <_read>
 8002efc:	1c43      	adds	r3, r0, #1
 8002efe:	d102      	bne.n	8002f06 <_read_r+0x1e>
 8002f00:	682b      	ldr	r3, [r5, #0]
 8002f02:	b103      	cbz	r3, 8002f06 <_read_r+0x1e>
 8002f04:	6023      	str	r3, [r4, #0]
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
 8002f08:	2000025c 	.word	0x2000025c

08002f0c <_write_r>:
 8002f0c:	b538      	push	{r3, r4, r5, lr}
 8002f0e:	4d07      	ldr	r5, [pc, #28]	@ (8002f2c <_write_r+0x20>)
 8002f10:	4604      	mov	r4, r0
 8002f12:	4608      	mov	r0, r1
 8002f14:	4611      	mov	r1, r2
 8002f16:	2200      	movs	r2, #0
 8002f18:	602a      	str	r2, [r5, #0]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	f7fd fb11 	bl	8000542 <_write>
 8002f20:	1c43      	adds	r3, r0, #1
 8002f22:	d102      	bne.n	8002f2a <_write_r+0x1e>
 8002f24:	682b      	ldr	r3, [r5, #0]
 8002f26:	b103      	cbz	r3, 8002f2a <_write_r+0x1e>
 8002f28:	6023      	str	r3, [r4, #0]
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
 8002f2c:	2000025c 	.word	0x2000025c

08002f30 <__errno>:
 8002f30:	4b01      	ldr	r3, [pc, #4]	@ (8002f38 <__errno+0x8>)
 8002f32:	6818      	ldr	r0, [r3, #0]
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000018 	.word	0x20000018

08002f3c <__libc_init_array>:
 8002f3c:	b570      	push	{r4, r5, r6, lr}
 8002f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8002f74 <__libc_init_array+0x38>)
 8002f40:	4c0d      	ldr	r4, [pc, #52]	@ (8002f78 <__libc_init_array+0x3c>)
 8002f42:	1b64      	subs	r4, r4, r5
 8002f44:	10a4      	asrs	r4, r4, #2
 8002f46:	2600      	movs	r6, #0
 8002f48:	42a6      	cmp	r6, r4
 8002f4a:	d109      	bne.n	8002f60 <__libc_init_array+0x24>
 8002f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8002f7c <__libc_init_array+0x40>)
 8002f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8002f80 <__libc_init_array+0x44>)
 8002f50:	f000 fa54 	bl	80033fc <_init>
 8002f54:	1b64      	subs	r4, r4, r5
 8002f56:	10a4      	asrs	r4, r4, #2
 8002f58:	2600      	movs	r6, #0
 8002f5a:	42a6      	cmp	r6, r4
 8002f5c:	d105      	bne.n	8002f6a <__libc_init_array+0x2e>
 8002f5e:	bd70      	pop	{r4, r5, r6, pc}
 8002f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f64:	4798      	blx	r3
 8002f66:	3601      	adds	r6, #1
 8002f68:	e7ee      	b.n	8002f48 <__libc_init_array+0xc>
 8002f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6e:	4798      	blx	r3
 8002f70:	3601      	adds	r6, #1
 8002f72:	e7f2      	b.n	8002f5a <__libc_init_array+0x1e>
 8002f74:	08003454 	.word	0x08003454
 8002f78:	08003454 	.word	0x08003454
 8002f7c:	08003454 	.word	0x08003454
 8002f80:	08003458 	.word	0x08003458

08002f84 <__retarget_lock_init_recursive>:
 8002f84:	4770      	bx	lr

08002f86 <__retarget_lock_acquire_recursive>:
 8002f86:	4770      	bx	lr

08002f88 <__retarget_lock_release_recursive>:
 8002f88:	4770      	bx	lr
	...

08002f8c <_free_r>:
 8002f8c:	b538      	push	{r3, r4, r5, lr}
 8002f8e:	4605      	mov	r5, r0
 8002f90:	2900      	cmp	r1, #0
 8002f92:	d041      	beq.n	8003018 <_free_r+0x8c>
 8002f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f98:	1f0c      	subs	r4, r1, #4
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bfb8      	it	lt
 8002f9e:	18e4      	addlt	r4, r4, r3
 8002fa0:	f000 f8e0 	bl	8003164 <__malloc_lock>
 8002fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800301c <_free_r+0x90>)
 8002fa6:	6813      	ldr	r3, [r2, #0]
 8002fa8:	b933      	cbnz	r3, 8002fb8 <_free_r+0x2c>
 8002faa:	6063      	str	r3, [r4, #4]
 8002fac:	6014      	str	r4, [r2, #0]
 8002fae:	4628      	mov	r0, r5
 8002fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fb4:	f000 b8dc 	b.w	8003170 <__malloc_unlock>
 8002fb8:	42a3      	cmp	r3, r4
 8002fba:	d908      	bls.n	8002fce <_free_r+0x42>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	1821      	adds	r1, r4, r0
 8002fc0:	428b      	cmp	r3, r1
 8002fc2:	bf01      	itttt	eq
 8002fc4:	6819      	ldreq	r1, [r3, #0]
 8002fc6:	685b      	ldreq	r3, [r3, #4]
 8002fc8:	1809      	addeq	r1, r1, r0
 8002fca:	6021      	streq	r1, [r4, #0]
 8002fcc:	e7ed      	b.n	8002faa <_free_r+0x1e>
 8002fce:	461a      	mov	r2, r3
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	b10b      	cbz	r3, 8002fd8 <_free_r+0x4c>
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	d9fa      	bls.n	8002fce <_free_r+0x42>
 8002fd8:	6811      	ldr	r1, [r2, #0]
 8002fda:	1850      	adds	r0, r2, r1
 8002fdc:	42a0      	cmp	r0, r4
 8002fde:	d10b      	bne.n	8002ff8 <_free_r+0x6c>
 8002fe0:	6820      	ldr	r0, [r4, #0]
 8002fe2:	4401      	add	r1, r0
 8002fe4:	1850      	adds	r0, r2, r1
 8002fe6:	4283      	cmp	r3, r0
 8002fe8:	6011      	str	r1, [r2, #0]
 8002fea:	d1e0      	bne.n	8002fae <_free_r+0x22>
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	6053      	str	r3, [r2, #4]
 8002ff2:	4408      	add	r0, r1
 8002ff4:	6010      	str	r0, [r2, #0]
 8002ff6:	e7da      	b.n	8002fae <_free_r+0x22>
 8002ff8:	d902      	bls.n	8003000 <_free_r+0x74>
 8002ffa:	230c      	movs	r3, #12
 8002ffc:	602b      	str	r3, [r5, #0]
 8002ffe:	e7d6      	b.n	8002fae <_free_r+0x22>
 8003000:	6820      	ldr	r0, [r4, #0]
 8003002:	1821      	adds	r1, r4, r0
 8003004:	428b      	cmp	r3, r1
 8003006:	bf04      	itt	eq
 8003008:	6819      	ldreq	r1, [r3, #0]
 800300a:	685b      	ldreq	r3, [r3, #4]
 800300c:	6063      	str	r3, [r4, #4]
 800300e:	bf04      	itt	eq
 8003010:	1809      	addeq	r1, r1, r0
 8003012:	6021      	streq	r1, [r4, #0]
 8003014:	6054      	str	r4, [r2, #4]
 8003016:	e7ca      	b.n	8002fae <_free_r+0x22>
 8003018:	bd38      	pop	{r3, r4, r5, pc}
 800301a:	bf00      	nop
 800301c:	20000268 	.word	0x20000268

08003020 <sbrk_aligned>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	4e0f      	ldr	r6, [pc, #60]	@ (8003060 <sbrk_aligned+0x40>)
 8003024:	460c      	mov	r4, r1
 8003026:	6831      	ldr	r1, [r6, #0]
 8003028:	4605      	mov	r5, r0
 800302a:	b911      	cbnz	r1, 8003032 <sbrk_aligned+0x12>
 800302c:	f000 f9d6 	bl	80033dc <_sbrk_r>
 8003030:	6030      	str	r0, [r6, #0]
 8003032:	4621      	mov	r1, r4
 8003034:	4628      	mov	r0, r5
 8003036:	f000 f9d1 	bl	80033dc <_sbrk_r>
 800303a:	1c43      	adds	r3, r0, #1
 800303c:	d103      	bne.n	8003046 <sbrk_aligned+0x26>
 800303e:	f04f 34ff 	mov.w	r4, #4294967295
 8003042:	4620      	mov	r0, r4
 8003044:	bd70      	pop	{r4, r5, r6, pc}
 8003046:	1cc4      	adds	r4, r0, #3
 8003048:	f024 0403 	bic.w	r4, r4, #3
 800304c:	42a0      	cmp	r0, r4
 800304e:	d0f8      	beq.n	8003042 <sbrk_aligned+0x22>
 8003050:	1a21      	subs	r1, r4, r0
 8003052:	4628      	mov	r0, r5
 8003054:	f000 f9c2 	bl	80033dc <_sbrk_r>
 8003058:	3001      	adds	r0, #1
 800305a:	d1f2      	bne.n	8003042 <sbrk_aligned+0x22>
 800305c:	e7ef      	b.n	800303e <sbrk_aligned+0x1e>
 800305e:	bf00      	nop
 8003060:	20000264 	.word	0x20000264

08003064 <_malloc_r>:
 8003064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003068:	1ccd      	adds	r5, r1, #3
 800306a:	f025 0503 	bic.w	r5, r5, #3
 800306e:	3508      	adds	r5, #8
 8003070:	2d0c      	cmp	r5, #12
 8003072:	bf38      	it	cc
 8003074:	250c      	movcc	r5, #12
 8003076:	2d00      	cmp	r5, #0
 8003078:	4606      	mov	r6, r0
 800307a:	db01      	blt.n	8003080 <_malloc_r+0x1c>
 800307c:	42a9      	cmp	r1, r5
 800307e:	d904      	bls.n	800308a <_malloc_r+0x26>
 8003080:	230c      	movs	r3, #12
 8003082:	6033      	str	r3, [r6, #0]
 8003084:	2000      	movs	r0, #0
 8003086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800308a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003160 <_malloc_r+0xfc>
 800308e:	f000 f869 	bl	8003164 <__malloc_lock>
 8003092:	f8d8 3000 	ldr.w	r3, [r8]
 8003096:	461c      	mov	r4, r3
 8003098:	bb44      	cbnz	r4, 80030ec <_malloc_r+0x88>
 800309a:	4629      	mov	r1, r5
 800309c:	4630      	mov	r0, r6
 800309e:	f7ff ffbf 	bl	8003020 <sbrk_aligned>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	4604      	mov	r4, r0
 80030a6:	d158      	bne.n	800315a <_malloc_r+0xf6>
 80030a8:	f8d8 4000 	ldr.w	r4, [r8]
 80030ac:	4627      	mov	r7, r4
 80030ae:	2f00      	cmp	r7, #0
 80030b0:	d143      	bne.n	800313a <_malloc_r+0xd6>
 80030b2:	2c00      	cmp	r4, #0
 80030b4:	d04b      	beq.n	800314e <_malloc_r+0xea>
 80030b6:	6823      	ldr	r3, [r4, #0]
 80030b8:	4639      	mov	r1, r7
 80030ba:	4630      	mov	r0, r6
 80030bc:	eb04 0903 	add.w	r9, r4, r3
 80030c0:	f000 f98c 	bl	80033dc <_sbrk_r>
 80030c4:	4581      	cmp	r9, r0
 80030c6:	d142      	bne.n	800314e <_malloc_r+0xea>
 80030c8:	6821      	ldr	r1, [r4, #0]
 80030ca:	1a6d      	subs	r5, r5, r1
 80030cc:	4629      	mov	r1, r5
 80030ce:	4630      	mov	r0, r6
 80030d0:	f7ff ffa6 	bl	8003020 <sbrk_aligned>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d03a      	beq.n	800314e <_malloc_r+0xea>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	442b      	add	r3, r5
 80030dc:	6023      	str	r3, [r4, #0]
 80030de:	f8d8 3000 	ldr.w	r3, [r8]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	bb62      	cbnz	r2, 8003140 <_malloc_r+0xdc>
 80030e6:	f8c8 7000 	str.w	r7, [r8]
 80030ea:	e00f      	b.n	800310c <_malloc_r+0xa8>
 80030ec:	6822      	ldr	r2, [r4, #0]
 80030ee:	1b52      	subs	r2, r2, r5
 80030f0:	d420      	bmi.n	8003134 <_malloc_r+0xd0>
 80030f2:	2a0b      	cmp	r2, #11
 80030f4:	d917      	bls.n	8003126 <_malloc_r+0xc2>
 80030f6:	1961      	adds	r1, r4, r5
 80030f8:	42a3      	cmp	r3, r4
 80030fa:	6025      	str	r5, [r4, #0]
 80030fc:	bf18      	it	ne
 80030fe:	6059      	strne	r1, [r3, #4]
 8003100:	6863      	ldr	r3, [r4, #4]
 8003102:	bf08      	it	eq
 8003104:	f8c8 1000 	streq.w	r1, [r8]
 8003108:	5162      	str	r2, [r4, r5]
 800310a:	604b      	str	r3, [r1, #4]
 800310c:	4630      	mov	r0, r6
 800310e:	f000 f82f 	bl	8003170 <__malloc_unlock>
 8003112:	f104 000b 	add.w	r0, r4, #11
 8003116:	1d23      	adds	r3, r4, #4
 8003118:	f020 0007 	bic.w	r0, r0, #7
 800311c:	1ac2      	subs	r2, r0, r3
 800311e:	bf1c      	itt	ne
 8003120:	1a1b      	subne	r3, r3, r0
 8003122:	50a3      	strne	r3, [r4, r2]
 8003124:	e7af      	b.n	8003086 <_malloc_r+0x22>
 8003126:	6862      	ldr	r2, [r4, #4]
 8003128:	42a3      	cmp	r3, r4
 800312a:	bf0c      	ite	eq
 800312c:	f8c8 2000 	streq.w	r2, [r8]
 8003130:	605a      	strne	r2, [r3, #4]
 8003132:	e7eb      	b.n	800310c <_malloc_r+0xa8>
 8003134:	4623      	mov	r3, r4
 8003136:	6864      	ldr	r4, [r4, #4]
 8003138:	e7ae      	b.n	8003098 <_malloc_r+0x34>
 800313a:	463c      	mov	r4, r7
 800313c:	687f      	ldr	r7, [r7, #4]
 800313e:	e7b6      	b.n	80030ae <_malloc_r+0x4a>
 8003140:	461a      	mov	r2, r3
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	42a3      	cmp	r3, r4
 8003146:	d1fb      	bne.n	8003140 <_malloc_r+0xdc>
 8003148:	2300      	movs	r3, #0
 800314a:	6053      	str	r3, [r2, #4]
 800314c:	e7de      	b.n	800310c <_malloc_r+0xa8>
 800314e:	230c      	movs	r3, #12
 8003150:	6033      	str	r3, [r6, #0]
 8003152:	4630      	mov	r0, r6
 8003154:	f000 f80c 	bl	8003170 <__malloc_unlock>
 8003158:	e794      	b.n	8003084 <_malloc_r+0x20>
 800315a:	6005      	str	r5, [r0, #0]
 800315c:	e7d6      	b.n	800310c <_malloc_r+0xa8>
 800315e:	bf00      	nop
 8003160:	20000268 	.word	0x20000268

08003164 <__malloc_lock>:
 8003164:	4801      	ldr	r0, [pc, #4]	@ (800316c <__malloc_lock+0x8>)
 8003166:	f7ff bf0e 	b.w	8002f86 <__retarget_lock_acquire_recursive>
 800316a:	bf00      	nop
 800316c:	20000260 	.word	0x20000260

08003170 <__malloc_unlock>:
 8003170:	4801      	ldr	r0, [pc, #4]	@ (8003178 <__malloc_unlock+0x8>)
 8003172:	f7ff bf09 	b.w	8002f88 <__retarget_lock_release_recursive>
 8003176:	bf00      	nop
 8003178:	20000260 	.word	0x20000260

0800317c <__sflush_r>:
 800317c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003184:	0716      	lsls	r6, r2, #28
 8003186:	4605      	mov	r5, r0
 8003188:	460c      	mov	r4, r1
 800318a:	d454      	bmi.n	8003236 <__sflush_r+0xba>
 800318c:	684b      	ldr	r3, [r1, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	dc02      	bgt.n	8003198 <__sflush_r+0x1c>
 8003192:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	dd48      	ble.n	800322a <__sflush_r+0xae>
 8003198:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800319a:	2e00      	cmp	r6, #0
 800319c:	d045      	beq.n	800322a <__sflush_r+0xae>
 800319e:	2300      	movs	r3, #0
 80031a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80031a4:	682f      	ldr	r7, [r5, #0]
 80031a6:	6a21      	ldr	r1, [r4, #32]
 80031a8:	602b      	str	r3, [r5, #0]
 80031aa:	d030      	beq.n	800320e <__sflush_r+0x92>
 80031ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80031ae:	89a3      	ldrh	r3, [r4, #12]
 80031b0:	0759      	lsls	r1, r3, #29
 80031b2:	d505      	bpl.n	80031c0 <__sflush_r+0x44>
 80031b4:	6863      	ldr	r3, [r4, #4]
 80031b6:	1ad2      	subs	r2, r2, r3
 80031b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031ba:	b10b      	cbz	r3, 80031c0 <__sflush_r+0x44>
 80031bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031be:	1ad2      	subs	r2, r2, r3
 80031c0:	2300      	movs	r3, #0
 80031c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031c4:	6a21      	ldr	r1, [r4, #32]
 80031c6:	4628      	mov	r0, r5
 80031c8:	47b0      	blx	r6
 80031ca:	1c43      	adds	r3, r0, #1
 80031cc:	89a3      	ldrh	r3, [r4, #12]
 80031ce:	d106      	bne.n	80031de <__sflush_r+0x62>
 80031d0:	6829      	ldr	r1, [r5, #0]
 80031d2:	291d      	cmp	r1, #29
 80031d4:	d82b      	bhi.n	800322e <__sflush_r+0xb2>
 80031d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <__sflush_r+0x104>)
 80031d8:	410a      	asrs	r2, r1
 80031da:	07d6      	lsls	r6, r2, #31
 80031dc:	d427      	bmi.n	800322e <__sflush_r+0xb2>
 80031de:	2200      	movs	r2, #0
 80031e0:	6062      	str	r2, [r4, #4]
 80031e2:	04d9      	lsls	r1, r3, #19
 80031e4:	6922      	ldr	r2, [r4, #16]
 80031e6:	6022      	str	r2, [r4, #0]
 80031e8:	d504      	bpl.n	80031f4 <__sflush_r+0x78>
 80031ea:	1c42      	adds	r2, r0, #1
 80031ec:	d101      	bne.n	80031f2 <__sflush_r+0x76>
 80031ee:	682b      	ldr	r3, [r5, #0]
 80031f0:	b903      	cbnz	r3, 80031f4 <__sflush_r+0x78>
 80031f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80031f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031f6:	602f      	str	r7, [r5, #0]
 80031f8:	b1b9      	cbz	r1, 800322a <__sflush_r+0xae>
 80031fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031fe:	4299      	cmp	r1, r3
 8003200:	d002      	beq.n	8003208 <__sflush_r+0x8c>
 8003202:	4628      	mov	r0, r5
 8003204:	f7ff fec2 	bl	8002f8c <_free_r>
 8003208:	2300      	movs	r3, #0
 800320a:	6363      	str	r3, [r4, #52]	@ 0x34
 800320c:	e00d      	b.n	800322a <__sflush_r+0xae>
 800320e:	2301      	movs	r3, #1
 8003210:	4628      	mov	r0, r5
 8003212:	47b0      	blx	r6
 8003214:	4602      	mov	r2, r0
 8003216:	1c50      	adds	r0, r2, #1
 8003218:	d1c9      	bne.n	80031ae <__sflush_r+0x32>
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0c6      	beq.n	80031ae <__sflush_r+0x32>
 8003220:	2b1d      	cmp	r3, #29
 8003222:	d001      	beq.n	8003228 <__sflush_r+0xac>
 8003224:	2b16      	cmp	r3, #22
 8003226:	d11e      	bne.n	8003266 <__sflush_r+0xea>
 8003228:	602f      	str	r7, [r5, #0]
 800322a:	2000      	movs	r0, #0
 800322c:	e022      	b.n	8003274 <__sflush_r+0xf8>
 800322e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003232:	b21b      	sxth	r3, r3
 8003234:	e01b      	b.n	800326e <__sflush_r+0xf2>
 8003236:	690f      	ldr	r7, [r1, #16]
 8003238:	2f00      	cmp	r7, #0
 800323a:	d0f6      	beq.n	800322a <__sflush_r+0xae>
 800323c:	0793      	lsls	r3, r2, #30
 800323e:	680e      	ldr	r6, [r1, #0]
 8003240:	bf08      	it	eq
 8003242:	694b      	ldreq	r3, [r1, #20]
 8003244:	600f      	str	r7, [r1, #0]
 8003246:	bf18      	it	ne
 8003248:	2300      	movne	r3, #0
 800324a:	eba6 0807 	sub.w	r8, r6, r7
 800324e:	608b      	str	r3, [r1, #8]
 8003250:	f1b8 0f00 	cmp.w	r8, #0
 8003254:	dde9      	ble.n	800322a <__sflush_r+0xae>
 8003256:	6a21      	ldr	r1, [r4, #32]
 8003258:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800325a:	4643      	mov	r3, r8
 800325c:	463a      	mov	r2, r7
 800325e:	4628      	mov	r0, r5
 8003260:	47b0      	blx	r6
 8003262:	2800      	cmp	r0, #0
 8003264:	dc08      	bgt.n	8003278 <__sflush_r+0xfc>
 8003266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800326a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800326e:	81a3      	strh	r3, [r4, #12]
 8003270:	f04f 30ff 	mov.w	r0, #4294967295
 8003274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003278:	4407      	add	r7, r0
 800327a:	eba8 0800 	sub.w	r8, r8, r0
 800327e:	e7e7      	b.n	8003250 <__sflush_r+0xd4>
 8003280:	dfbffffe 	.word	0xdfbffffe

08003284 <_fflush_r>:
 8003284:	b538      	push	{r3, r4, r5, lr}
 8003286:	690b      	ldr	r3, [r1, #16]
 8003288:	4605      	mov	r5, r0
 800328a:	460c      	mov	r4, r1
 800328c:	b913      	cbnz	r3, 8003294 <_fflush_r+0x10>
 800328e:	2500      	movs	r5, #0
 8003290:	4628      	mov	r0, r5
 8003292:	bd38      	pop	{r3, r4, r5, pc}
 8003294:	b118      	cbz	r0, 800329e <_fflush_r+0x1a>
 8003296:	6a03      	ldr	r3, [r0, #32]
 8003298:	b90b      	cbnz	r3, 800329e <_fflush_r+0x1a>
 800329a:	f7ff fc8f 	bl	8002bbc <__sinit>
 800329e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f3      	beq.n	800328e <_fflush_r+0xa>
 80032a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80032a8:	07d0      	lsls	r0, r2, #31
 80032aa:	d404      	bmi.n	80032b6 <_fflush_r+0x32>
 80032ac:	0599      	lsls	r1, r3, #22
 80032ae:	d402      	bmi.n	80032b6 <_fflush_r+0x32>
 80032b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032b2:	f7ff fe68 	bl	8002f86 <__retarget_lock_acquire_recursive>
 80032b6:	4628      	mov	r0, r5
 80032b8:	4621      	mov	r1, r4
 80032ba:	f7ff ff5f 	bl	800317c <__sflush_r>
 80032be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032c0:	07da      	lsls	r2, r3, #31
 80032c2:	4605      	mov	r5, r0
 80032c4:	d4e4      	bmi.n	8003290 <_fflush_r+0xc>
 80032c6:	89a3      	ldrh	r3, [r4, #12]
 80032c8:	059b      	lsls	r3, r3, #22
 80032ca:	d4e1      	bmi.n	8003290 <_fflush_r+0xc>
 80032cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ce:	f7ff fe5b 	bl	8002f88 <__retarget_lock_release_recursive>
 80032d2:	e7dd      	b.n	8003290 <_fflush_r+0xc>

080032d4 <__swhatbuf_r>:
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	460c      	mov	r4, r1
 80032d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032dc:	2900      	cmp	r1, #0
 80032de:	b096      	sub	sp, #88	@ 0x58
 80032e0:	4615      	mov	r5, r2
 80032e2:	461e      	mov	r6, r3
 80032e4:	da0d      	bge.n	8003302 <__swhatbuf_r+0x2e>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80032ec:	f04f 0100 	mov.w	r1, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2340      	movne	r3, #64	@ 0x40
 80032f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80032f8:	2000      	movs	r0, #0
 80032fa:	6031      	str	r1, [r6, #0]
 80032fc:	602b      	str	r3, [r5, #0]
 80032fe:	b016      	add	sp, #88	@ 0x58
 8003300:	bd70      	pop	{r4, r5, r6, pc}
 8003302:	466a      	mov	r2, sp
 8003304:	f000 f848 	bl	8003398 <_fstat_r>
 8003308:	2800      	cmp	r0, #0
 800330a:	dbec      	blt.n	80032e6 <__swhatbuf_r+0x12>
 800330c:	9901      	ldr	r1, [sp, #4]
 800330e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003312:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003316:	4259      	negs	r1, r3
 8003318:	4159      	adcs	r1, r3
 800331a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800331e:	e7eb      	b.n	80032f8 <__swhatbuf_r+0x24>

08003320 <__smakebuf_r>:
 8003320:	898b      	ldrh	r3, [r1, #12]
 8003322:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003324:	079d      	lsls	r5, r3, #30
 8003326:	4606      	mov	r6, r0
 8003328:	460c      	mov	r4, r1
 800332a:	d507      	bpl.n	800333c <__smakebuf_r+0x1c>
 800332c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003330:	6023      	str	r3, [r4, #0]
 8003332:	6123      	str	r3, [r4, #16]
 8003334:	2301      	movs	r3, #1
 8003336:	6163      	str	r3, [r4, #20]
 8003338:	b003      	add	sp, #12
 800333a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333c:	ab01      	add	r3, sp, #4
 800333e:	466a      	mov	r2, sp
 8003340:	f7ff ffc8 	bl	80032d4 <__swhatbuf_r>
 8003344:	9f00      	ldr	r7, [sp, #0]
 8003346:	4605      	mov	r5, r0
 8003348:	4639      	mov	r1, r7
 800334a:	4630      	mov	r0, r6
 800334c:	f7ff fe8a 	bl	8003064 <_malloc_r>
 8003350:	b948      	cbnz	r0, 8003366 <__smakebuf_r+0x46>
 8003352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003356:	059a      	lsls	r2, r3, #22
 8003358:	d4ee      	bmi.n	8003338 <__smakebuf_r+0x18>
 800335a:	f023 0303 	bic.w	r3, r3, #3
 800335e:	f043 0302 	orr.w	r3, r3, #2
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	e7e2      	b.n	800332c <__smakebuf_r+0xc>
 8003366:	89a3      	ldrh	r3, [r4, #12]
 8003368:	6020      	str	r0, [r4, #0]
 800336a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800336e:	81a3      	strh	r3, [r4, #12]
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003376:	b15b      	cbz	r3, 8003390 <__smakebuf_r+0x70>
 8003378:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800337c:	4630      	mov	r0, r6
 800337e:	f000 f81d 	bl	80033bc <_isatty_r>
 8003382:	b128      	cbz	r0, 8003390 <__smakebuf_r+0x70>
 8003384:	89a3      	ldrh	r3, [r4, #12]
 8003386:	f023 0303 	bic.w	r3, r3, #3
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	81a3      	strh	r3, [r4, #12]
 8003390:	89a3      	ldrh	r3, [r4, #12]
 8003392:	431d      	orrs	r5, r3
 8003394:	81a5      	strh	r5, [r4, #12]
 8003396:	e7cf      	b.n	8003338 <__smakebuf_r+0x18>

08003398 <_fstat_r>:
 8003398:	b538      	push	{r3, r4, r5, lr}
 800339a:	4d07      	ldr	r5, [pc, #28]	@ (80033b8 <_fstat_r+0x20>)
 800339c:	2300      	movs	r3, #0
 800339e:	4604      	mov	r4, r0
 80033a0:	4608      	mov	r0, r1
 80033a2:	4611      	mov	r1, r2
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	f7fd fb89 	bl	8000abc <_fstat>
 80033aa:	1c43      	adds	r3, r0, #1
 80033ac:	d102      	bne.n	80033b4 <_fstat_r+0x1c>
 80033ae:	682b      	ldr	r3, [r5, #0]
 80033b0:	b103      	cbz	r3, 80033b4 <_fstat_r+0x1c>
 80033b2:	6023      	str	r3, [r4, #0]
 80033b4:	bd38      	pop	{r3, r4, r5, pc}
 80033b6:	bf00      	nop
 80033b8:	2000025c 	.word	0x2000025c

080033bc <_isatty_r>:
 80033bc:	b538      	push	{r3, r4, r5, lr}
 80033be:	4d06      	ldr	r5, [pc, #24]	@ (80033d8 <_isatty_r+0x1c>)
 80033c0:	2300      	movs	r3, #0
 80033c2:	4604      	mov	r4, r0
 80033c4:	4608      	mov	r0, r1
 80033c6:	602b      	str	r3, [r5, #0]
 80033c8:	f7fd fb88 	bl	8000adc <_isatty>
 80033cc:	1c43      	adds	r3, r0, #1
 80033ce:	d102      	bne.n	80033d6 <_isatty_r+0x1a>
 80033d0:	682b      	ldr	r3, [r5, #0]
 80033d2:	b103      	cbz	r3, 80033d6 <_isatty_r+0x1a>
 80033d4:	6023      	str	r3, [r4, #0]
 80033d6:	bd38      	pop	{r3, r4, r5, pc}
 80033d8:	2000025c 	.word	0x2000025c

080033dc <_sbrk_r>:
 80033dc:	b538      	push	{r3, r4, r5, lr}
 80033de:	4d06      	ldr	r5, [pc, #24]	@ (80033f8 <_sbrk_r+0x1c>)
 80033e0:	2300      	movs	r3, #0
 80033e2:	4604      	mov	r4, r0
 80033e4:	4608      	mov	r0, r1
 80033e6:	602b      	str	r3, [r5, #0]
 80033e8:	f7fd fb90 	bl	8000b0c <_sbrk>
 80033ec:	1c43      	adds	r3, r0, #1
 80033ee:	d102      	bne.n	80033f6 <_sbrk_r+0x1a>
 80033f0:	682b      	ldr	r3, [r5, #0]
 80033f2:	b103      	cbz	r3, 80033f6 <_sbrk_r+0x1a>
 80033f4:	6023      	str	r3, [r4, #0]
 80033f6:	bd38      	pop	{r3, r4, r5, pc}
 80033f8:	2000025c 	.word	0x2000025c

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
