#include "stm32f4xx.h"

uint16_t adc_val;
int a = 0;

//void led_init()
//{
//  GPIOA->MODER &= ~(0x3 << (2*5));
//  GPIOA->MODER |= (1 << (2*5));
//}

void tim2_init()
{
  RCC->APB1ENR |= (1<<0); // Enable clock to Timer2
  TIM2->CR1 &= ~(1<<0); // Disable Counter Timer

  // psc = (16000/16000000) = 1ms
  TIM2->PSC |= 1600-1;// Loading Pre-Scaler Value
  TIM2->ARR |= 100-1; // Load Auto Reload Register

  TIM2->DIER |= (1<<0); // Enable interrupt

  TIM2->CR1 |= (1<<0); //  Enable Counter Timer
  // bit 4; by default 0 - upcounter
  NVIC_EnableIRQ(TIM2_IRQn);
}

void TIM2_IRQHandler(void)
{
  if (TIM2->SR & (1<<0)) // Check if update interrupt flag is set
  {
      TIM2->SR &= ~(1<<0); // Clear interrupt flag
      ADC1->CR2 |= (1<<30); // Start ADC conversion
  }
}

// PA3 - ADC1 Ch3
void adc_init()
{
  RCC->AHB1ENR |= (1<<0);
  GPIOA->MODER &= ~(0x3 << (2*4));
  GPIOA->MODER |= (0x3 << (2*4));
  RCC->APB2ENR |= (1<<8);

  ADC1->CR2 &= ~(1<<0);
  ADC1->CR2 |= (1<<1);
  ADC1->CR2 &= ~(1<<11);
  ADC1->CR2 |= (1<<0);
  ADC1->SQR3 |= (4<<0); // Set the channel to 4 (PA4)
  ADC1->CR1 |= (1<<5); // Enable end of conversion interrupt for regular channels
   NVIC_EnableIRQ(ADC_IRQn); // Enable ADC interrupt in NVIC
}

void ADC_IRQHandler(void)
{
  if (ADC1->SR & (1<<1)) // Check if end of conversion flag is set
  {
      // Handle ADC conversion result
      adc_val = ADC1->DR; // Read the ADC value
      // Add your code to handle adc_value
      ADC1->SR &= ~(1<<1); // Clear the end of conversion flag

//        if(adc_val < 1500)
//      	{
//      	  a = 1;
//      	  GPIOA->ODR ^= (1<<5);
//      	}
  }
}


int main()
{
  adc_init();
  tim2_init();
//  led_init();

  while(1)
    {

    }
}
