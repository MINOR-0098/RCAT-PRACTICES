
multi adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020fc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080022c0  080022c0  000032c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080022d0  080022d0  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  080022d0  080022d0  000032d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022d8  080022d8  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022d8  080022d8  000032d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080022dc  080022dc  000032dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080022e0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  080022ec  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  080022ec  00004090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059fa  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013bf  00000000  00000000  00009a36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000580  00000000  00000000  0000adf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000040c  00000000  00000000  0000b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002118f  00000000  00000000  0000b784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007876  00000000  00000000  0002c913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cec61  00000000  00000000  00034189  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102dea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014d4  00000000  00000000  00102e30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00104304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080022a8 	.word	0x080022a8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080022a8 	.word	0x080022a8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fa6c 	bl	80009d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f84e 	bl	800059c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 f90c 	bl	800071c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000504:	f000 f8b8 	bl	8000678 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */
  Config.Rank = 1;
 8000508:	4b21      	ldr	r3, [pc, #132]	@ (8000590 <main+0x9c>)
 800050a:	2201      	movs	r2, #1
 800050c:	605a      	str	r2, [r3, #4]
  Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800050e:	4b20      	ldr	r3, [pc, #128]	@ (8000590 <main+0x9c>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  Config.Channel = ADC_CHANNEL_0;
 8000514:	4b1e      	ldr	r3, [pc, #120]	@ (8000590 <main+0x9c>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &Config);
 800051a:	491d      	ldr	r1, [pc, #116]	@ (8000590 <main+0x9c>)
 800051c:	481d      	ldr	r0, [pc, #116]	@ (8000594 <main+0xa0>)
 800051e:	f000 fc21 	bl	8000d64 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000522:	481c      	ldr	r0, [pc, #112]	@ (8000594 <main+0xa0>)
 8000524:	f000 fb0c 	bl	8000b40 <HAL_ADC_Start>
	  var[0]=HAL_ADC_GetValue(&hadc1);
 8000528:	481a      	ldr	r0, [pc, #104]	@ (8000594 <main+0xa0>)
 800052a:	f000 fc0e 	bl	8000d4a <HAL_ADC_GetValue>
 800052e:	4603      	mov	r3, r0
 8000530:	461a      	mov	r2, r3
 8000532:	4b19      	ldr	r3, [pc, #100]	@ (8000598 <main+0xa4>)
 8000534:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000536:	4817      	ldr	r0, [pc, #92]	@ (8000594 <main+0xa0>)
 8000538:	f000 fbd4 	bl	8000ce4 <HAL_ADC_Stop>

	  Config.Channel = ADC_CHANNEL_1;
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <main+0x9c>)
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &Config);
 8000542:	4913      	ldr	r1, [pc, #76]	@ (8000590 <main+0x9c>)
 8000544:	4813      	ldr	r0, [pc, #76]	@ (8000594 <main+0xa0>)
 8000546:	f000 fc0d 	bl	8000d64 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 800054a:	4812      	ldr	r0, [pc, #72]	@ (8000594 <main+0xa0>)
 800054c:	f000 faf8 	bl	8000b40 <HAL_ADC_Start>
	  var[1]=HAL_ADC_GetValue(&hadc1);
 8000550:	4810      	ldr	r0, [pc, #64]	@ (8000594 <main+0xa0>)
 8000552:	f000 fbfa 	bl	8000d4a <HAL_ADC_GetValue>
 8000556:	4603      	mov	r3, r0
 8000558:	461a      	mov	r2, r3
 800055a:	4b0f      	ldr	r3, [pc, #60]	@ (8000598 <main+0xa4>)
 800055c:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 800055e:	480d      	ldr	r0, [pc, #52]	@ (8000594 <main+0xa0>)
 8000560:	f000 fbc0 	bl	8000ce4 <HAL_ADC_Stop>

	  Config.Channel = ADC_CHANNEL_4;
 8000564:	4b0a      	ldr	r3, [pc, #40]	@ (8000590 <main+0x9c>)
 8000566:	2204      	movs	r2, #4
 8000568:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &Config);
 800056a:	4909      	ldr	r1, [pc, #36]	@ (8000590 <main+0x9c>)
 800056c:	4809      	ldr	r0, [pc, #36]	@ (8000594 <main+0xa0>)
 800056e:	f000 fbf9 	bl	8000d64 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8000572:	4808      	ldr	r0, [pc, #32]	@ (8000594 <main+0xa0>)
 8000574:	f000 fae4 	bl	8000b40 <HAL_ADC_Start>
	  var[2]=HAL_ADC_GetValue(&hadc1);
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <main+0xa0>)
 800057a:	f000 fbe6 	bl	8000d4a <HAL_ADC_GetValue>
 800057e:	4603      	mov	r3, r0
 8000580:	461a      	mov	r2, r3
 8000582:	4b05      	ldr	r3, [pc, #20]	@ (8000598 <main+0xa4>)
 8000584:	609a      	str	r2, [r3, #8]
	  HAL_ADC_Stop(&hadc1);
 8000586:	4803      	ldr	r0, [pc, #12]	@ (8000594 <main+0xa0>)
 8000588:	f000 fbac 	bl	8000ce4 <HAL_ADC_Stop>
	  Config.Channel = ADC_CHANNEL_0;
 800058c:	bf00      	nop
 800058e:	e7c1      	b.n	8000514 <main+0x20>
 8000590:	2000007c 	.word	0x2000007c
 8000594:	20000028 	.word	0x20000028
 8000598:	20000070 	.word	0x20000070

0800059c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b094      	sub	sp, #80	@ 0x50
 80005a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a2:	f107 031c 	add.w	r3, r7, #28
 80005a6:	2234      	movs	r2, #52	@ 0x34
 80005a8:	2100      	movs	r1, #0
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fe50 	bl	8002250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]
 80005be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b2a      	ldr	r3, [pc, #168]	@ (8000670 <SystemClock_Config+0xd4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c8:	4a29      	ldr	r2, [pc, #164]	@ (8000670 <SystemClock_Config+0xd4>)
 80005ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80005d0:	4b27      	ldr	r3, [pc, #156]	@ (8000670 <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005dc:	2300      	movs	r3, #0
 80005de:	603b      	str	r3, [r7, #0]
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <SystemClock_Config+0xd8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005e8:	4a22      	ldr	r2, [pc, #136]	@ (8000674 <SystemClock_Config+0xd8>)
 80005ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	4b20      	ldr	r3, [pc, #128]	@ (8000674 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f8:	603b      	str	r3, [r7, #0]
 80005fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005fc:	2302      	movs	r3, #2
 80005fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000600:	2301      	movs	r3, #1
 8000602:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000604:	2310      	movs	r3, #16
 8000606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000608:	2302      	movs	r3, #2
 800060a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000610:	2310      	movs	r3, #16
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000614:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000618:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800061a:	2304      	movs	r3, #4
 800061c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800061e:	2302      	movs	r3, #2
 8000620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fb72 	bl	8001d14 <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000636:	f000 f8ef 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063e:	2302      	movs	r3, #2
 8000640:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f001 f846 	bl	80016e8 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000662:	f000 f8d9 	bl	8000818 <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40023800 	.word	0x40023800
 8000674:	40007000 	.word	0x40007000

08000678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800067e:	463b      	mov	r3, r7
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800068a:	4b21      	ldr	r3, [pc, #132]	@ (8000710 <MX_ADC1_Init+0x98>)
 800068c:	4a21      	ldr	r2, [pc, #132]	@ (8000714 <MX_ADC1_Init+0x9c>)
 800068e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000690:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <MX_ADC1_Init+0x98>)
 8000692:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000696:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000698:	4b1d      	ldr	r3, [pc, #116]	@ (8000710 <MX_ADC1_Init+0x98>)
 800069a:	2200      	movs	r2, #0
 800069c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006aa:	4b19      	ldr	r3, [pc, #100]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006b2:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006b8:	4b15      	ldr	r3, [pc, #84]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006ba:	4a17      	ldr	r2, [pc, #92]	@ (8000718 <MX_ADC1_Init+0xa0>)
 80006bc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006be:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006ca:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006d8:	480d      	ldr	r0, [pc, #52]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006da:	f000 f9ed 	bl	8000ab8 <HAL_ADC_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006e4:	f000 f898 	bl	8000818 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ec:	2301      	movs	r3, #1
 80006ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4805      	ldr	r0, [pc, #20]	@ (8000710 <MX_ADC1_Init+0x98>)
 80006fa:	f000 fb33 	bl	8000d64 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000704:	f000 f888 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000708:	bf00      	nop
 800070a:	3710      	adds	r7, #16
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000028 	.word	0x20000028
 8000714:	40012000 	.word	0x40012000
 8000718:	0f000001 	.word	0x0f000001

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a34      	ldr	r2, [pc, #208]	@ (800080c <MX_GPIO_Init+0xf0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a2d      	ldr	r2, [pc, #180]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_GPIO_Init+0xf0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	481a      	ldr	r0, [pc, #104]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007a8:	f000 ff84 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xf8>)
 80007c4:	f000 fde2 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80007c8:	2308      	movs	r3, #8
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d8:	2307      	movs	r3, #7
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007e4:	f000 fdd2 	bl	800138c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fdc4 	bl	800138c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	@ 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020800 	.word	0x40020800

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	bf00      	nop
 8000822:	e7fd      	b.n	8000820 <Error_Handler+0x8>

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	@ (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	@ (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000838:	6453      	str	r3, [r2, #68]	@ 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	@ (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	@ (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	@ 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000862:	2007      	movs	r0, #7
 8000864:	f000 fd5e 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000868:	bf00      	nop
 800086a:	3708      	adds	r7, #8
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	@ 0x28
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <HAL_ADC_MspInit+0x7c>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d127      	bne.n	80008e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	613b      	str	r3, [r7, #16]
 800089a:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a15      	ldr	r2, [pc, #84]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80008ae:	613b      	str	r3, [r7, #16]
 80008b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
 80008b6:	4b0f      	ldr	r3, [pc, #60]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a0e      	ldr	r2, [pc, #56]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <HAL_ADC_MspInit+0x80>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 80008ce:	2317      	movs	r3, #23
 80008d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008d2:	2303      	movs	r3, #3
 80008d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 0314 	add.w	r3, r7, #20
 80008de:	4619      	mov	r1, r3
 80008e0:	4805      	ldr	r0, [pc, #20]	@ (80008f8 <HAL_ADC_MspInit+0x84>)
 80008e2:	f000 fd53 	bl	800138c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80008e6:	bf00      	nop
 80008e8:	3728      	adds	r7, #40	@ 0x28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40012000 	.word	0x40012000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <NMI_Handler+0x4>

08000904 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <HardFault_Handler+0x4>

0800090c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <MemManage_Handler+0x4>

08000914 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <UsageFault_Handler+0x4>

08000924 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000936:	bf00      	nop
 8000938:	46bd      	mov	sp, r7
 800093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093e:	4770      	bx	lr

08000940 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000952:	f000 f891 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000960:	4b06      	ldr	r3, [pc, #24]	@ (800097c <SystemInit+0x20>)
 8000962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000966:	4a05      	ldr	r2, [pc, #20]	@ (800097c <SystemInit+0x20>)
 8000968:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800096c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	e000ed00 	.word	0xe000ed00

08000980 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000980:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80009b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000984:	f7ff ffea 	bl	800095c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800098a:	490d      	ldr	r1, [pc, #52]	@ (80009c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80009a0:	4c0a      	ldr	r4, [pc, #40]	@ (80009cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009ae:	f001 fc57 	bl	8002260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b2:	f7ff fd9f 	bl	80004f4 <main>
  bx  lr    
 80009b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c4:	080022e0 	.word	0x080022e0
  ldr r2, =_sbss
 80009c8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009cc:	20000090 	.word	0x20000090

080009d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d0:	e7fe      	b.n	80009d0 <ADC_IRQHandler>
	...

080009d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000a14 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000a14 <HAL_Init+0x40>)
 80009de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000a14 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_Init+0x40>)
 80009ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f0:	4b08      	ldr	r3, [pc, #32]	@ (8000a14 <HAL_Init+0x40>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a07      	ldr	r2, [pc, #28]	@ (8000a14 <HAL_Init+0x40>)
 80009f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009fc:	2003      	movs	r0, #3
 80009fe:	f000 fc91 	bl	8001324 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a02:	2000      	movs	r0, #0
 8000a04:	f000 f808 	bl	8000a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a08:	f7ff ff0c 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023c00 	.word	0x40023c00

08000a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a20:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_InitTick+0x54>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b12      	ldr	r3, [pc, #72]	@ (8000a70 <HAL_InitTick+0x58>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fc9b 	bl	8001372 <HAL_SYSTICK_Config>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
 8000a44:	e00e      	b.n	8000a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d80a      	bhi.n	8000a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	6879      	ldr	r1, [r7, #4]
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	f000 fc71 	bl	800133a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a58:	4a06      	ldr	r2, [pc, #24]	@ (8000a74 <HAL_InitTick+0x5c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	e000      	b.n	8000a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	20000000 	.word	0x20000000
 8000a70:	20000008 	.word	0x20000008
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	@ (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	@ (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	2000008c 	.word	0x2000008c

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	@ (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	2000008c 	.word	0x2000008c

08000ab8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d101      	bne.n	8000ace <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e033      	b.n	8000b36 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d109      	bne.n	8000aea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff fecc 	bl	8000874 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	f003 0310 	and.w	r3, r3, #16
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d118      	bne.n	8000b28 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000afe:	f023 0302 	bic.w	r3, r3, #2
 8000b02:	f043 0202 	orr.w	r2, r3, #2
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 fa5c 	bl	8000fc8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2200      	movs	r2, #0
 8000b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1a:	f023 0303 	bic.w	r3, r3, #3
 8000b1e:	f043 0201 	orr.w	r2, r3, #1
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b26:	e001      	b.n	8000b2c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d101      	bne.n	8000b5a <HAL_ADC_Start+0x1a>
 8000b56:	2302      	movs	r3, #2
 8000b58:	e0b2      	b.n	8000cc0 <HAL_ADC_Start+0x180>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b01      	cmp	r3, #1
 8000b6e:	d018      	beq.n	8000ba2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	689a      	ldr	r2, [r3, #8]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f042 0201 	orr.w	r2, r2, #1
 8000b7e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000b80:	4b52      	ldr	r3, [pc, #328]	@ (8000ccc <HAL_ADC_Start+0x18c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a52      	ldr	r2, [pc, #328]	@ (8000cd0 <HAL_ADC_Start+0x190>)
 8000b86:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8a:	0c9a      	lsrs	r2, r3, #18
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	4413      	add	r3, r2
 8000b92:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000b94:	e002      	b.n	8000b9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000b96:	68bb      	ldr	r3, [r7, #8]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1f9      	bne.n	8000b96 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f003 0301 	and.w	r3, r3, #1
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d17a      	bne.n	8000ca6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000bb8:	f023 0301 	bic.w	r3, r3, #1
 8000bbc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d007      	beq.n	8000be2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000bda:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000bee:	d106      	bne.n	8000bfe <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bf4:	f023 0206 	bic.w	r2, r3, #6
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	645a      	str	r2, [r3, #68]	@ 0x44
 8000bfc:	e002      	b.n	8000c04 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2200      	movs	r2, #0
 8000c02:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000c0c:	4b31      	ldr	r3, [pc, #196]	@ (8000cd4 <HAL_ADC_Start+0x194>)
 8000c0e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000c18:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d12a      	bne.n	8000c7c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	@ (8000cd8 <HAL_ADC_Start+0x198>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d015      	beq.n	8000c5c <HAL_ADC_Start+0x11c>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a29      	ldr	r2, [pc, #164]	@ (8000cdc <HAL_ADC_Start+0x19c>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d105      	bne.n	8000c46 <HAL_ADC_Start+0x106>
 8000c3a:	4b26      	ldr	r3, [pc, #152]	@ (8000cd4 <HAL_ADC_Start+0x194>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 031f 	and.w	r3, r3, #31
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00a      	beq.n	8000c5c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a25      	ldr	r2, [pc, #148]	@ (8000ce0 <HAL_ADC_Start+0x1a0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d136      	bne.n	8000cbe <HAL_ADC_Start+0x17e>
 8000c50:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <HAL_ADC_Start+0x194>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d130      	bne.n	8000cbe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d129      	bne.n	8000cbe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000c78:	609a      	str	r2, [r3, #8]
 8000c7a:	e020      	b.n	8000cbe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <HAL_ADC_Start+0x198>)
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d11b      	bne.n	8000cbe <HAL_ADC_Start+0x17e>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d114      	bne.n	8000cbe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	689a      	ldr	r2, [r3, #8]
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	e00b      	b.n	8000cbe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f043 0201 	orr.w	r2, r3, #1
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000cbe:	2300      	movs	r3, #0
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	20000000 	.word	0x20000000
 8000cd0:	431bde83 	.word	0x431bde83
 8000cd4:	40012300 	.word	0x40012300
 8000cd8:	40012000 	.word	0x40012000
 8000cdc:	40012100 	.word	0x40012100
 8000ce0:	40012200 	.word	0x40012200

08000ce4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d101      	bne.n	8000cfa <HAL_ADC_Stop+0x16>
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	e021      	b.n	8000d3e <HAL_ADC_Stop+0x5a>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	689a      	ldr	r2, [r3, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f022 0201 	bic.w	r2, r2, #1
 8000d10:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d109      	bne.n	8000d34 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d28:	f023 0301 	bic.w	r3, r3, #1
 8000d2c:	f043 0201 	orr.w	r2, r3, #1
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	b083      	sub	sp, #12
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	370c      	adds	r7, #12
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d101      	bne.n	8000d80 <HAL_ADC_ConfigChannel+0x1c>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e113      	b.n	8000fa8 <HAL_ADC_ConfigChannel+0x244>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b09      	cmp	r3, #9
 8000d8e:	d925      	bls.n	8000ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68d9      	ldr	r1, [r3, #12]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	3b1e      	subs	r3, #30
 8000da6:	2207      	movs	r2, #7
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43da      	mvns	r2, r3
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	400a      	ands	r2, r1
 8000db4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68d9      	ldr	r1, [r3, #12]
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	4603      	mov	r3, r0
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4403      	add	r3, r0
 8000dce:	3b1e      	subs	r3, #30
 8000dd0:	409a      	lsls	r2, r3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	430a      	orrs	r2, r1
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	e022      	b.n	8000e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6919      	ldr	r1, [r3, #16]
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	4613      	mov	r3, r2
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	4413      	add	r3, r2
 8000df0:	2207      	movs	r2, #7
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43da      	mvns	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	400a      	ands	r2, r1
 8000dfe:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6919      	ldr	r1, [r3, #16]
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	4618      	mov	r0, r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4403      	add	r3, r0
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d824      	bhi.n	8000e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	4613      	mov	r3, r2
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	4413      	add	r3, r2
 8000e3a:	3b05      	subs	r3, #5
 8000e3c:	221f      	movs	r2, #31
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	43da      	mvns	r2, r3
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	400a      	ands	r2, r1
 8000e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b29b      	uxth	r3, r3
 8000e58:	4618      	mov	r0, r3
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685a      	ldr	r2, [r3, #4]
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	3b05      	subs	r3, #5
 8000e66:	fa00 f203 	lsl.w	r2, r0, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e72:	e04c      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b0c      	cmp	r3, #12
 8000e7a:	d824      	bhi.n	8000ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	3b23      	subs	r3, #35	@ 0x23
 8000e8e:	221f      	movs	r2, #31
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43da      	mvns	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	400a      	ands	r2, r1
 8000e9c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3b23      	subs	r3, #35	@ 0x23
 8000eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	631a      	str	r2, [r3, #48]	@ 0x30
 8000ec4:	e023      	b.n	8000f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	4413      	add	r3, r2
 8000ed6:	3b41      	subs	r3, #65	@ 0x41
 8000ed8:	221f      	movs	r2, #31
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	400a      	ands	r2, r1
 8000ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685a      	ldr	r2, [r3, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	4413      	add	r3, r2
 8000f00:	3b41      	subs	r3, #65	@ 0x41
 8000f02:	fa00 f203 	lsl.w	r2, r0, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f0e:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <HAL_ADC_ConfigChannel+0x250>)
 8000f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a28      	ldr	r2, [pc, #160]	@ (8000fb8 <HAL_ADC_ConfigChannel+0x254>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d10f      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x1d8>
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b12      	cmp	r3, #18
 8000f22:	d10b      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb8 <HAL_ADC_ConfigChannel+0x254>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12b      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x23a>
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <HAL_ADC_ConfigChannel+0x258>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d003      	beq.n	8000f58 <HAL_ADC_ConfigChannel+0x1f4>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b11      	cmp	r3, #17
 8000f56:	d122      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <HAL_ADC_ConfigChannel+0x258>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d111      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f7a:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <HAL_ADC_ConfigChannel+0x25c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a11      	ldr	r2, [pc, #68]	@ (8000fc4 <HAL_ADC_ConfigChannel+0x260>)
 8000f80:	fba2 2303 	umull	r2, r3, r2, r3
 8000f84:	0c9a      	lsrs	r2, r3, #18
 8000f86:	4613      	mov	r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	4413      	add	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f90:	e002      	b.n	8000f98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f9      	bne.n	8000f92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	40012300 	.word	0x40012300
 8000fb8:	40012000 	.word	0x40012000
 8000fbc:	10000012 	.word	0x10000012
 8000fc0:	20000000 	.word	0x20000000
 8000fc4:	431bde83 	.word	0x431bde83

08000fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd0:	4b79      	ldr	r3, [pc, #484]	@ (80011b8 <ADC_Init+0x1f0>)
 8000fd2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	691b      	ldr	r3, [r3, #16]
 8001008:	021a      	lsls	r2, r3, #8
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6859      	ldr	r1, [r3, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689a      	ldr	r2, [r3, #8]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	6899      	ldr	r1, [r3, #8]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105a:	4a58      	ldr	r2, [pc, #352]	@ (80011bc <ADC_Init+0x1f4>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d022      	beq.n	80010a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800106e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	6899      	ldr	r1, [r3, #8]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6899      	ldr	r1, [r3, #8]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	e00f      	b.n	80010c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	689a      	ldr	r2, [r3, #8]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80010c4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f022 0202 	bic.w	r2, r2, #2
 80010d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	6899      	ldr	r1, [r3, #8]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7e1b      	ldrb	r3, [r3, #24]
 80010e0:	005a      	lsls	r2, r3, #1
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d01b      	beq.n	800112c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001102:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6859      	ldr	r1, [r3, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800111e:	3b01      	subs	r3, #1
 8001120:	035a      	lsls	r2, r3, #13
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	e007      	b.n	800113c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	685a      	ldr	r2, [r3, #4]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800113a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800114a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	69db      	ldr	r3, [r3, #28]
 8001156:	3b01      	subs	r3, #1
 8001158:	051a      	lsls	r2, r3, #20
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	430a      	orrs	r2, r1
 8001160:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689a      	ldr	r2, [r3, #8]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	6899      	ldr	r1, [r3, #8]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800117e:	025a      	lsls	r2, r3, #9
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	689a      	ldr	r2, [r3, #8]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	029a      	lsls	r2, r3, #10
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	609a      	str	r2, [r3, #8]
}
 80011ac:	bf00      	nop
 80011ae:	3714      	adds	r7, #20
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40012300 	.word	0x40012300
 80011bc:	0f000001 	.word	0x0f000001

080011c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d6:	68ba      	ldr	r2, [r7, #8]
 80011d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011dc:	4013      	ands	r3, r2
 80011de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f2:	4a04      	ldr	r2, [pc, #16]	@ (8001204 <__NVIC_SetPriorityGrouping+0x44>)
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	60d3      	str	r3, [r2, #12]
}
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800120c:	4b04      	ldr	r3, [pc, #16]	@ (8001220 <__NVIC_GetPriorityGrouping+0x18>)
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	0a1b      	lsrs	r3, r3, #8
 8001212:	f003 0307 	and.w	r3, r3, #7
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	@ (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	@ (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	@ 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	@ 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
	...

080012e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3b01      	subs	r3, #1
 80012ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012f0:	d301      	bcc.n	80012f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f2:	2301      	movs	r3, #1
 80012f4:	e00f      	b.n	8001316 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001320 <SysTick_Config+0x40>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	3b01      	subs	r3, #1
 80012fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fe:	210f      	movs	r1, #15
 8001300:	f04f 30ff 	mov.w	r0, #4294967295
 8001304:	f7ff ff8e 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001308:	4b05      	ldr	r3, [pc, #20]	@ (8001320 <SysTick_Config+0x40>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <SysTick_Config+0x40>)
 8001310:	2207      	movs	r2, #7
 8001312:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001314:	2300      	movs	r3, #0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	e000e010 	.word	0xe000e010

08001324 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f7ff ff47 	bl	80011c0 <__NVIC_SetPriorityGrouping>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	4603      	mov	r3, r0
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001348:	2300      	movs	r3, #0
 800134a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800134c:	f7ff ff5c 	bl	8001208 <__NVIC_GetPriorityGrouping>
 8001350:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	68b9      	ldr	r1, [r7, #8]
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff ff8e 	bl	8001278 <NVIC_EncodePriority>
 800135c:	4602      	mov	r2, r0
 800135e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001362:	4611      	mov	r1, r2
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff ff5d 	bl	8001224 <__NVIC_SetPriority>
}
 800136a:	bf00      	nop
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ffb0 	bl	80012e0 <SysTick_Config>
 8001380:	4603      	mov	r3, r0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	@ 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e165      	b.n	8001674 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013a8:	2201      	movs	r2, #1
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa02 f303 	lsl.w	r3, r2, r3
 80013b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	f040 8154 	bne.w	800166e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 0303 	and.w	r3, r3, #3
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d005      	beq.n	80013de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d130      	bne.n	8001440 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	2203      	movs	r2, #3
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001414:	2201      	movs	r2, #1
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4013      	ands	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	091b      	lsrs	r3, r3, #4
 800142a:	f003 0201 	and.w	r2, r3, #1
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4313      	orrs	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f003 0303 	and.w	r3, r3, #3
 8001448:	2b03      	cmp	r3, #3
 800144a:	d017      	beq.n	800147c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f003 0303 	and.w	r3, r3, #3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d123      	bne.n	80014d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001494:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	220f      	movs	r2, #15
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	43db      	mvns	r3, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4013      	ands	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	08da      	lsrs	r2, r3, #3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3208      	adds	r2, #8
 80014ca:	69b9      	ldr	r1, [r7, #24]
 80014cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0203 	and.w	r2, r3, #3
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	fa02 f303 	lsl.w	r3, r2, r3
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80ae 	beq.w	800166e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b5d      	ldr	r3, [pc, #372]	@ (800168c <HAL_GPIO_Init+0x300>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151a:	4a5c      	ldr	r2, [pc, #368]	@ (800168c <HAL_GPIO_Init+0x300>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001520:	6453      	str	r3, [r2, #68]	@ 0x44
 8001522:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <HAL_GPIO_Init+0x300>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800152e:	4a58      	ldr	r2, [pc, #352]	@ (8001690 <HAL_GPIO_Init+0x304>)
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3302      	adds	r3, #2
 8001536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	220f      	movs	r2, #15
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4013      	ands	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a4f      	ldr	r2, [pc, #316]	@ (8001694 <HAL_GPIO_Init+0x308>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d025      	beq.n	80015a6 <HAL_GPIO_Init+0x21a>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a4e      	ldr	r2, [pc, #312]	@ (8001698 <HAL_GPIO_Init+0x30c>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d01f      	beq.n	80015a2 <HAL_GPIO_Init+0x216>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4d      	ldr	r2, [pc, #308]	@ (800169c <HAL_GPIO_Init+0x310>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d019      	beq.n	800159e <HAL_GPIO_Init+0x212>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4c      	ldr	r2, [pc, #304]	@ (80016a0 <HAL_GPIO_Init+0x314>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_GPIO_Init+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a4b      	ldr	r2, [pc, #300]	@ (80016a4 <HAL_GPIO_Init+0x318>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d00d      	beq.n	8001596 <HAL_GPIO_Init+0x20a>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4a      	ldr	r2, [pc, #296]	@ (80016a8 <HAL_GPIO_Init+0x31c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d007      	beq.n	8001592 <HAL_GPIO_Init+0x206>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a49      	ldr	r2, [pc, #292]	@ (80016ac <HAL_GPIO_Init+0x320>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_GPIO_Init+0x202>
 800158a:	2306      	movs	r3, #6
 800158c:	e00c      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800158e:	2307      	movs	r3, #7
 8001590:	e00a      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 8001592:	2305      	movs	r3, #5
 8001594:	e008      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 8001596:	2304      	movs	r3, #4
 8001598:	e006      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800159a:	2303      	movs	r3, #3
 800159c:	e004      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 800159e:	2302      	movs	r3, #2
 80015a0:	e002      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e000      	b.n	80015a8 <HAL_GPIO_Init+0x21c>
 80015a6:	2300      	movs	r3, #0
 80015a8:	69fa      	ldr	r2, [r7, #28]
 80015aa:	f002 0203 	and.w	r2, r2, #3
 80015ae:	0092      	lsls	r2, r2, #2
 80015b0:	4093      	lsls	r3, r2
 80015b2:	69ba      	ldr	r2, [r7, #24]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015b8:	4935      	ldr	r1, [pc, #212]	@ (8001690 <HAL_GPIO_Init+0x304>)
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3302      	adds	r3, #2
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015c6:	4b3a      	ldr	r3, [pc, #232]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4013      	ands	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ea:	4a31      	ldr	r2, [pc, #196]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015f0:	4b2f      	ldr	r3, [pc, #188]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001614:	4a26      	ldr	r2, [pc, #152]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 8001616:	69bb      	ldr	r3, [r7, #24]
 8001618:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800161a:	4b25      	ldr	r3, [pc, #148]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	43db      	mvns	r3, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4013      	ands	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800163e:	4a1c      	ldr	r2, [pc, #112]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	43db      	mvns	r3, r3
 800164e:	69ba      	ldr	r2, [r7, #24]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d003      	beq.n	8001668 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001668:	4a11      	ldr	r2, [pc, #68]	@ (80016b0 <HAL_GPIO_Init+0x324>)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3301      	adds	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	2b0f      	cmp	r3, #15
 8001678:	f67f ae96 	bls.w	80013a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800167c:	bf00      	nop
 800167e:	bf00      	nop
 8001680:	3724      	adds	r7, #36	@ 0x24
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
 800168a:	bf00      	nop
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0cc      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b68      	ldr	r3, [pc, #416]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d90c      	bls.n	8001724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b65      	ldr	r3, [pc, #404]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b63      	ldr	r3, [pc, #396]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a58      	ldr	r2, [pc, #352]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001746:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a52      	ldr	r2, [pc, #328]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800175e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b50      	ldr	r3, [pc, #320]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d044      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d119      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b3f      	ldr	r3, [pc, #252]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e06f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3b      	ldr	r3, [pc, #236]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e067      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4934      	ldr	r1, [pc, #208]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff f962 	bl	8000aa0 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff f95e 	bl	8000aa0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e04f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2b      	ldr	r3, [pc, #172]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b25      	ldr	r3, [pc, #148]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d20c      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b22      	ldr	r3, [pc, #136]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b20      	ldr	r3, [pc, #128]	@ (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185a:	4b12      	ldr	r3, [pc, #72]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800186e:	f000 f821 	bl	80018b4 <HAL_RCC_GetSysClockFreq>
 8001872:	4602      	mov	r2, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	@ (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	490a      	ldr	r1, [pc, #40]	@ (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	5ccb      	ldrb	r3, [r1, r3]
 8001882:	fa22 f303 	lsr.w	r3, r2, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	@ (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff f8c2 	bl	8000a18 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00
 80018a4:	40023800 	.word	0x40023800
 80018a8:	080022c0 	.word	0x080022c0
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018b8:	b0ae      	sub	sp, #184	@ 0xb8
 80018ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018bc:	2300      	movs	r3, #0
 80018be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80018c2:	2300      	movs	r3, #0
 80018c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018da:	4bcb      	ldr	r3, [pc, #812]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	f003 030c 	and.w	r3, r3, #12
 80018e2:	2b0c      	cmp	r3, #12
 80018e4:	f200 8206 	bhi.w	8001cf4 <HAL_RCC_GetSysClockFreq+0x440>
 80018e8:	a201      	add	r2, pc, #4	@ (adr r2, 80018f0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001925 	.word	0x08001925
 80018f4:	08001cf5 	.word	0x08001cf5
 80018f8:	08001cf5 	.word	0x08001cf5
 80018fc:	08001cf5 	.word	0x08001cf5
 8001900:	0800192d 	.word	0x0800192d
 8001904:	08001cf5 	.word	0x08001cf5
 8001908:	08001cf5 	.word	0x08001cf5
 800190c:	08001cf5 	.word	0x08001cf5
 8001910:	08001935 	.word	0x08001935
 8001914:	08001cf5 	.word	0x08001cf5
 8001918:	08001cf5 	.word	0x08001cf5
 800191c:	08001cf5 	.word	0x08001cf5
 8001920:	08001b25 	.word	0x08001b25
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4bb9      	ldr	r3, [pc, #740]	@ (8001c0c <HAL_RCC_GetSysClockFreq+0x358>)
 8001926:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800192a:	e1e7      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4bb8      	ldr	r3, [pc, #736]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x35c>)
 800192e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001932:	e1e3      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001934:	4bb4      	ldr	r3, [pc, #720]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800193c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001940:	4bb1      	ldr	r3, [pc, #708]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d071      	beq.n	8001a30 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800194c:	4bae      	ldr	r3, [pc, #696]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	2200      	movs	r2, #0
 8001954:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001958:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800195c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001964:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001968:	2300      	movs	r3, #0
 800196a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800196e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4621      	mov	r1, r4
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	647b      	str	r3, [r7, #68]	@ 0x44
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80019a4:	4649      	mov	r1, r9
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	4641      	mov	r1, r8
 80019aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ae:	4641      	mov	r1, r8
 80019b0:	018a      	lsls	r2, r1, #6
 80019b2:	4641      	mov	r1, r8
 80019b4:	1a51      	subs	r1, r2, r1
 80019b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019b8:	4649      	mov	r1, r9
 80019ba:	eb63 0301 	sbc.w	r3, r3, r1
 80019be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019c0:	f04f 0200 	mov.w	r2, #0
 80019c4:	f04f 0300 	mov.w	r3, #0
 80019c8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80019cc:	4649      	mov	r1, r9
 80019ce:	00cb      	lsls	r3, r1, #3
 80019d0:	4641      	mov	r1, r8
 80019d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80019d6:	4641      	mov	r1, r8
 80019d8:	00ca      	lsls	r2, r1, #3
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	4603      	mov	r3, r0
 80019e0:	4622      	mov	r2, r4
 80019e2:	189b      	adds	r3, r3, r2
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80019e6:	462b      	mov	r3, r5
 80019e8:	460a      	mov	r2, r1
 80019ea:	eb42 0303 	adc.w	r3, r2, r3
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019fc:	4629      	mov	r1, r5
 80019fe:	024b      	lsls	r3, r1, #9
 8001a00:	4621      	mov	r1, r4
 8001a02:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a06:	4621      	mov	r1, r4
 8001a08:	024a      	lsls	r2, r1, #9
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a12:	2200      	movs	r2, #0
 8001a14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a1c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a20:	f7fe fbf0 	bl	8000204 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a2e:	e067      	b.n	8001b00 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a30:	4b75      	ldr	r3, [pc, #468]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	099b      	lsrs	r3, r3, #6
 8001a36:	2200      	movs	r2, #0
 8001a38:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a3c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001a40:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a48:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a4e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a52:	4622      	mov	r2, r4
 8001a54:	462b      	mov	r3, r5
 8001a56:	f04f 0000 	mov.w	r0, #0
 8001a5a:	f04f 0100 	mov.w	r1, #0
 8001a5e:	0159      	lsls	r1, r3, #5
 8001a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a64:	0150      	lsls	r0, r2, #5
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	1a51      	subs	r1, r2, r1
 8001a6e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001a70:	4629      	mov	r1, r5
 8001a72:	eb63 0301 	sbc.w	r3, r3, r1
 8001a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001a84:	4649      	mov	r1, r9
 8001a86:	018b      	lsls	r3, r1, #6
 8001a88:	4641      	mov	r1, r8
 8001a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a8e:	4641      	mov	r1, r8
 8001a90:	018a      	lsls	r2, r1, #6
 8001a92:	4641      	mov	r1, r8
 8001a94:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a98:	4649      	mov	r1, r9
 8001a9a:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aaa:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ab2:	4692      	mov	sl, r2
 8001ab4:	469b      	mov	fp, r3
 8001ab6:	4623      	mov	r3, r4
 8001ab8:	eb1a 0303 	adds.w	r3, sl, r3
 8001abc:	623b      	str	r3, [r7, #32]
 8001abe:	462b      	mov	r3, r5
 8001ac0:	eb4b 0303 	adc.w	r3, fp, r3
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	f04f 0300 	mov.w	r3, #0
 8001ace:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	028b      	lsls	r3, r1, #10
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001adc:	4621      	mov	r1, r4
 8001ade:	028a      	lsls	r2, r1, #10
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ae8:	2200      	movs	r2, #0
 8001aea:	673b      	str	r3, [r7, #112]	@ 0x70
 8001aec:	677a      	str	r2, [r7, #116]	@ 0x74
 8001aee:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001af2:	f7fe fb87 	bl	8000204 <__aeabi_uldivmod>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4613      	mov	r3, r2
 8001afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b00:	4b41      	ldr	r3, [pc, #260]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	0c1b      	lsrs	r3, r3, #16
 8001b06:	f003 0303 	and.w	r3, r3, #3
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001b12:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b1e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b22:	e0eb      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b38      	ldr	r3, [pc, #224]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b2c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b30:	4b35      	ldr	r3, [pc, #212]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d06b      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3c:	4b32      	ldr	r3, [pc, #200]	@ (8001c08 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	099b      	lsrs	r3, r3, #6
 8001b42:	2200      	movs	r2, #0
 8001b44:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b46:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b50:	2300      	movs	r3, #0
 8001b52:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b54:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b58:	4622      	mov	r2, r4
 8001b5a:	462b      	mov	r3, r5
 8001b5c:	f04f 0000 	mov.w	r0, #0
 8001b60:	f04f 0100 	mov.w	r1, #0
 8001b64:	0159      	lsls	r1, r3, #5
 8001b66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b6a:	0150      	lsls	r0, r2, #5
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4621      	mov	r1, r4
 8001b72:	1a51      	subs	r1, r2, r1
 8001b74:	61b9      	str	r1, [r7, #24]
 8001b76:	4629      	mov	r1, r5
 8001b78:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	f04f 0200 	mov.w	r2, #0
 8001b82:	f04f 0300 	mov.w	r3, #0
 8001b86:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001b8a:	4659      	mov	r1, fp
 8001b8c:	018b      	lsls	r3, r1, #6
 8001b8e:	4651      	mov	r1, sl
 8001b90:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b94:	4651      	mov	r1, sl
 8001b96:	018a      	lsls	r2, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9e:	4659      	mov	r1, fp
 8001ba0:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	f04f 0300 	mov.w	r3, #0
 8001bac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bb0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb8:	4690      	mov	r8, r2
 8001bba:	4699      	mov	r9, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	eb18 0303 	adds.w	r3, r8, r3
 8001bc2:	613b      	str	r3, [r7, #16]
 8001bc4:	462b      	mov	r3, r5
 8001bc6:	eb49 0303 	adc.w	r3, r9, r3
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001bd8:	4629      	mov	r1, r5
 8001bda:	024b      	lsls	r3, r1, #9
 8001bdc:	4621      	mov	r1, r4
 8001bde:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be2:	4621      	mov	r1, r4
 8001be4:	024a      	lsls	r2, r1, #9
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bee:	2200      	movs	r2, #0
 8001bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bf2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001bf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001bf8:	f7fe fb04 	bl	8000204 <__aeabi_uldivmod>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4613      	mov	r3, r2
 8001c02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c06:	e065      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x420>
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	00f42400 	.word	0x00f42400
 8001c10:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c14:	4b3d      	ldr	r3, [pc, #244]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x458>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	099b      	lsrs	r3, r3, #6
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	4611      	mov	r1, r2
 8001c20:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c24:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c26:	2300      	movs	r3, #0
 8001c28:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c2a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c2e:	4642      	mov	r2, r8
 8001c30:	464b      	mov	r3, r9
 8001c32:	f04f 0000 	mov.w	r0, #0
 8001c36:	f04f 0100 	mov.w	r1, #0
 8001c3a:	0159      	lsls	r1, r3, #5
 8001c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c40:	0150      	lsls	r0, r2, #5
 8001c42:	4602      	mov	r2, r0
 8001c44:	460b      	mov	r3, r1
 8001c46:	4641      	mov	r1, r8
 8001c48:	1a51      	subs	r1, r2, r1
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	4649      	mov	r1, r9
 8001c4e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001c60:	4659      	mov	r1, fp
 8001c62:	018b      	lsls	r3, r1, #6
 8001c64:	4651      	mov	r1, sl
 8001c66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c6a:	4651      	mov	r1, sl
 8001c6c:	018a      	lsls	r2, r1, #6
 8001c6e:	4651      	mov	r1, sl
 8001c70:	1a54      	subs	r4, r2, r1
 8001c72:	4659      	mov	r1, fp
 8001c74:	eb63 0501 	sbc.w	r5, r3, r1
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	00eb      	lsls	r3, r5, #3
 8001c82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c86:	00e2      	lsls	r2, r4, #3
 8001c88:	4614      	mov	r4, r2
 8001c8a:	461d      	mov	r5, r3
 8001c8c:	4643      	mov	r3, r8
 8001c8e:	18e3      	adds	r3, r4, r3
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	464b      	mov	r3, r9
 8001c94:	eb45 0303 	adc.w	r3, r5, r3
 8001c98:	607b      	str	r3, [r7, #4]
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ca6:	4629      	mov	r1, r5
 8001ca8:	028b      	lsls	r3, r1, #10
 8001caa:	4621      	mov	r1, r4
 8001cac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	028a      	lsls	r2, r1, #10
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001cc0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cc2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001cc6:	f7fe fa9d 	bl	8000204 <__aeabi_uldivmod>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4613      	mov	r3, r2
 8001cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001cd4:	4b0d      	ldr	r3, [pc, #52]	@ (8001d0c <HAL_RCC_GetSysClockFreq+0x458>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	0f1b      	lsrs	r3, r3, #28
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001ce6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cf2:	e003      	b.n	8001cfc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001cf6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001cfa:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	37b8      	adds	r7, #184	@ 0xb8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	00f42400 	.word	0x00f42400

08001d14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e28d      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8083 	beq.w	8001e3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d34:	4b94      	ldr	r3, [pc, #592]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 030c 	and.w	r3, r3, #12
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d019      	beq.n	8001d74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d40:	4b91      	ldr	r3, [pc, #580]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
        || \
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d58:	d00c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d5a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001d62:	2b0c      	cmp	r3, #12
 8001d64:	d112      	bne.n	8001d8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d66:	4b88      	ldr	r3, [pc, #544]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d72:	d10b      	bne.n	8001d8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	4b84      	ldr	r3, [pc, #528]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d05b      	beq.n	8001e38 <HAL_RCC_OscConfig+0x124>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d157      	bne.n	8001e38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e25a      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x90>
 8001d96:	4b7c      	ldr	r3, [pc, #496]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a7b      	ldr	r2, [pc, #492]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e01d      	b.n	8001de0 <HAL_RCC_OscConfig+0xcc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0xb4>
 8001dae:	4b76      	ldr	r3, [pc, #472]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a75      	ldr	r2, [pc, #468]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001db4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b73      	ldr	r3, [pc, #460]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a72      	ldr	r2, [pc, #456]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e00b      	b.n	8001de0 <HAL_RCC_OscConfig+0xcc>
 8001dc8:	4b6f      	ldr	r3, [pc, #444]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a6e      	ldr	r2, [pc, #440]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	4b6c      	ldr	r3, [pc, #432]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a6b      	ldr	r2, [pc, #428]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d013      	beq.n	8001e10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de8:	f7fe fe5a 	bl	8000aa0 <HAL_GetTick>
 8001dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dee:	e008      	b.n	8001e02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001df0:	f7fe fe56 	bl	8000aa0 <HAL_GetTick>
 8001df4:	4602      	mov	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	@ 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e21f      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	4b61      	ldr	r3, [pc, #388]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCC_OscConfig+0xdc>
 8001e0e:	e014      	b.n	8001e3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e10:	f7fe fe46 	bl	8000aa0 <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e18:	f7fe fe42 	bl	8000aa0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b64      	cmp	r3, #100	@ 0x64
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e20b      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	4b57      	ldr	r3, [pc, #348]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x104>
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d06f      	beq.n	8001f26 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001e46:	4b50      	ldr	r3, [pc, #320]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d017      	beq.n	8001e82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e52:	4b4d      	ldr	r3, [pc, #308]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e54:	689b      	ldr	r3, [r3, #8]
 8001e56:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e5a:	2b08      	cmp	r3, #8
 8001e5c:	d105      	bne.n	8001e6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e6a:	4b47      	ldr	r3, [pc, #284]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d11c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e76:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d116      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e82:	4b41      	ldr	r3, [pc, #260]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d005      	beq.n	8001e9a <HAL_RCC_OscConfig+0x186>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	68db      	ldr	r3, [r3, #12]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e1d3      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4937      	ldr	r1, [pc, #220]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eae:	e03a      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d020      	beq.n	8001efa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb8:	4b34      	ldr	r3, [pc, #208]	@ (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe fdef 	bl	8000aa0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec6:	f7fe fdeb 	bl	8000aa0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e1b4      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	4b2b      	ldr	r3, [pc, #172]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d0f0      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee4:	4b28      	ldr	r3, [pc, #160]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4925      	ldr	r1, [pc, #148]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	600b      	str	r3, [r1, #0]
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efa:	4b24      	ldr	r3, [pc, #144]	@ (8001f8c <HAL_RCC_OscConfig+0x278>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe fdce 	bl	8000aa0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f08:	f7fe fdca 	bl	8000aa0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e193      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0308 	and.w	r3, r3, #8
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d036      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d016      	beq.n	8001f68 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3a:	4b15      	ldr	r3, [pc, #84]	@ (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f40:	f7fe fdae 	bl	8000aa0 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f48:	f7fe fdaa 	bl	8000aa0 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e173      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d0f0      	beq.n	8001f48 <HAL_RCC_OscConfig+0x234>
 8001f66:	e01b      	b.n	8001fa0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <HAL_RCC_OscConfig+0x27c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6e:	f7fe fd97 	bl	8000aa0 <HAL_GetTick>
 8001f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f74:	e00e      	b.n	8001f94 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f76:	f7fe fd93 	bl	8000aa0 <HAL_GetTick>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d907      	bls.n	8001f94 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001f84:	2303      	movs	r3, #3
 8001f86:	e15c      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	42470000 	.word	0x42470000
 8001f90:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f94:	4b8a      	ldr	r3, [pc, #552]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d1ea      	bne.n	8001f76 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	f000 8097 	beq.w	80020dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fb2:	4b83      	ldr	r3, [pc, #524]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60bb      	str	r3, [r7, #8]
 8001fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fce:	4b7c      	ldr	r3, [pc, #496]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fde:	4b79      	ldr	r3, [pc, #484]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d118      	bne.n	800201c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fea:	4b76      	ldr	r3, [pc, #472]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a75      	ldr	r2, [pc, #468]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8001ff0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe fd53 	bl	8000aa0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ffe:	f7fe fd4f 	bl	8000aa0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e118      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002010:	4b6c      	ldr	r3, [pc, #432]	@ (80021c4 <HAL_RCC_OscConfig+0x4b0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d106      	bne.n	8002032 <HAL_RCC_OscConfig+0x31e>
 8002024:	4b66      	ldr	r3, [pc, #408]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002028:	4a65      	ldr	r2, [pc, #404]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002030:	e01c      	b.n	800206c <HAL_RCC_OscConfig+0x358>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	2b05      	cmp	r3, #5
 8002038:	d10c      	bne.n	8002054 <HAL_RCC_OscConfig+0x340>
 800203a:	4b61      	ldr	r3, [pc, #388]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800203e:	4a60      	ldr	r2, [pc, #384]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002040:	f043 0304 	orr.w	r3, r3, #4
 8002044:	6713      	str	r3, [r2, #112]	@ 0x70
 8002046:	4b5e      	ldr	r3, [pc, #376]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800204a:	4a5d      	ldr	r2, [pc, #372]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6713      	str	r3, [r2, #112]	@ 0x70
 8002052:	e00b      	b.n	800206c <HAL_RCC_OscConfig+0x358>
 8002054:	4b5a      	ldr	r3, [pc, #360]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002056:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002058:	4a59      	ldr	r2, [pc, #356]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	f023 0301 	bic.w	r3, r3, #1
 800205e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002060:	4b57      	ldr	r3, [pc, #348]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002064:	4a56      	ldr	r2, [pc, #344]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	f023 0304 	bic.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d015      	beq.n	80020a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7fe fd14 	bl	8000aa0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800207a:	e00a      	b.n	8002092 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7fe fd10 	bl	8000aa0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800208a:	4293      	cmp	r3, r2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e0d7      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002092:	4b4b      	ldr	r3, [pc, #300]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0ee      	beq.n	800207c <HAL_RCC_OscConfig+0x368>
 800209e:	e014      	b.n	80020ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a0:	f7fe fcfe 	bl	8000aa0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020a6:	e00a      	b.n	80020be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a8:	f7fe fcfa 	bl	8000aa0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e0c1      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020be:	4b40      	ldr	r3, [pc, #256]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ee      	bne.n	80020a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020ca:	7dfb      	ldrb	r3, [r7, #23]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d105      	bne.n	80020dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d0:	4b3b      	ldr	r3, [pc, #236]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	4a3a      	ldr	r2, [pc, #232]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80ad 	beq.w	8002240 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020e6:	4b36      	ldr	r3, [pc, #216]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f003 030c 	and.w	r3, r3, #12
 80020ee:	2b08      	cmp	r3, #8
 80020f0:	d060      	beq.n	80021b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d145      	bne.n	8002186 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020fa:	4b33      	ldr	r3, [pc, #204]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002100:	f7fe fcce 	bl	8000aa0 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe fcca 	bl	8000aa0 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e093      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800211a:	4b29      	ldr	r3, [pc, #164]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1f0      	bne.n	8002108 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002134:	019b      	lsls	r3, r3, #6
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	085b      	lsrs	r3, r3, #1
 800213e:	3b01      	subs	r3, #1
 8002140:	041b      	lsls	r3, r3, #16
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002148:	061b      	lsls	r3, r3, #24
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	071b      	lsls	r3, r3, #28
 8002152:	491b      	ldr	r1, [pc, #108]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002158:	4b1b      	ldr	r3, [pc, #108]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 800215a:	2201      	movs	r2, #1
 800215c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800215e:	f7fe fc9f 	bl	8000aa0 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe fc9b 	bl	8000aa0 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e064      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002178:	4b11      	ldr	r3, [pc, #68]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	d0f0      	beq.n	8002166 <HAL_RCC_OscConfig+0x452>
 8002184:	e05c      	b.n	8002240 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <HAL_RCC_OscConfig+0x4b4>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fc88 	bl	8000aa0 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002194:	f7fe fc84 	bl	8000aa0 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b02      	cmp	r3, #2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e04d      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021a6:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_RCC_OscConfig+0x4ac>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f0      	bne.n	8002194 <HAL_RCC_OscConfig+0x480>
 80021b2:	e045      	b.n	8002240 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e040      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40007000 	.word	0x40007000
 80021c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021cc:	4b1f      	ldr	r3, [pc, #124]	@ (800224c <HAL_RCC_OscConfig+0x538>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d030      	beq.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d129      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d122      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021f6:	68fa      	ldr	r2, [r7, #12]
 80021f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021fc:	4013      	ands	r3, r2
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002202:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002204:	4293      	cmp	r3, r2
 8002206:	d119      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002212:	085b      	lsrs	r3, r3, #1
 8002214:	3b01      	subs	r3, #1
 8002216:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002218:	429a      	cmp	r2, r3
 800221a:	d10f      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002226:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002228:	429a      	cmp	r2, r3
 800222a:	d107      	bne.n	800223c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002238:	429a      	cmp	r2, r3
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800

08002250 <memset>:
 8002250:	4402      	add	r2, r0
 8002252:	4603      	mov	r3, r0
 8002254:	4293      	cmp	r3, r2
 8002256:	d100      	bne.n	800225a <memset+0xa>
 8002258:	4770      	bx	lr
 800225a:	f803 1b01 	strb.w	r1, [r3], #1
 800225e:	e7f9      	b.n	8002254 <memset+0x4>

08002260 <__libc_init_array>:
 8002260:	b570      	push	{r4, r5, r6, lr}
 8002262:	4d0d      	ldr	r5, [pc, #52]	@ (8002298 <__libc_init_array+0x38>)
 8002264:	4c0d      	ldr	r4, [pc, #52]	@ (800229c <__libc_init_array+0x3c>)
 8002266:	1b64      	subs	r4, r4, r5
 8002268:	10a4      	asrs	r4, r4, #2
 800226a:	2600      	movs	r6, #0
 800226c:	42a6      	cmp	r6, r4
 800226e:	d109      	bne.n	8002284 <__libc_init_array+0x24>
 8002270:	4d0b      	ldr	r5, [pc, #44]	@ (80022a0 <__libc_init_array+0x40>)
 8002272:	4c0c      	ldr	r4, [pc, #48]	@ (80022a4 <__libc_init_array+0x44>)
 8002274:	f000 f818 	bl	80022a8 <_init>
 8002278:	1b64      	subs	r4, r4, r5
 800227a:	10a4      	asrs	r4, r4, #2
 800227c:	2600      	movs	r6, #0
 800227e:	42a6      	cmp	r6, r4
 8002280:	d105      	bne.n	800228e <__libc_init_array+0x2e>
 8002282:	bd70      	pop	{r4, r5, r6, pc}
 8002284:	f855 3b04 	ldr.w	r3, [r5], #4
 8002288:	4798      	blx	r3
 800228a:	3601      	adds	r6, #1
 800228c:	e7ee      	b.n	800226c <__libc_init_array+0xc>
 800228e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002292:	4798      	blx	r3
 8002294:	3601      	adds	r6, #1
 8002296:	e7f2      	b.n	800227e <__libc_init_array+0x1e>
 8002298:	080022d8 	.word	0x080022d8
 800229c:	080022d8 	.word	0x080022d8
 80022a0:	080022d8 	.word	0x080022d8
 80022a4:	080022dc 	.word	0x080022dc

080022a8 <_init>:
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022aa:	bf00      	nop
 80022ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ae:	bc08      	pop	{r3}
 80022b0:	469e      	mov	lr, r3
 80022b2:	4770      	bx	lr

080022b4 <_fini>:
 80022b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b6:	bf00      	nop
 80022b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ba:	bc08      	pop	{r3}
 80022bc:	469e      	mov	lr, r3
 80022be:	4770      	bx	lr
