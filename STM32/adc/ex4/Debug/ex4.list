
ex4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003178  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003340  08003340  00004340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003358  08003358  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  08003358  08003358  00004358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003360  08003360  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003360  08003360  00004360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003364  08003364  00004364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003368  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  08003374  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  08003374  000050c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f02  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000171f  00000000  00000000  0000df3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  0000f660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005db  00000000  00000000  0000fe00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021692  00000000  00000000  000103db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2c6  00000000  00000000  00031a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d12ea  00000000  00000000  0003bd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010d01d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fac  00000000  00000000  0010d060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010f00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003328 	.word	0x08003328

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003328 	.word	0x08003328

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2f>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009ac:	bf24      	itt	cs
 80009ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009b6:	d90d      	bls.n	80009d4 <__aeabi_d2f+0x30>
 80009b8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009cc:	bf08      	it	eq
 80009ce:	f020 0001 	biceq.w	r0, r0, #1
 80009d2:	4770      	bx	lr
 80009d4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009d8:	d121      	bne.n	8000a1e <__aeabi_d2f+0x7a>
 80009da:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009de:	bfbc      	itt	lt
 80009e0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009e4:	4770      	bxlt	lr
 80009e6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ee:	f1c2 0218 	rsb	r2, r2, #24
 80009f2:	f1c2 0c20 	rsb	ip, r2, #32
 80009f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009fa:	fa20 f002 	lsr.w	r0, r0, r2
 80009fe:	bf18      	it	ne
 8000a00:	f040 0001 	orrne.w	r0, r0, #1
 8000a04:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a08:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a0c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a10:	ea40 000c 	orr.w	r0, r0, ip
 8000a14:	fa23 f302 	lsr.w	r3, r3, r2
 8000a18:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a1c:	e7cc      	b.n	80009b8 <__aeabi_d2f+0x14>
 8000a1e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a22:	d107      	bne.n	8000a34 <__aeabi_d2f+0x90>
 8000a24:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a28:	bf1e      	ittt	ne
 8000a2a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a2e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a32:	4770      	bxne	lr
 8000a34:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a38:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a3c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f000 b96a 	b.w	8000d30 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	9d08      	ldr	r5, [sp, #32]
 8000a7a:	460c      	mov	r4, r1
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d14e      	bne.n	8000b1e <__udivmoddi4+0xaa>
 8000a80:	4694      	mov	ip, r2
 8000a82:	458c      	cmp	ip, r1
 8000a84:	4686      	mov	lr, r0
 8000a86:	fab2 f282 	clz	r2, r2
 8000a8a:	d962      	bls.n	8000b52 <__udivmoddi4+0xde>
 8000a8c:	b14a      	cbz	r2, 8000aa2 <__udivmoddi4+0x2e>
 8000a8e:	f1c2 0320 	rsb	r3, r2, #32
 8000a92:	4091      	lsls	r1, r2
 8000a94:	fa20 f303 	lsr.w	r3, r0, r3
 8000a98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aa2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aa6:	fa1f f68c 	uxth.w	r6, ip
 8000aaa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000aae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ab2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aba:	fb04 f106 	mul.w	r1, r4, r6
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	d90a      	bls.n	8000ad8 <__udivmoddi4+0x64>
 8000ac2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ac6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aca:	f080 8112 	bcs.w	8000cf2 <__udivmoddi4+0x27e>
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	f240 810f 	bls.w	8000cf2 <__udivmoddi4+0x27e>
 8000ad4:	3c02      	subs	r4, #2
 8000ad6:	4463      	add	r3, ip
 8000ad8:	1a59      	subs	r1, r3, r1
 8000ada:	fa1f f38e 	uxth.w	r3, lr
 8000ade:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae2:	fb07 1110 	mls	r1, r7, r0, r1
 8000ae6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aea:	fb00 f606 	mul.w	r6, r0, r6
 8000aee:	429e      	cmp	r6, r3
 8000af0:	d90a      	bls.n	8000b08 <__udivmoddi4+0x94>
 8000af2:	eb1c 0303 	adds.w	r3, ip, r3
 8000af6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000afa:	f080 80fc 	bcs.w	8000cf6 <__udivmoddi4+0x282>
 8000afe:	429e      	cmp	r6, r3
 8000b00:	f240 80f9 	bls.w	8000cf6 <__udivmoddi4+0x282>
 8000b04:	4463      	add	r3, ip
 8000b06:	3802      	subs	r0, #2
 8000b08:	1b9b      	subs	r3, r3, r6
 8000b0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b0e:	2100      	movs	r1, #0
 8000b10:	b11d      	cbz	r5, 8000b1a <__udivmoddi4+0xa6>
 8000b12:	40d3      	lsrs	r3, r2
 8000b14:	2200      	movs	r2, #0
 8000b16:	e9c5 3200 	strd	r3, r2, [r5]
 8000b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d905      	bls.n	8000b2e <__udivmoddi4+0xba>
 8000b22:	b10d      	cbz	r5, 8000b28 <__udivmoddi4+0xb4>
 8000b24:	e9c5 0100 	strd	r0, r1, [r5]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4608      	mov	r0, r1
 8000b2c:	e7f5      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b2e:	fab3 f183 	clz	r1, r3
 8000b32:	2900      	cmp	r1, #0
 8000b34:	d146      	bne.n	8000bc4 <__udivmoddi4+0x150>
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	d302      	bcc.n	8000b40 <__udivmoddi4+0xcc>
 8000b3a:	4290      	cmp	r0, r2
 8000b3c:	f0c0 80f0 	bcc.w	8000d20 <__udivmoddi4+0x2ac>
 8000b40:	1a86      	subs	r6, r0, r2
 8000b42:	eb64 0303 	sbc.w	r3, r4, r3
 8000b46:	2001      	movs	r0, #1
 8000b48:	2d00      	cmp	r5, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__udivmoddi4+0xa6>
 8000b4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b50:	e7e3      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	f040 8090 	bne.w	8000c78 <__udivmoddi4+0x204>
 8000b58:	eba1 040c 	sub.w	r4, r1, ip
 8000b5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b60:	fa1f f78c 	uxth.w	r7, ip
 8000b64:	2101      	movs	r1, #1
 8000b66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b76:	fb07 f006 	mul.w	r0, r7, r6
 8000b7a:	4298      	cmp	r0, r3
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x11c>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x11a>
 8000b88:	4298      	cmp	r0, r3
 8000b8a:	f200 80cd 	bhi.w	8000d28 <__udivmoddi4+0x2b4>
 8000b8e:	4626      	mov	r6, r4
 8000b90:	1a1c      	subs	r4, r3, r0
 8000b92:	fa1f f38e 	uxth.w	r3, lr
 8000b96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ba2:	fb00 f707 	mul.w	r7, r0, r7
 8000ba6:	429f      	cmp	r7, r3
 8000ba8:	d908      	bls.n	8000bbc <__udivmoddi4+0x148>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bb2:	d202      	bcs.n	8000bba <__udivmoddi4+0x146>
 8000bb4:	429f      	cmp	r7, r3
 8000bb6:	f200 80b0 	bhi.w	8000d1a <__udivmoddi4+0x2a6>
 8000bba:	4620      	mov	r0, r4
 8000bbc:	1bdb      	subs	r3, r3, r7
 8000bbe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bc2:	e7a5      	b.n	8000b10 <__udivmoddi4+0x9c>
 8000bc4:	f1c1 0620 	rsb	r6, r1, #32
 8000bc8:	408b      	lsls	r3, r1
 8000bca:	fa22 f706 	lsr.w	r7, r2, r6
 8000bce:	431f      	orrs	r7, r3
 8000bd0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bd4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bd8:	ea43 030c 	orr.w	r3, r3, ip
 8000bdc:	40f4      	lsrs	r4, r6
 8000bde:	fa00 f801 	lsl.w	r8, r0, r1
 8000be2:	0c38      	lsrs	r0, r7, #16
 8000be4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000be8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bec:	fa1f fc87 	uxth.w	ip, r7
 8000bf0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bf4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bf8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bfc:	45a1      	cmp	r9, r4
 8000bfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000c02:	d90a      	bls.n	8000c1a <__udivmoddi4+0x1a6>
 8000c04:	193c      	adds	r4, r7, r4
 8000c06:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c0a:	f080 8084 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000c0e:	45a1      	cmp	r9, r4
 8000c10:	f240 8081 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000c14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c18:	443c      	add	r4, r7
 8000c1a:	eba4 0409 	sub.w	r4, r4, r9
 8000c1e:	fa1f f983 	uxth.w	r9, r3
 8000c22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c26:	fb00 4413 	mls	r4, r0, r3, r4
 8000c2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c32:	45a4      	cmp	ip, r4
 8000c34:	d907      	bls.n	8000c46 <__udivmoddi4+0x1d2>
 8000c36:	193c      	adds	r4, r7, r4
 8000c38:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c3c:	d267      	bcs.n	8000d0e <__udivmoddi4+0x29a>
 8000c3e:	45a4      	cmp	ip, r4
 8000c40:	d965      	bls.n	8000d0e <__udivmoddi4+0x29a>
 8000c42:	3b02      	subs	r3, #2
 8000c44:	443c      	add	r4, r7
 8000c46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c4e:	eba4 040c 	sub.w	r4, r4, ip
 8000c52:	429c      	cmp	r4, r3
 8000c54:	46ce      	mov	lr, r9
 8000c56:	469c      	mov	ip, r3
 8000c58:	d351      	bcc.n	8000cfe <__udivmoddi4+0x28a>
 8000c5a:	d04e      	beq.n	8000cfa <__udivmoddi4+0x286>
 8000c5c:	b155      	cbz	r5, 8000c74 <__udivmoddi4+0x200>
 8000c5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c62:	eb64 040c 	sbc.w	r4, r4, ip
 8000c66:	fa04 f606 	lsl.w	r6, r4, r6
 8000c6a:	40cb      	lsrs	r3, r1
 8000c6c:	431e      	orrs	r6, r3
 8000c6e:	40cc      	lsrs	r4, r1
 8000c70:	e9c5 6400 	strd	r6, r4, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	e750      	b.n	8000b1a <__udivmoddi4+0xa6>
 8000c78:	f1c2 0320 	rsb	r3, r2, #32
 8000c7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c84:	fa24 f303 	lsr.w	r3, r4, r3
 8000c88:	4094      	lsls	r4, r2
 8000c8a:	430c      	orrs	r4, r1
 8000c8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c94:	fa1f f78c 	uxth.w	r7, ip
 8000c98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000ca0:	0c23      	lsrs	r3, r4, #16
 8000ca2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca6:	fb00 f107 	mul.w	r1, r0, r7
 8000caa:	4299      	cmp	r1, r3
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x24c>
 8000cae:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cb6:	d22c      	bcs.n	8000d12 <__udivmoddi4+0x29e>
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d92a      	bls.n	8000d12 <__udivmoddi4+0x29e>
 8000cbc:	3802      	subs	r0, #2
 8000cbe:	4463      	add	r3, ip
 8000cc0:	1a5b      	subs	r3, r3, r1
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000cc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000ccc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cd0:	fb01 f307 	mul.w	r3, r1, r7
 8000cd4:	42a3      	cmp	r3, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x276>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ce0:	d213      	bcs.n	8000d0a <__udivmoddi4+0x296>
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	d911      	bls.n	8000d0a <__udivmoddi4+0x296>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4464      	add	r4, ip
 8000cea:	1ae4      	subs	r4, r4, r3
 8000cec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cf0:	e739      	b.n	8000b66 <__udivmoddi4+0xf2>
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	e6f0      	b.n	8000ad8 <__udivmoddi4+0x64>
 8000cf6:	4608      	mov	r0, r1
 8000cf8:	e706      	b.n	8000b08 <__udivmoddi4+0x94>
 8000cfa:	45c8      	cmp	r8, r9
 8000cfc:	d2ae      	bcs.n	8000c5c <__udivmoddi4+0x1e8>
 8000cfe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d02:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d06:	3801      	subs	r0, #1
 8000d08:	e7a8      	b.n	8000c5c <__udivmoddi4+0x1e8>
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7ed      	b.n	8000cea <__udivmoddi4+0x276>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	e799      	b.n	8000c46 <__udivmoddi4+0x1d2>
 8000d12:	4630      	mov	r0, r6
 8000d14:	e7d4      	b.n	8000cc0 <__udivmoddi4+0x24c>
 8000d16:	46d6      	mov	lr, sl
 8000d18:	e77f      	b.n	8000c1a <__udivmoddi4+0x1a6>
 8000d1a:	4463      	add	r3, ip
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	e74d      	b.n	8000bbc <__udivmoddi4+0x148>
 8000d20:	4606      	mov	r6, r0
 8000d22:	4623      	mov	r3, r4
 8000d24:	4608      	mov	r0, r1
 8000d26:	e70f      	b.n	8000b48 <__udivmoddi4+0xd4>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	e730      	b.n	8000b90 <__udivmoddi4+0x11c>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_idiv0>:
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	0000      	movs	r0, r0
	...

08000d38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d3c:	f000 fae2 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d40:	f000 f862 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d44:	f000 f94a 	bl	8000fdc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d48:	f000 f91e 	bl	8000f88 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d4c:	f000 f8ca 	bl	8000ee4 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start(&hadc1);
 8000d50:	4829      	ldr	r0, [pc, #164]	@ (8000df8 <main+0xc0>)
 8000d52:	f000 fbb1 	bl	80014b8 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d56:	2164      	movs	r1, #100	@ 0x64
 8000d58:	4827      	ldr	r0, [pc, #156]	@ (8000df8 <main+0xc0>)
 8000d5a:	f000 fcb2 	bl	80016c2 <HAL_ADC_PollForConversion>
	  analog=HAL_ADC_GetValue(&hadc1);
 8000d5e:	4826      	ldr	r0, [pc, #152]	@ (8000df8 <main+0xc0>)
 8000d60:	f000 fd3a 	bl	80017d8 <HAL_ADC_GetValue>
 8000d64:	4603      	mov	r3, r0
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b24      	ldr	r3, [pc, #144]	@ (8000dfc <main+0xc4>)
 8000d6a:	601a      	str	r2, [r3, #0]

	  HAL_ADC_Stop(&hadc1);
 8000d6c:	4822      	ldr	r0, [pc, #136]	@ (8000df8 <main+0xc0>)
 8000d6e:	f000 fc75 	bl	800165c <HAL_ADC_Stop>
	  val=(analog/4095.0)*3.3;
 8000d72:	4b22      	ldr	r3, [pc, #136]	@ (8000dfc <main+0xc4>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff fb98 	bl	80004ac <__aeabi_i2d>
 8000d7c:	a318      	add	r3, pc, #96	@ (adr r3, 8000de0 <main+0xa8>)
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f7ff fd27 	bl	80007d4 <__aeabi_ddiv>
 8000d86:	4602      	mov	r2, r0
 8000d88:	460b      	mov	r3, r1
 8000d8a:	4610      	mov	r0, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	a316      	add	r3, pc, #88	@ (adr r3, 8000de8 <main+0xb0>)
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f7ff fbf4 	bl	8000580 <__aeabi_dmul>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	460b      	mov	r3, r1
 8000d9c:	4610      	mov	r0, r2
 8000d9e:	4619      	mov	r1, r3
 8000da0:	f7ff fe00 	bl	80009a4 <__aeabi_d2f>
 8000da4:	4603      	mov	r3, r0
 8000da6:	4a16      	ldr	r2, [pc, #88]	@ (8000e00 <main+0xc8>)
 8000da8:	6013      	str	r3, [r2, #0]
	  a= val/0.01;
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <main+0xc8>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fb8e 	bl	80004d0 <__aeabi_f2d>
 8000db4:	a30e      	add	r3, pc, #56	@ (adr r3, 8000df0 <main+0xb8>)
 8000db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dba:	f7ff fd0b 	bl	80007d4 <__aeabi_ddiv>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff fded 	bl	80009a4 <__aeabi_d2f>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <main+0xcc>)
 8000dce:	6013      	str	r3, [r2, #0]
	  HAL_Delay(100);
 8000dd0:	2064      	movs	r0, #100	@ 0x64
 8000dd2:	f000 fb09 	bl	80013e8 <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8000dd6:	bf00      	nop
 8000dd8:	e7ba      	b.n	8000d50 <main+0x18>
 8000dda:	bf00      	nop
 8000ddc:	f3af 8000 	nop.w
 8000de0:	00000000 	.word	0x00000000
 8000de4:	40affe00 	.word	0x40affe00
 8000de8:	66666666 	.word	0x66666666
 8000dec:	400a6666 	.word	0x400a6666
 8000df0:	47ae147b 	.word	0x47ae147b
 8000df4:	3f847ae1 	.word	0x3f847ae1
 8000df8:	20000028 	.word	0x20000028
 8000dfc:	200000c0 	.word	0x200000c0
 8000e00:	200000b8 	.word	0x200000b8
 8000e04:	200000bc 	.word	0x200000bc

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	@ 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	2234      	movs	r2, #52	@ 0x34
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 fa5a 	bl	80032d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e34:	4a29      	ldr	r2, [pc, #164]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e3c:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <SystemClock_Config+0xd4>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	603b      	str	r3, [r7, #0]
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000e54:	4a22      	ldr	r2, [pc, #136]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <SystemClock_Config+0xd8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e70:	2310      	movs	r3, #16
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e74:	2302      	movs	r3, #2
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e7c:	2310      	movs	r3, #16
 8000e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e80:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e84:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e86:	2304      	movs	r3, #4
 8000e88:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4618      	mov	r0, r3
 8000e98:	f001 fcb8 	bl	800280c <HAL_RCC_OscConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ea2:	f000 f909 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea6:	230f      	movs	r3, #15
 8000ea8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ebc:	f107 0308 	add.w	r3, r7, #8
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f001 f958 	bl	8002178 <HAL_RCC_ClockConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ece:	f000 f8f3 	bl	80010b8 <Error_Handler>
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3750      	adds	r7, #80	@ 0x50
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40007000 	.word	0x40007000

08000ee4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eea:	463b      	mov	r3, r7
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000ef8:	4a21      	ldr	r2, [pc, #132]	@ (8000f80 <MX_ADC1_Init+0x9c>)
 8000efa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000efc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000efe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f02:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f10:	4b1a      	ldr	r3, [pc, #104]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f16:	4b19      	ldr	r3, [pc, #100]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f24:	4b15      	ldr	r3, [pc, #84]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f26:	4a17      	ldr	r2, [pc, #92]	@ (8000f84 <MX_ADC1_Init+0xa0>)
 8000f28:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f2a:	4b14      	ldr	r3, [pc, #80]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f36:	4b11      	ldr	r3, [pc, #68]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f44:	480d      	ldr	r0, [pc, #52]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f46:	f000 fa73 	bl	8001430 <HAL_ADC_Init>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f50:	f000 f8b2 	bl	80010b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f54:	2301      	movs	r3, #1
 8000f56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4805      	ldr	r0, [pc, #20]	@ (8000f7c <MX_ADC1_Init+0x98>)
 8000f66:	f000 fc45 	bl	80017f4 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f70:	f000 f8a2 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000028 	.word	0x20000028
 8000f80:	40012000 	.word	0x40012000
 8000f84:	0f000001 	.word	0x0f000001

08000f88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	@ (8000fd8 <MX_USART2_UART_Init+0x50>)
 8000f90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f92:	4b10      	ldr	r3, [pc, #64]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fac:	4b09      	ldr	r3, [pc, #36]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fae:	220c      	movs	r2, #12
 8000fb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb2:	4b08      	ldr	r3, [pc, #32]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbe:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	f001 fec2 	bl	8002d48 <HAL_UART_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fca:	f000 f875 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000070 	.word	0x20000070
 8000fd8:	40004400 	.word	0x40004400

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a2c      	ldr	r2, [pc, #176]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8000ffc:	f043 0304 	orr.w	r3, r3, #4
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b2a      	ldr	r3, [pc, #168]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001016:	4a25      	ldr	r2, [pc, #148]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	6313      	str	r3, [r2, #48]	@ 0x30
 800101e:	4b23      	ldr	r3, [pc, #140]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b1f      	ldr	r3, [pc, #124]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001032:	4a1e      	ldr	r2, [pc, #120]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	@ 0x30
 800103a:	4b1c      	ldr	r3, [pc, #112]	@ (80010ac <MX_GPIO_Init+0xd0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a17      	ldr	r2, [pc, #92]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <MX_GPIO_Init+0xd0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2120      	movs	r1, #32
 8001066:	4812      	ldr	r0, [pc, #72]	@ (80010b0 <MX_GPIO_Init+0xd4>)
 8001068:	f001 f86c 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001072:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	480c      	ldr	r0, [pc, #48]	@ (80010b4 <MX_GPIO_Init+0xd8>)
 8001084:	f000 feca 	bl	8001e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001088:	2320      	movs	r3, #32
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	4804      	ldr	r0, [pc, #16]	@ (80010b0 <MX_GPIO_Init+0xd4>)
 80010a0:	f000 febc 	bl	8001e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	@ 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020000 	.word	0x40020000
 80010b4:	40020800 	.word	0x40020800

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <Error_Handler+0x8>

080010c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <HAL_MspInit+0x4c>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001110 <HAL_MspInit+0x4c>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010da:	4b0d      	ldr	r3, [pc, #52]	@ (8001110 <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b09      	ldr	r3, [pc, #36]	@ (8001110 <HAL_MspInit+0x4c>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	4a08      	ldr	r2, [pc, #32]	@ (8001110 <HAL_MspInit+0x4c>)
 80010f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001102:	2007      	movs	r0, #7
 8001104:	f000 fe56 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800

08001114 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a17      	ldr	r2, [pc, #92]	@ (8001190 <HAL_ADC_MspInit+0x7c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d127      	bne.n	8001186 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a15      	ldr	r2, [pc, #84]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 8001140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a0e      	ldr	r2, [pc, #56]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <HAL_ADC_MspInit+0x80>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800116e:	2302      	movs	r3, #2
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001172:	2303      	movs	r3, #3
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_ADC_MspInit+0x84>)
 8001182:	f000 fe4b 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001186:	bf00      	nop
 8001188:	3728      	adds	r7, #40	@ 0x28
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40012000 	.word	0x40012000
 8001194:	40023800 	.word	0x40023800
 8001198:	40020000 	.word	0x40020000

0800119c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 0314 	add.w	r3, r7, #20
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <HAL_UART_MspInit+0x84>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d12b      	bne.n	8001216 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
 80011c2:	4b18      	ldr	r3, [pc, #96]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011c6:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	4b11      	ldr	r3, [pc, #68]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a10      	ldr	r2, [pc, #64]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001224 <HAL_UART_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011f6:	230c      	movs	r3, #12
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001206:	2307      	movs	r3, #7
 8001208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <HAL_UART_MspInit+0x8c>)
 8001212:	f000 fe03 	bl	8001e1c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001216:	bf00      	nop
 8001218:	3728      	adds	r7, #40	@ 0x28
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40004400 	.word	0x40004400
 8001224:	40023800 	.word	0x40023800
 8001228:	40020000 	.word	0x40020000

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f891 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012b4:	f7ff ffea 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b8:	480c      	ldr	r0, [pc, #48]	@ (80012ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ba:	490d      	ldr	r1, [pc, #52]	@ (80012f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c0:	e002      	b.n	80012c8 <LoopCopyDataInit>

080012c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c6:	3304      	adds	r3, #4

080012c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012cc:	d3f9      	bcc.n	80012c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ce:	4a0a      	ldr	r2, [pc, #40]	@ (80012f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012d0:	4c0a      	ldr	r4, [pc, #40]	@ (80012fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d4:	e001      	b.n	80012da <LoopFillZerobss>

080012d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d8:	3204      	adds	r2, #4

080012da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012dc:	d3fb      	bcc.n	80012d6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80012de:	f001 ffff 	bl	80032e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fd29 	bl	8000d38 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012f4:	08003368 	.word	0x08003368
  ldr r2, =_sbss
 80012f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012fc:	200000c8 	.word	0x200000c8

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	@ (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	@ (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fd41 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	2000      	movs	r0, #0
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff fec4 	bl	80010c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fd4b 	bl	8001e02 <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 fd21 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000008 	.word	0x20000008
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	@ (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	@ (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008
 80013cc:	200000c4 	.word	0x200000c4

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	@ (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	200000c4 	.word	0x200000c4

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	@ (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008

08001430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e033      	b.n	80014ae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe60 	bl	8001114 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fae8 	bl	8001a58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	@ 0x40
 800149e:	e001      	b.n	80014a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_ADC_Start+0x1a>
 80014ce:	2302      	movs	r3, #2
 80014d0:	e0b2      	b.n	8001638 <HAL_ADC_Start+0x180>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2201      	movs	r2, #1
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d018      	beq.n	800151a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	689a      	ldr	r2, [r3, #8]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0201 	orr.w	r2, r2, #1
 80014f6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014f8:	4b52      	ldr	r3, [pc, #328]	@ (8001644 <HAL_ADC_Start+0x18c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a52      	ldr	r2, [pc, #328]	@ (8001648 <HAL_ADC_Start+0x190>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9a      	lsrs	r2, r3, #18
 8001504:	4613      	mov	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4413      	add	r3, r2
 800150a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800150c:	e002      	b.n	8001514 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	3b01      	subs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f9      	bne.n	800150e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d17a      	bne.n	800161e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001546:	2b00      	cmp	r3, #0
 8001548:	d007      	beq.n	800155a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001552:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001566:	d106      	bne.n	8001576 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156c:	f023 0206 	bic.w	r2, r3, #6
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	645a      	str	r2, [r3, #68]	@ 0x44
 8001574:	e002      	b.n	800157c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001584:	4b31      	ldr	r3, [pc, #196]	@ (800164c <HAL_ADC_Start+0x194>)
 8001586:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001590:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 031f 	and.w	r3, r3, #31
 800159a:	2b00      	cmp	r3, #0
 800159c:	d12a      	bne.n	80015f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001650 <HAL_ADC_Start+0x198>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d015      	beq.n	80015d4 <HAL_ADC_Start+0x11c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a29      	ldr	r2, [pc, #164]	@ (8001654 <HAL_ADC_Start+0x19c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d105      	bne.n	80015be <HAL_ADC_Start+0x106>
 80015b2:	4b26      	ldr	r3, [pc, #152]	@ (800164c <HAL_ADC_Start+0x194>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f003 031f 	and.w	r3, r3, #31
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d00a      	beq.n	80015d4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a25      	ldr	r2, [pc, #148]	@ (8001658 <HAL_ADC_Start+0x1a0>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d136      	bne.n	8001636 <HAL_ADC_Start+0x17e>
 80015c8:	4b20      	ldr	r3, [pc, #128]	@ (800164c <HAL_ADC_Start+0x194>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0310 	and.w	r3, r3, #16
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d130      	bne.n	8001636 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d129      	bne.n	8001636 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	e020      	b.n	8001636 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a15      	ldr	r2, [pc, #84]	@ (8001650 <HAL_ADC_Start+0x198>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d11b      	bne.n	8001636 <HAL_ADC_Start+0x17e>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d114      	bne.n	8001636 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	e00b      	b.n	8001636 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	f043 0210 	orr.w	r2, r3, #16
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800162e:	f043 0201 	orr.w	r2, r3, #1
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3714      	adds	r7, #20
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	20000000 	.word	0x20000000
 8001648:	431bde83 	.word	0x431bde83
 800164c:	40012300 	.word	0x40012300
 8001650:	40012000 	.word	0x40012000
 8001654:	40012100 	.word	0x40012100
 8001658:	40012200 	.word	0x40012200

0800165c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800166a:	2b01      	cmp	r3, #1
 800166c:	d101      	bne.n	8001672 <HAL_ADC_Stop+0x16>
 800166e:	2302      	movs	r3, #2
 8001670:	e021      	b.n	80016b6 <HAL_ADC_Stop+0x5a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0201 	bic.w	r2, r2, #1
 8001688:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f003 0301 	and.w	r3, r3, #1
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016de:	d113      	bne.n	8001708 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80016ee:	d10b      	bne.n	8001708 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f4:	f043 0220 	orr.w	r2, r3, #32
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e063      	b.n	80017d0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001708:	f7ff fe62 	bl	80013d0 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800170e:	e021      	b.n	8001754 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001716:	d01d      	beq.n	8001754 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d007      	beq.n	800172e <HAL_ADC_PollForConversion+0x6c>
 800171e:	f7ff fe57 	bl	80013d0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d212      	bcs.n	8001754 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b02      	cmp	r3, #2
 800173a:	d00b      	beq.n	8001754 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	f043 0204 	orr.w	r2, r3, #4
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e03d      	b.n	80017d0 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b02      	cmp	r3, #2
 8001760:	d1d6      	bne.n	8001710 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0212 	mvn.w	r2, #18
 800176a:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001770:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d123      	bne.n	80017ce <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800178a:	2b00      	cmp	r3, #0
 800178c:	d11f      	bne.n	80017ce <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001794:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001798:	2b00      	cmp	r3, #0
 800179a:	d006      	beq.n	80017aa <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d111      	bne.n	80017ce <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d105      	bne.n	80017ce <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x1c>
 800180c:	2302      	movs	r3, #2
 800180e:	e113      	b.n	8001a38 <HAL_ADC_ConfigChannel+0x244>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b09      	cmp	r3, #9
 800181e:	d925      	bls.n	800186c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68d9      	ldr	r1, [r3, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	461a      	mov	r2, r3
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	3b1e      	subs	r3, #30
 8001836:	2207      	movs	r2, #7
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43da      	mvns	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	400a      	ands	r2, r1
 8001844:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	68d9      	ldr	r1, [r3, #12]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	689a      	ldr	r2, [r3, #8]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4618      	mov	r0, r3
 8001858:	4603      	mov	r3, r0
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	4403      	add	r3, r0
 800185e:	3b1e      	subs	r3, #30
 8001860:	409a      	lsls	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	430a      	orrs	r2, r1
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	e022      	b.n	80018b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6919      	ldr	r1, [r3, #16]
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	461a      	mov	r2, r3
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	2207      	movs	r2, #7
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43da      	mvns	r2, r3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	400a      	ands	r2, r1
 800188e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6919      	ldr	r1, [r3, #16]
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29b      	uxth	r3, r3
 80018a0:	4618      	mov	r0, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	4403      	add	r3, r0
 80018a8:	409a      	lsls	r2, r3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	430a      	orrs	r2, r1
 80018b0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d824      	bhi.n	8001904 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	4613      	mov	r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	4413      	add	r3, r2
 80018ca:	3b05      	subs	r3, #5
 80018cc:	221f      	movs	r2, #31
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	400a      	ands	r2, r1
 80018da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	4618      	mov	r0, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	3b05      	subs	r3, #5
 80018f6:	fa00 f203 	lsl.w	r2, r0, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	430a      	orrs	r2, r1
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
 8001902:	e04c      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d824      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	4413      	add	r3, r2
 800191c:	3b23      	subs	r3, #35	@ 0x23
 800191e:	221f      	movs	r2, #31
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43da      	mvns	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	400a      	ands	r2, r1
 800192c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	b29b      	uxth	r3, r3
 800193a:	4618      	mov	r0, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b23      	subs	r3, #35	@ 0x23
 8001948:	fa00 f203 	lsl.w	r2, r0, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
 8001954:	e023      	b.n	800199e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	3b41      	subs	r3, #65	@ 0x41
 8001968:	221f      	movs	r2, #31
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43da      	mvns	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	400a      	ands	r2, r1
 8001976:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4618      	mov	r0, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	4613      	mov	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	4413      	add	r3, r2
 8001990:	3b41      	subs	r3, #65	@ 0x41
 8001992:	fa00 f203 	lsl.w	r2, r0, r3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <HAL_ADC_ConfigChannel+0x250>)
 80019a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a28      	ldr	r2, [pc, #160]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d10f      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b12      	cmp	r3, #18
 80019b2:	d10b      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a48 <HAL_ADC_ConfigChannel+0x254>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d12b      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a1c      	ldr	r2, [pc, #112]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d003      	beq.n	80019e8 <HAL_ADC_ConfigChannel+0x1f4>
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b11      	cmp	r3, #17
 80019e6:	d122      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a11      	ldr	r2, [pc, #68]	@ (8001a4c <HAL_ADC_ConfigChannel+0x258>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d111      	bne.n	8001a2e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_ADC_ConfigChannel+0x25c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a11      	ldr	r2, [pc, #68]	@ (8001a54 <HAL_ADC_ConfigChannel+0x260>)
 8001a10:	fba2 2303 	umull	r2, r3, r2, r3
 8001a14:	0c9a      	lsrs	r2, r3, #18
 8001a16:	4613      	mov	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a20:	e002      	b.n	8001a28 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	3b01      	subs	r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f9      	bne.n	8001a22 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a36:	2300      	movs	r3, #0
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	40012000 	.word	0x40012000
 8001a4c:	10000012 	.word	0x10000012
 8001a50:	20000000 	.word	0x20000000
 8001a54:	431bde83 	.word	0x431bde83

08001a58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a60:	4b79      	ldr	r3, [pc, #484]	@ (8001c48 <ADC_Init+0x1f0>)
 8001a62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	685a      	ldr	r2, [r3, #4]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6859      	ldr	r1, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	691b      	ldr	r3, [r3, #16]
 8001a98:	021a      	lsls	r2, r3, #8
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001ab0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6859      	ldr	r1, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689a      	ldr	r2, [r3, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6899      	ldr	r1, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68da      	ldr	r2, [r3, #12]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aea:	4a58      	ldr	r2, [pc, #352]	@ (8001c4c <ADC_Init+0x1f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001afe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6899      	ldr	r1, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	430a      	orrs	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
 8001b34:	e00f      	b.n	8001b56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0202 	bic.w	r2, r2, #2
 8001b64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6899      	ldr	r1, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	7e1b      	ldrb	r3, [r3, #24]
 8001b70:	005a      	lsls	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d01b      	beq.n	8001bbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	685a      	ldr	r2, [r3, #4]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001ba2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6859      	ldr	r1, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	035a      	lsls	r2, r3, #13
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	e007      	b.n	8001bcc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001bca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	69db      	ldr	r3, [r3, #28]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	051a      	lsls	r2, r3, #20
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689a      	ldr	r2, [r3, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6899      	ldr	r1, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c0e:	025a      	lsls	r2, r3, #9
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	430a      	orrs	r2, r1
 8001c16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	689a      	ldr	r2, [r3, #8]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6899      	ldr	r1, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	029a      	lsls	r2, r3, #10
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	609a      	str	r2, [r3, #8]
}
 8001c3c:	bf00      	nop
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40012300 	.word	0x40012300
 8001c4c:	0f000001 	.word	0x0f000001

08001c50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c82:	4a04      	ldr	r2, [pc, #16]	@ (8001c94 <__NVIC_SetPriorityGrouping+0x44>)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	60d3      	str	r3, [r2, #12]
}
 8001c88:	bf00      	nop
 8001c8a:	3714      	adds	r7, #20
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000ed00 	.word	0xe000ed00

08001c98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c9c:	4b04      	ldr	r3, [pc, #16]	@ (8001cb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	0a1b      	lsrs	r3, r3, #8
 8001ca2:	f003 0307 	and.w	r3, r3, #7
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	e000ed00 	.word	0xe000ed00

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	@ (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	@ (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	@ 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	@ 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	@ (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff47 	bl	8001c50 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff5c 	bl	8001c98 <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffb0 	bl	8001d70 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	61fb      	str	r3, [r7, #28]
 8001e36:	e165      	b.n	8002104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	f040 8154 	bne.w	80020fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d005      	beq.n	8001e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d130      	bne.n	8001ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	2203      	movs	r2, #3
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68da      	ldr	r2, [r3, #12]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	091b      	lsrs	r3, r3, #4
 8001eba:	f003 0201 	and.w	r2, r3, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0303 	and.w	r3, r3, #3
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d017      	beq.n	8001f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	2203      	movs	r2, #3
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0303 	and.w	r3, r3, #3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d123      	bne.n	8001f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	691a      	ldr	r2, [r3, #16]
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	08da      	lsrs	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3208      	adds	r2, #8
 8001f5a:	69b9      	ldr	r1, [r7, #24]
 8001f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f003 0203 	and.w	r2, r3, #3
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 80ae 	beq.w	80020fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	4a5c      	ldr	r2, [pc, #368]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800211c <HAL_GPIO_Init+0x300>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fba:	60fb      	str	r3, [r7, #12]
 8001fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fbe:	4a58      	ldr	r2, [pc, #352]	@ (8002120 <HAL_GPIO_Init+0x304>)
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	089b      	lsrs	r3, r3, #2
 8001fc4:	3302      	adds	r3, #2
 8001fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	220f      	movs	r2, #15
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8002124 <HAL_GPIO_Init+0x308>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d025      	beq.n	8002036 <HAL_GPIO_Init+0x21a>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	@ (8002128 <HAL_GPIO_Init+0x30c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01f      	beq.n	8002032 <HAL_GPIO_Init+0x216>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800212c <HAL_GPIO_Init+0x310>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d019      	beq.n	800202e <HAL_GPIO_Init+0x212>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8002130 <HAL_GPIO_Init+0x314>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <HAL_GPIO_Init+0x20e>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a4b      	ldr	r2, [pc, #300]	@ (8002134 <HAL_GPIO_Init+0x318>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00d      	beq.n	8002026 <HAL_GPIO_Init+0x20a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4a      	ldr	r2, [pc, #296]	@ (8002138 <HAL_GPIO_Init+0x31c>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d007      	beq.n	8002022 <HAL_GPIO_Init+0x206>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a49      	ldr	r2, [pc, #292]	@ (800213c <HAL_GPIO_Init+0x320>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d101      	bne.n	800201e <HAL_GPIO_Init+0x202>
 800201a:	2306      	movs	r3, #6
 800201c:	e00c      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800201e:	2307      	movs	r3, #7
 8002020:	e00a      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002022:	2305      	movs	r3, #5
 8002024:	e008      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002026:	2304      	movs	r3, #4
 8002028:	e006      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202a:	2303      	movs	r3, #3
 800202c:	e004      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 800202e:	2302      	movs	r3, #2
 8002030:	e002      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002032:	2301      	movs	r3, #1
 8002034:	e000      	b.n	8002038 <HAL_GPIO_Init+0x21c>
 8002036:	2300      	movs	r3, #0
 8002038:	69fa      	ldr	r2, [r7, #28]
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	0092      	lsls	r2, r2, #2
 8002040:	4093      	lsls	r3, r2
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002048:	4935      	ldr	r1, [pc, #212]	@ (8002120 <HAL_GPIO_Init+0x304>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	089b      	lsrs	r3, r3, #2
 800204e:	3302      	adds	r3, #2
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002056:	4b3a      	ldr	r3, [pc, #232]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800207a:	4a31      	ldr	r2, [pc, #196]	@ (8002140 <HAL_GPIO_Init+0x324>)
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002080:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_GPIO_Init+0x324>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	43db      	mvns	r3, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4013      	ands	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020a4:	4a26      	ldr	r2, [pc, #152]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020aa:	4b25      	ldr	r3, [pc, #148]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4013      	ands	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ce:	4a1c      	ldr	r2, [pc, #112]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020f8:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_GPIO_Init+0x324>)
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3301      	adds	r3, #1
 8002102:	61fb      	str	r3, [r7, #28]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	2b0f      	cmp	r3, #15
 8002108:	f67f ae96 	bls.w	8001e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3724      	adds	r7, #36	@ 0x24
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40023800 	.word	0x40023800
 8002120:	40013800 	.word	0x40013800
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400
 800212c:	40020800 	.word	0x40020800
 8002130:	40020c00 	.word	0x40020c00
 8002134:	40021000 	.word	0x40021000
 8002138:	40021400 	.word	0x40021400
 800213c:	40021800 	.word	0x40021800
 8002140:	40013c00 	.word	0x40013c00

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002160:	e003      	b.n	800216a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002162:	887b      	ldrh	r3, [r7, #2]
 8002164:	041a      	lsls	r2, r3, #16
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	619a      	str	r2, [r3, #24]
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
	...

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cc      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b68      	ldr	r3, [pc, #416]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d90c      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b65      	ldr	r3, [pc, #404]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a58      	ldr	r2, [pc, #352]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a52      	ldr	r2, [pc, #328]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e067      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4934      	ldr	r1, [pc, #208]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7ff f8b2 	bl	80013d0 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7ff f8ae 	bl	80013d0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2b      	ldr	r3, [pc, #172]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b25      	ldr	r3, [pc, #148]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d20c      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b22      	ldr	r3, [pc, #136]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	@ (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f855 	bl	80023ac <HAL_RCC_GetSysClockFreq>
 8002302:	4602      	mov	r2, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	490a      	ldr	r1, [pc, #40]	@ (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	5ccb      	ldrb	r3, [r1, r3]
 8002312:	fa22 f303 	lsr.w	r3, r2, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	@ (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	@ (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f812 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	08003340 	.word	0x08003340
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b03      	ldr	r3, [pc, #12]	@ (8002358 <HAL_RCC_GetHCLKFreq+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002360:	f7ff fff0 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	@ (800237c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4903      	ldr	r1, [pc, #12]	@ (8002380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	08003350 	.word	0x08003350

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002388:	f7ff ffdc 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 800238c:	4602      	mov	r2, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0b5b      	lsrs	r3, r3, #13
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4903      	ldr	r1, [pc, #12]	@ (80023a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239a:	5ccb      	ldrb	r3, [r1, r3]
 800239c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08003350 	.word	0x08003350

080023ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b0:	b0ae      	sub	sp, #184	@ 0xb8
 80023b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d2:	4bcb      	ldr	r3, [pc, #812]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	f200 8206 	bhi.w	80027ec <HAL_RCC_GetSysClockFreq+0x440>
 80023e0:	a201      	add	r2, pc, #4	@ (adr r2, 80023e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e6:	bf00      	nop
 80023e8:	0800241d 	.word	0x0800241d
 80023ec:	080027ed 	.word	0x080027ed
 80023f0:	080027ed 	.word	0x080027ed
 80023f4:	080027ed 	.word	0x080027ed
 80023f8:	08002425 	.word	0x08002425
 80023fc:	080027ed 	.word	0x080027ed
 8002400:	080027ed 	.word	0x080027ed
 8002404:	080027ed 	.word	0x080027ed
 8002408:	0800242d 	.word	0x0800242d
 800240c:	080027ed 	.word	0x080027ed
 8002410:	080027ed 	.word	0x080027ed
 8002414:	080027ed 	.word	0x080027ed
 8002418:	0800261d 	.word	0x0800261d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800241c:	4bb9      	ldr	r3, [pc, #740]	@ (8002704 <HAL_RCC_GetSysClockFreq+0x358>)
 800241e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002422:	e1e7      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4bb8      	ldr	r3, [pc, #736]	@ (8002708 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002426:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800242a:	e1e3      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800242c:	4bb4      	ldr	r3, [pc, #720]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002434:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002438:	4bb1      	ldr	r3, [pc, #708]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d071      	beq.n	8002528 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002444:	4bae      	ldr	r3, [pc, #696]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	099b      	lsrs	r3, r3, #6
 800244a:	2200      	movs	r2, #0
 800244c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002450:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002454:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800245c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002460:	2300      	movs	r3, #0
 8002462:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002466:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800246a:	4622      	mov	r2, r4
 800246c:	462b      	mov	r3, r5
 800246e:	f04f 0000 	mov.w	r0, #0
 8002472:	f04f 0100 	mov.w	r1, #0
 8002476:	0159      	lsls	r1, r3, #5
 8002478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800247c:	0150      	lsls	r0, r2, #5
 800247e:	4602      	mov	r2, r0
 8002480:	460b      	mov	r3, r1
 8002482:	4621      	mov	r1, r4
 8002484:	1a51      	subs	r1, r2, r1
 8002486:	6439      	str	r1, [r7, #64]	@ 0x40
 8002488:	4629      	mov	r1, r5
 800248a:	eb63 0301 	sbc.w	r3, r3, r1
 800248e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800249c:	4649      	mov	r1, r9
 800249e:	018b      	lsls	r3, r1, #6
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024a6:	4641      	mov	r1, r8
 80024a8:	018a      	lsls	r2, r1, #6
 80024aa:	4641      	mov	r1, r8
 80024ac:	1a51      	subs	r1, r2, r1
 80024ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024b0:	4649      	mov	r1, r9
 80024b2:	eb63 0301 	sbc.w	r3, r3, r1
 80024b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024b8:	f04f 0200 	mov.w	r2, #0
 80024bc:	f04f 0300 	mov.w	r3, #0
 80024c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024c4:	4649      	mov	r1, r9
 80024c6:	00cb      	lsls	r3, r1, #3
 80024c8:	4641      	mov	r1, r8
 80024ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ce:	4641      	mov	r1, r8
 80024d0:	00ca      	lsls	r2, r1, #3
 80024d2:	4610      	mov	r0, r2
 80024d4:	4619      	mov	r1, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	4622      	mov	r2, r4
 80024da:	189b      	adds	r3, r3, r2
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80024de:	462b      	mov	r3, r5
 80024e0:	460a      	mov	r2, r1
 80024e2:	eb42 0303 	adc.w	r3, r2, r3
 80024e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024f4:	4629      	mov	r1, r5
 80024f6:	024b      	lsls	r3, r1, #9
 80024f8:	4621      	mov	r1, r4
 80024fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024fe:	4621      	mov	r1, r4
 8002500:	024a      	lsls	r2, r1, #9
 8002502:	4610      	mov	r0, r2
 8002504:	4619      	mov	r1, r3
 8002506:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250a:	2200      	movs	r2, #0
 800250c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002510:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002514:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002518:	f7fe fa94 	bl	8000a44 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002526:	e067      	b.n	80025f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002528:	4b75      	ldr	r3, [pc, #468]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	2200      	movs	r2, #0
 8002530:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002534:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002538:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800253c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002542:	2300      	movs	r3, #0
 8002544:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002546:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800254a:	4622      	mov	r2, r4
 800254c:	462b      	mov	r3, r5
 800254e:	f04f 0000 	mov.w	r0, #0
 8002552:	f04f 0100 	mov.w	r1, #0
 8002556:	0159      	lsls	r1, r3, #5
 8002558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800255c:	0150      	lsls	r0, r2, #5
 800255e:	4602      	mov	r2, r0
 8002560:	460b      	mov	r3, r1
 8002562:	4621      	mov	r1, r4
 8002564:	1a51      	subs	r1, r2, r1
 8002566:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002568:	4629      	mov	r1, r5
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800257c:	4649      	mov	r1, r9
 800257e:	018b      	lsls	r3, r1, #6
 8002580:	4641      	mov	r1, r8
 8002582:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002586:	4641      	mov	r1, r8
 8002588:	018a      	lsls	r2, r1, #6
 800258a:	4641      	mov	r1, r8
 800258c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002590:	4649      	mov	r1, r9
 8002592:	eb63 0b01 	sbc.w	fp, r3, r1
 8002596:	f04f 0200 	mov.w	r2, #0
 800259a:	f04f 0300 	mov.w	r3, #0
 800259e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025aa:	4692      	mov	sl, r2
 80025ac:	469b      	mov	fp, r3
 80025ae:	4623      	mov	r3, r4
 80025b0:	eb1a 0303 	adds.w	r3, sl, r3
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	462b      	mov	r3, r5
 80025b8:	eb4b 0303 	adc.w	r3, fp, r3
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	f04f 0300 	mov.w	r3, #0
 80025c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025ca:	4629      	mov	r1, r5
 80025cc:	028b      	lsls	r3, r1, #10
 80025ce:	4621      	mov	r1, r4
 80025d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d4:	4621      	mov	r1, r4
 80025d6:	028a      	lsls	r2, r1, #10
 80025d8:	4610      	mov	r0, r2
 80025da:	4619      	mov	r1, r3
 80025dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025e0:	2200      	movs	r2, #0
 80025e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80025e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80025e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025ea:	f7fe fa2b 	bl	8000a44 <__aeabi_uldivmod>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4613      	mov	r3, r2
 80025f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025f8:	4b41      	ldr	r3, [pc, #260]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	0c1b      	lsrs	r3, r3, #16
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	3301      	adds	r3, #1
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800260a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800260e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800261a:	e0eb      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800261c:	4b38      	ldr	r3, [pc, #224]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002628:	4b35      	ldr	r3, [pc, #212]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d06b      	beq.n	800270c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002634:	4b32      	ldr	r3, [pc, #200]	@ (8002700 <HAL_RCC_GetSysClockFreq+0x354>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	099b      	lsrs	r3, r3, #6
 800263a:	2200      	movs	r2, #0
 800263c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800263e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002640:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002646:	663b      	str	r3, [r7, #96]	@ 0x60
 8002648:	2300      	movs	r3, #0
 800264a:	667b      	str	r3, [r7, #100]	@ 0x64
 800264c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002650:	4622      	mov	r2, r4
 8002652:	462b      	mov	r3, r5
 8002654:	f04f 0000 	mov.w	r0, #0
 8002658:	f04f 0100 	mov.w	r1, #0
 800265c:	0159      	lsls	r1, r3, #5
 800265e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002662:	0150      	lsls	r0, r2, #5
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4621      	mov	r1, r4
 800266a:	1a51      	subs	r1, r2, r1
 800266c:	61b9      	str	r1, [r7, #24]
 800266e:	4629      	mov	r1, r5
 8002670:	eb63 0301 	sbc.w	r3, r3, r1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002682:	4659      	mov	r1, fp
 8002684:	018b      	lsls	r3, r1, #6
 8002686:	4651      	mov	r1, sl
 8002688:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800268c:	4651      	mov	r1, sl
 800268e:	018a      	lsls	r2, r1, #6
 8002690:	4651      	mov	r1, sl
 8002692:	ebb2 0801 	subs.w	r8, r2, r1
 8002696:	4659      	mov	r1, fp
 8002698:	eb63 0901 	sbc.w	r9, r3, r1
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026b0:	4690      	mov	r8, r2
 80026b2:	4699      	mov	r9, r3
 80026b4:	4623      	mov	r3, r4
 80026b6:	eb18 0303 	adds.w	r3, r8, r3
 80026ba:	613b      	str	r3, [r7, #16]
 80026bc:	462b      	mov	r3, r5
 80026be:	eb49 0303 	adc.w	r3, r9, r3
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	f04f 0200 	mov.w	r2, #0
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026d0:	4629      	mov	r1, r5
 80026d2:	024b      	lsls	r3, r1, #9
 80026d4:	4621      	mov	r1, r4
 80026d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026da:	4621      	mov	r1, r4
 80026dc:	024a      	lsls	r2, r1, #9
 80026de:	4610      	mov	r0, r2
 80026e0:	4619      	mov	r1, r3
 80026e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026e6:	2200      	movs	r2, #0
 80026e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026f0:	f7fe f9a8 	bl	8000a44 <__aeabi_uldivmod>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4613      	mov	r3, r2
 80026fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026fe:	e065      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x420>
 8002700:	40023800 	.word	0x40023800
 8002704:	00f42400 	.word	0x00f42400
 8002708:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270c:	4b3d      	ldr	r3, [pc, #244]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x458>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	099b      	lsrs	r3, r3, #6
 8002712:	2200      	movs	r2, #0
 8002714:	4618      	mov	r0, r3
 8002716:	4611      	mov	r1, r2
 8002718:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800271c:	653b      	str	r3, [r7, #80]	@ 0x50
 800271e:	2300      	movs	r3, #0
 8002720:	657b      	str	r3, [r7, #84]	@ 0x54
 8002722:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002726:	4642      	mov	r2, r8
 8002728:	464b      	mov	r3, r9
 800272a:	f04f 0000 	mov.w	r0, #0
 800272e:	f04f 0100 	mov.w	r1, #0
 8002732:	0159      	lsls	r1, r3, #5
 8002734:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002738:	0150      	lsls	r0, r2, #5
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4641      	mov	r1, r8
 8002740:	1a51      	subs	r1, r2, r1
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	4649      	mov	r1, r9
 8002746:	eb63 0301 	sbc.w	r3, r3, r1
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002758:	4659      	mov	r1, fp
 800275a:	018b      	lsls	r3, r1, #6
 800275c:	4651      	mov	r1, sl
 800275e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002762:	4651      	mov	r1, sl
 8002764:	018a      	lsls	r2, r1, #6
 8002766:	4651      	mov	r1, sl
 8002768:	1a54      	subs	r4, r2, r1
 800276a:	4659      	mov	r1, fp
 800276c:	eb63 0501 	sbc.w	r5, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027b4:	2200      	movs	r2, #0
 80027b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027be:	f7fe f941 	bl	8000a44 <__aeabi_uldivmod>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4613      	mov	r3, r2
 80027c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	0f1b      	lsrs	r3, r3, #28
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027ea:	e003      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b06      	ldr	r3, [pc, #24]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	37b8      	adds	r7, #184	@ 0xb8
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002802:	bf00      	nop
 8002804:	40023800 	.word	0x40023800
 8002808:	00f42400 	.word	0x00f42400

0800280c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e28d      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 8083 	beq.w	8002932 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800282c:	4b94      	ldr	r3, [pc, #592]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
 8002834:	2b04      	cmp	r3, #4
 8002836:	d019      	beq.n	800286c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002838:	4b91      	ldr	r3, [pc, #580]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002840:	2b08      	cmp	r3, #8
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002844:	4b8e      	ldr	r3, [pc, #568]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800284c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002850:	d00c      	beq.n	800286c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b8b      	ldr	r3, [pc, #556]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d112      	bne.n	8002884 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800285e:	4b88      	ldr	r3, [pc, #544]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002866:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800286a:	d10b      	bne.n	8002884 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	4b84      	ldr	r3, [pc, #528]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d05b      	beq.n	8002930 <HAL_RCC_OscConfig+0x124>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d157      	bne.n	8002930 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e25a      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288c:	d106      	bne.n	800289c <HAL_RCC_OscConfig+0x90>
 800288e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7b      	ldr	r2, [pc, #492]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e01d      	b.n	80028d8 <HAL_RCC_OscConfig+0xcc>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028a4:	d10c      	bne.n	80028c0 <HAL_RCC_OscConfig+0xb4>
 80028a6:	4b76      	ldr	r3, [pc, #472]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a75      	ldr	r2, [pc, #468]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	4b73      	ldr	r3, [pc, #460]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a72      	ldr	r2, [pc, #456]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	6013      	str	r3, [r2, #0]
 80028be:	e00b      	b.n	80028d8 <HAL_RCC_OscConfig+0xcc>
 80028c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d013      	beq.n	8002908 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e0:	f7fe fd76 	bl	80013d0 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028e8:	f7fe fd72 	bl	80013d0 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e21f      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b61      	ldr	r3, [pc, #388]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0xdc>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fd62 	bl	80013d0 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002910:	f7fe fd5e 	bl	80013d0 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	@ 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e20b      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002922:	4b57      	ldr	r3, [pc, #348]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x104>
 800292e:	e000      	b.n	8002932 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d06f      	beq.n	8002a1e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800293e:	4b50      	ldr	r3, [pc, #320]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	2b00      	cmp	r3, #0
 8002948:	d017      	beq.n	800297a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800294a:	4b4d      	ldr	r3, [pc, #308]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002952:	2b08      	cmp	r3, #8
 8002954:	d105      	bne.n	8002962 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002956:	4b4a      	ldr	r3, [pc, #296]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00b      	beq.n	800297a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002962:	4b47      	ldr	r3, [pc, #284]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d11c      	bne.n	80029a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800296e:	4b44      	ldr	r3, [pc, #272]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d116      	bne.n	80029a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	4b41      	ldr	r3, [pc, #260]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <HAL_RCC_OscConfig+0x186>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d001      	beq.n	8002992 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1d3      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002992:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4937      	ldr	r1, [pc, #220]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029a6:	e03a      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029b0:	4b34      	ldr	r3, [pc, #208]	@ (8002a84 <HAL_RCC_OscConfig+0x278>)
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd0b 	bl	80013d0 <HAL_GetTick>
 80029ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	e008      	b.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029be:	f7fe fd07 	bl	80013d0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d901      	bls.n	80029d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029cc:	2303      	movs	r3, #3
 80029ce:	e1b4      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d0f0      	beq.n	80029be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029dc:	4b28      	ldr	r3, [pc, #160]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4925      	ldr	r1, [pc, #148]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	600b      	str	r3, [r1, #0]
 80029f0:	e015      	b.n	8002a1e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029f2:	4b24      	ldr	r3, [pc, #144]	@ (8002a84 <HAL_RCC_OscConfig+0x278>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fcea 	bl	80013d0 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a00:	f7fe fce6 	bl	80013d0 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e193      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a12:	4b1b      	ldr	r3, [pc, #108]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0308 	and.w	r3, r3, #8
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d036      	beq.n	8002a98 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	695b      	ldr	r3, [r3, #20]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d016      	beq.n	8002a60 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a32:	4b15      	ldr	r3, [pc, #84]	@ (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a34:	2201      	movs	r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a38:	f7fe fcca 	bl	80013d0 <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fcc6 	bl	80013d0 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e173      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a52:	4b0b      	ldr	r3, [pc, #44]	@ (8002a80 <HAL_RCC_OscConfig+0x274>)
 8002a54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0f0      	beq.n	8002a40 <HAL_RCC_OscConfig+0x234>
 8002a5e:	e01b      	b.n	8002a98 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a60:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <HAL_RCC_OscConfig+0x27c>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a66:	f7fe fcb3 	bl	80013d0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	e00e      	b.n	8002a8c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a6e:	f7fe fcaf 	bl	80013d0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d907      	bls.n	8002a8c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e15c      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
 8002a80:	40023800 	.word	0x40023800
 8002a84:	42470000 	.word	0x42470000
 8002a88:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8c:	4b8a      	ldr	r3, [pc, #552]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1ea      	bne.n	8002a6e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	f000 8097 	beq.w	8002bd4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aaa:	4b83      	ldr	r3, [pc, #524]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10f      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	4b7f      	ldr	r3, [pc, #508]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b7c      	ldr	r3, [pc, #496]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	60bb      	str	r3, [r7, #8]
 8002ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad6:	4b79      	ldr	r3, [pc, #484]	@ (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d118      	bne.n	8002b14 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ae2:	4b76      	ldr	r3, [pc, #472]	@ (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a75      	ldr	r2, [pc, #468]	@ (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002ae8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aee:	f7fe fc6f 	bl	80013d0 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002af6:	f7fe fc6b 	bl	80013d0 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e118      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b08:	4b6c      	ldr	r3, [pc, #432]	@ (8002cbc <HAL_RCC_OscConfig+0x4b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0f0      	beq.n	8002af6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x31e>
 8002b1c:	4b66      	ldr	r3, [pc, #408]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	4a65      	ldr	r2, [pc, #404]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b22:	f043 0301 	orr.w	r3, r3, #1
 8002b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b28:	e01c      	b.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	2b05      	cmp	r3, #5
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCC_OscConfig+0x340>
 8002b32:	4b61      	ldr	r3, [pc, #388]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a60      	ldr	r2, [pc, #384]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b42:	4a5d      	ldr	r2, [pc, #372]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4a:	e00b      	b.n	8002b64 <HAL_RCC_OscConfig+0x358>
 8002b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a59      	ldr	r2, [pc, #356]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	f023 0301 	bic.w	r3, r3, #1
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b58:	4b57      	ldr	r3, [pc, #348]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a56      	ldr	r2, [pc, #344]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 0304 	bic.w	r3, r3, #4
 8002b62:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe fc30 	bl	80013d0 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe fc2c 	bl	80013d0 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0d7      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCC_OscConfig+0x368>
 8002b96:	e014      	b.n	8002bc2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe fc1a 	bl	80013d0 <HAL_GetTick>
 8002b9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	f7fe fc16 	bl	80013d0 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e0c1      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bb6:	4b40      	ldr	r3, [pc, #256]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1ee      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bc2:	7dfb      	ldrb	r3, [r7, #23]
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d105      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	4a3a      	ldr	r2, [pc, #232]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002bce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ad 	beq.w	8002d38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bde:	4b36      	ldr	r3, [pc, #216]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 030c 	and.w	r3, r3, #12
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d060      	beq.n	8002cac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d145      	bne.n	8002c7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf2:	4b33      	ldr	r3, [pc, #204]	@ (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fbea 	bl	80013d0 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fbe6 	bl	80013d0 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e093      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c12:	4b29      	ldr	r3, [pc, #164]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	69da      	ldr	r2, [r3, #28]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2c:	019b      	lsls	r3, r3, #6
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c34:	085b      	lsrs	r3, r3, #1
 8002c36:	3b01      	subs	r3, #1
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c40:	061b      	lsls	r3, r3, #24
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	491b      	ldr	r1, [pc, #108]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c50:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c56:	f7fe fbbb 	bl	80013d0 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fbb7 	bl	80013d0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e064      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c70:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d0f0      	beq.n	8002c5e <HAL_RCC_OscConfig+0x452>
 8002c7c:	e05c      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7e:	4b10      	ldr	r3, [pc, #64]	@ (8002cc0 <HAL_RCC_OscConfig+0x4b4>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c84:	f7fe fba4 	bl	80013d0 <HAL_GetTick>
 8002c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fba0 	bl	80013d0 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e04d      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <HAL_RCC_OscConfig+0x4ac>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f0      	bne.n	8002c8c <HAL_RCC_OscConfig+0x480>
 8002caa:	e045      	b.n	8002d38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e040      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40007000 	.word	0x40007000
 8002cc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d44 <HAL_RCC_OscConfig+0x538>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d030      	beq.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d129      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d122      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d119      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d0a:	085b      	lsrs	r3, r3, #1
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d10f      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d107      	bne.n	8002d34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d001      	beq.n	8002d38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e000      	b.n	8002d3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40023800 	.word	0x40023800

08002d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e042      	b.n	8002de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fa14 	bl	800119c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	@ 0x24
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f82b 	bl	8002de8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	691a      	ldr	r2, [r3, #16]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3708      	adds	r7, #8
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dec:	b0c0      	sub	sp, #256	@ 0x100
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e04:	68d9      	ldr	r1, [r3, #12]
 8002e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	ea40 0301 	orr.w	r3, r0, r1
 8002e10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	431a      	orrs	r2, r3
 8002e28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002e40:	f021 010c 	bic.w	r1, r1, #12
 8002e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002e4e:	430b      	orrs	r3, r1
 8002e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e62:	6999      	ldr	r1, [r3, #24]
 8002e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	ea40 0301 	orr.w	r3, r0, r1
 8002e6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	4b8f      	ldr	r3, [pc, #572]	@ (80030b4 <UART_SetConfig+0x2cc>)
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d005      	beq.n	8002e88 <UART_SetConfig+0xa0>
 8002e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	4b8d      	ldr	r3, [pc, #564]	@ (80030b8 <UART_SetConfig+0x2d0>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d104      	bne.n	8002e92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e88:	f7ff fa7c 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8002e8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e90:	e003      	b.n	8002e9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e92:	f7ff fa63 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 8002e96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ea4:	f040 810c 	bne.w	80030c0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ea8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002eb2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002eb6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002eba:	4622      	mov	r2, r4
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	1891      	adds	r1, r2, r2
 8002ec0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002ec2:	415b      	adcs	r3, r3
 8002ec4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ec6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002eca:	4621      	mov	r1, r4
 8002ecc:	eb12 0801 	adds.w	r8, r2, r1
 8002ed0:	4629      	mov	r1, r5
 8002ed2:	eb43 0901 	adc.w	r9, r3, r1
 8002ed6:	f04f 0200 	mov.w	r2, #0
 8002eda:	f04f 0300 	mov.w	r3, #0
 8002ede:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ee2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ee6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eea:	4690      	mov	r8, r2
 8002eec:	4699      	mov	r9, r3
 8002eee:	4623      	mov	r3, r4
 8002ef0:	eb18 0303 	adds.w	r3, r8, r3
 8002ef4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ef8:	462b      	mov	r3, r5
 8002efa:	eb49 0303 	adc.w	r3, r9, r3
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002f12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f16:	460b      	mov	r3, r1
 8002f18:	18db      	adds	r3, r3, r3
 8002f1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	eb42 0303 	adc.w	r3, r2, r3
 8002f22:	657b      	str	r3, [r7, #84]	@ 0x54
 8002f24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002f28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002f2c:	f7fd fd8a 	bl	8000a44 <__aeabi_uldivmod>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4b61      	ldr	r3, [pc, #388]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002f36:	fba3 2302 	umull	r2, r3, r3, r2
 8002f3a:	095b      	lsrs	r3, r3, #5
 8002f3c:	011c      	lsls	r4, r3, #4
 8002f3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f42:	2200      	movs	r2, #0
 8002f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002f4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002f50:	4642      	mov	r2, r8
 8002f52:	464b      	mov	r3, r9
 8002f54:	1891      	adds	r1, r2, r2
 8002f56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002f58:	415b      	adcs	r3, r3
 8002f5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002f60:	4641      	mov	r1, r8
 8002f62:	eb12 0a01 	adds.w	sl, r2, r1
 8002f66:	4649      	mov	r1, r9
 8002f68:	eb43 0b01 	adc.w	fp, r3, r1
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002f78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002f7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f80:	4692      	mov	sl, r2
 8002f82:	469b      	mov	fp, r3
 8002f84:	4643      	mov	r3, r8
 8002f86:	eb1a 0303 	adds.w	r3, sl, r3
 8002f8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb4b 0303 	adc.w	r3, fp, r3
 8002f94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fa4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002fa8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002fac:	460b      	mov	r3, r1
 8002fae:	18db      	adds	r3, r3, r3
 8002fb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	eb42 0303 	adc.w	r3, r2, r3
 8002fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002fbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002fc2:	f7fd fd3f 	bl	8000a44 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4611      	mov	r1, r2
 8002fcc:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002fce:	fba3 2301 	umull	r2, r3, r3, r1
 8002fd2:	095b      	lsrs	r3, r3, #5
 8002fd4:	2264      	movs	r2, #100	@ 0x64
 8002fd6:	fb02 f303 	mul.w	r3, r2, r3
 8002fda:	1acb      	subs	r3, r1, r3
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002fe2:	4b36      	ldr	r3, [pc, #216]	@ (80030bc <UART_SetConfig+0x2d4>)
 8002fe4:	fba3 2302 	umull	r2, r3, r3, r2
 8002fe8:	095b      	lsrs	r3, r3, #5
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002ff0:	441c      	add	r4, r3
 8002ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ffc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003000:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003004:	4642      	mov	r2, r8
 8003006:	464b      	mov	r3, r9
 8003008:	1891      	adds	r1, r2, r2
 800300a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800300c:	415b      	adcs	r3, r3
 800300e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003010:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003014:	4641      	mov	r1, r8
 8003016:	1851      	adds	r1, r2, r1
 8003018:	6339      	str	r1, [r7, #48]	@ 0x30
 800301a:	4649      	mov	r1, r9
 800301c:	414b      	adcs	r3, r1
 800301e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800302c:	4659      	mov	r1, fp
 800302e:	00cb      	lsls	r3, r1, #3
 8003030:	4651      	mov	r1, sl
 8003032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003036:	4651      	mov	r1, sl
 8003038:	00ca      	lsls	r2, r1, #3
 800303a:	4610      	mov	r0, r2
 800303c:	4619      	mov	r1, r3
 800303e:	4603      	mov	r3, r0
 8003040:	4642      	mov	r2, r8
 8003042:	189b      	adds	r3, r3, r2
 8003044:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003048:	464b      	mov	r3, r9
 800304a:	460a      	mov	r2, r1
 800304c:	eb42 0303 	adc.w	r3, r2, r3
 8003050:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003060:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003064:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003068:	460b      	mov	r3, r1
 800306a:	18db      	adds	r3, r3, r3
 800306c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800306e:	4613      	mov	r3, r2
 8003070:	eb42 0303 	adc.w	r3, r2, r3
 8003074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003076:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800307a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800307e:	f7fd fce1 	bl	8000a44 <__aeabi_uldivmod>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4b0d      	ldr	r3, [pc, #52]	@ (80030bc <UART_SetConfig+0x2d4>)
 8003088:	fba3 1302 	umull	r1, r3, r3, r2
 800308c:	095b      	lsrs	r3, r3, #5
 800308e:	2164      	movs	r1, #100	@ 0x64
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3332      	adds	r3, #50	@ 0x32
 800309a:	4a08      	ldr	r2, [pc, #32]	@ (80030bc <UART_SetConfig+0x2d4>)
 800309c:	fba2 2303 	umull	r2, r3, r2, r3
 80030a0:	095b      	lsrs	r3, r3, #5
 80030a2:	f003 0207 	and.w	r2, r3, #7
 80030a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4422      	add	r2, r4
 80030ae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80030b0:	e106      	b.n	80032c0 <UART_SetConfig+0x4d8>
 80030b2:	bf00      	nop
 80030b4:	40011000 	.word	0x40011000
 80030b8:	40011400 	.word	0x40011400
 80030bc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030c4:	2200      	movs	r2, #0
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030ca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80030ce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80030d2:	4642      	mov	r2, r8
 80030d4:	464b      	mov	r3, r9
 80030d6:	1891      	adds	r1, r2, r2
 80030d8:	6239      	str	r1, [r7, #32]
 80030da:	415b      	adcs	r3, r3
 80030dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80030e2:	4641      	mov	r1, r8
 80030e4:	1854      	adds	r4, r2, r1
 80030e6:	4649      	mov	r1, r9
 80030e8:	eb43 0501 	adc.w	r5, r3, r1
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	f04f 0300 	mov.w	r3, #0
 80030f4:	00eb      	lsls	r3, r5, #3
 80030f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030fa:	00e2      	lsls	r2, r4, #3
 80030fc:	4614      	mov	r4, r2
 80030fe:	461d      	mov	r5, r3
 8003100:	4643      	mov	r3, r8
 8003102:	18e3      	adds	r3, r4, r3
 8003104:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003108:	464b      	mov	r3, r9
 800310a:	eb45 0303 	adc.w	r3, r5, r3
 800310e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800311e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800312e:	4629      	mov	r1, r5
 8003130:	008b      	lsls	r3, r1, #2
 8003132:	4621      	mov	r1, r4
 8003134:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003138:	4621      	mov	r1, r4
 800313a:	008a      	lsls	r2, r1, #2
 800313c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003140:	f7fd fc80 	bl	8000a44 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4b60      	ldr	r3, [pc, #384]	@ (80032cc <UART_SetConfig+0x4e4>)
 800314a:	fba3 2302 	umull	r2, r3, r3, r2
 800314e:	095b      	lsrs	r3, r3, #5
 8003150:	011c      	lsls	r4, r3, #4
 8003152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003156:	2200      	movs	r2, #0
 8003158:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800315c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003160:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003164:	4642      	mov	r2, r8
 8003166:	464b      	mov	r3, r9
 8003168:	1891      	adds	r1, r2, r2
 800316a:	61b9      	str	r1, [r7, #24]
 800316c:	415b      	adcs	r3, r3
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003174:	4641      	mov	r1, r8
 8003176:	1851      	adds	r1, r2, r1
 8003178:	6139      	str	r1, [r7, #16]
 800317a:	4649      	mov	r1, r9
 800317c:	414b      	adcs	r3, r1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800318c:	4659      	mov	r1, fp
 800318e:	00cb      	lsls	r3, r1, #3
 8003190:	4651      	mov	r1, sl
 8003192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003196:	4651      	mov	r1, sl
 8003198:	00ca      	lsls	r2, r1, #3
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	4603      	mov	r3, r0
 80031a0:	4642      	mov	r2, r8
 80031a2:	189b      	adds	r3, r3, r2
 80031a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80031a8:	464b      	mov	r3, r9
 80031aa:	460a      	mov	r2, r1
 80031ac:	eb42 0303 	adc.w	r3, r2, r3
 80031b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80031be:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80031cc:	4649      	mov	r1, r9
 80031ce:	008b      	lsls	r3, r1, #2
 80031d0:	4641      	mov	r1, r8
 80031d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031d6:	4641      	mov	r1, r8
 80031d8:	008a      	lsls	r2, r1, #2
 80031da:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80031de:	f7fd fc31 	bl	8000a44 <__aeabi_uldivmod>
 80031e2:	4602      	mov	r2, r0
 80031e4:	460b      	mov	r3, r1
 80031e6:	4611      	mov	r1, r2
 80031e8:	4b38      	ldr	r3, [pc, #224]	@ (80032cc <UART_SetConfig+0x4e4>)
 80031ea:	fba3 2301 	umull	r2, r3, r3, r1
 80031ee:	095b      	lsrs	r3, r3, #5
 80031f0:	2264      	movs	r2, #100	@ 0x64
 80031f2:	fb02 f303 	mul.w	r3, r2, r3
 80031f6:	1acb      	subs	r3, r1, r3
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	3332      	adds	r3, #50	@ 0x32
 80031fc:	4a33      	ldr	r2, [pc, #204]	@ (80032cc <UART_SetConfig+0x4e4>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	095b      	lsrs	r3, r3, #5
 8003204:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003208:	441c      	add	r4, r3
 800320a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800320e:	2200      	movs	r2, #0
 8003210:	673b      	str	r3, [r7, #112]	@ 0x70
 8003212:	677a      	str	r2, [r7, #116]	@ 0x74
 8003214:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003218:	4642      	mov	r2, r8
 800321a:	464b      	mov	r3, r9
 800321c:	1891      	adds	r1, r2, r2
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	415b      	adcs	r3, r3
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003228:	4641      	mov	r1, r8
 800322a:	1851      	adds	r1, r2, r1
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	4649      	mov	r1, r9
 8003230:	414b      	adcs	r3, r1
 8003232:	607b      	str	r3, [r7, #4]
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003240:	4659      	mov	r1, fp
 8003242:	00cb      	lsls	r3, r1, #3
 8003244:	4651      	mov	r1, sl
 8003246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800324a:	4651      	mov	r1, sl
 800324c:	00ca      	lsls	r2, r1, #3
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	4603      	mov	r3, r0
 8003254:	4642      	mov	r2, r8
 8003256:	189b      	adds	r3, r3, r2
 8003258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800325a:	464b      	mov	r3, r9
 800325c:	460a      	mov	r2, r1
 800325e:	eb42 0303 	adc.w	r3, r2, r3
 8003262:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	663b      	str	r3, [r7, #96]	@ 0x60
 800326e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800327c:	4649      	mov	r1, r9
 800327e:	008b      	lsls	r3, r1, #2
 8003280:	4641      	mov	r1, r8
 8003282:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003286:	4641      	mov	r1, r8
 8003288:	008a      	lsls	r2, r1, #2
 800328a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800328e:	f7fd fbd9 	bl	8000a44 <__aeabi_uldivmod>
 8003292:	4602      	mov	r2, r0
 8003294:	460b      	mov	r3, r1
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <UART_SetConfig+0x4e4>)
 8003298:	fba3 1302 	umull	r1, r3, r3, r2
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	2164      	movs	r1, #100	@ 0x64
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	3332      	adds	r3, #50	@ 0x32
 80032aa:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <UART_SetConfig+0x4e4>)
 80032ac:	fba2 2303 	umull	r2, r3, r2, r3
 80032b0:	095b      	lsrs	r3, r3, #5
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4422      	add	r2, r4
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80032c6:	46bd      	mov	sp, r7
 80032c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032cc:	51eb851f 	.word	0x51eb851f

080032d0 <memset>:
 80032d0:	4402      	add	r2, r0
 80032d2:	4603      	mov	r3, r0
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d100      	bne.n	80032da <memset+0xa>
 80032d8:	4770      	bx	lr
 80032da:	f803 1b01 	strb.w	r1, [r3], #1
 80032de:	e7f9      	b.n	80032d4 <memset+0x4>

080032e0 <__libc_init_array>:
 80032e0:	b570      	push	{r4, r5, r6, lr}
 80032e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003318 <__libc_init_array+0x38>)
 80032e4:	4c0d      	ldr	r4, [pc, #52]	@ (800331c <__libc_init_array+0x3c>)
 80032e6:	1b64      	subs	r4, r4, r5
 80032e8:	10a4      	asrs	r4, r4, #2
 80032ea:	2600      	movs	r6, #0
 80032ec:	42a6      	cmp	r6, r4
 80032ee:	d109      	bne.n	8003304 <__libc_init_array+0x24>
 80032f0:	4d0b      	ldr	r5, [pc, #44]	@ (8003320 <__libc_init_array+0x40>)
 80032f2:	4c0c      	ldr	r4, [pc, #48]	@ (8003324 <__libc_init_array+0x44>)
 80032f4:	f000 f818 	bl	8003328 <_init>
 80032f8:	1b64      	subs	r4, r4, r5
 80032fa:	10a4      	asrs	r4, r4, #2
 80032fc:	2600      	movs	r6, #0
 80032fe:	42a6      	cmp	r6, r4
 8003300:	d105      	bne.n	800330e <__libc_init_array+0x2e>
 8003302:	bd70      	pop	{r4, r5, r6, pc}
 8003304:	f855 3b04 	ldr.w	r3, [r5], #4
 8003308:	4798      	blx	r3
 800330a:	3601      	adds	r6, #1
 800330c:	e7ee      	b.n	80032ec <__libc_init_array+0xc>
 800330e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003312:	4798      	blx	r3
 8003314:	3601      	adds	r6, #1
 8003316:	e7f2      	b.n	80032fe <__libc_init_array+0x1e>
 8003318:	08003360 	.word	0x08003360
 800331c:	08003360 	.word	0x08003360
 8003320:	08003360 	.word	0x08003360
 8003324:	08003364 	.word	0x08003364

08003328 <_init>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr

08003334 <_fini>:
 8003334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003336:	bf00      	nop
 8003338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800333a:	bc08      	pop	{r3}
 800333c:	469e      	mov	lr, r3
 800333e:	4770      	bx	lr
